1565844279
3 3
11 libpandaode 4 sTqO 11 panda3d.ode 
588
674 8 OdeWorld 0 4 1269 18 OdeWorld::OdeWorld 0 2 1 2 0
67
OdeWorld::OdeWorld(void);
OdeWorld::OdeWorld(OdeWorld const &copy);

675 7 destroy 0 4 1269 17 OdeWorld::destroy 0 1 3 0
29
void OdeWorld::destroy(void);

676 8 is_empty 0 4 1269 18 OdeWorld::is_empty 0 1 4 205
/**
 * Returns true if the ID is 0, meaning the OdeWorld does not point to a valid
 * world.  It is an error to call a method on an empty world.  Note that an
 * empty OdeWorld also evaluates to False.
 */
43
inline bool OdeWorld::is_empty(void) const;

677 6 get_id 0 4 1269 16 OdeWorld::get_id 0 1 5 43
/**
 * Returns the underlying dWorldID.
 */
45
inline dWorldID OdeWorld::get_id(void) const;

678 11 set_gravity 0 4 1269 21 OdeWorld::set_gravity 0 2 6 7 0
119
inline void OdeWorld::set_gravity(dReal x, dReal y, dReal z);
inline void OdeWorld::set_gravity(LVecBase3f const &vec);

679 7 set_erp 0 4 1269 17 OdeWorld::set_erp 0 1 8 0
41
inline void OdeWorld::set_erp(dReal erp);

680 7 set_cfm 0 4 1269 17 OdeWorld::set_cfm 0 1 9 0
41
inline void OdeWorld::set_cfm(dReal cfm);

681 29 set_quick_step_num_iterations 0 4 1269 39 OdeWorld::set_quick_step_num_iterations 0 1 10 0
61
inline void OdeWorld::set_quick_step_num_iterations(int num);

682 16 set_quick_step_w 0 4 1269 26 OdeWorld::set_quick_step_w 0 1 11 0
62
inline void OdeWorld::set_quick_step_w(dReal over_relaxation);

683 30 set_contact_max_correcting_vel 0 4 1269 40 OdeWorld::set_contact_max_correcting_vel 0 1 12 0
64
inline void OdeWorld::set_contact_max_correcting_vel(dReal vel);

684 25 set_contact_surface_layer 0 4 1269 35 OdeWorld::set_contact_surface_layer 0 1 13 0
61
inline void OdeWorld::set_contact_surface_layer(dReal depth);

685 33 set_auto_disable_linear_threshold 0 4 1269 43 OdeWorld::set_auto_disable_linear_threshold 0 1 14 0
80
inline void OdeWorld::set_auto_disable_linear_threshold(dReal linear_threshold);

686 34 set_auto_disable_angular_threshold 0 4 1269 44 OdeWorld::set_auto_disable_angular_threshold 0 1 15 0
82
inline void OdeWorld::set_auto_disable_angular_threshold(dReal angular_threshold);

687 22 set_auto_disable_steps 0 4 1269 32 OdeWorld::set_auto_disable_steps 0 1 16 0
56
inline void OdeWorld::set_auto_disable_steps(int steps);

688 21 set_auto_disable_time 0 4 1269 31 OdeWorld::set_auto_disable_time 0 1 17 0
56
inline void OdeWorld::set_auto_disable_time(dReal time);

689 21 set_auto_disable_flag 0 4 1269 31 OdeWorld::set_auto_disable_flag 0 1 18 0
65
inline void OdeWorld::set_auto_disable_flag(int do_auto_disable);

690 11 get_gravity 0 4 1269 21 OdeWorld::get_gravity 0 1 19 0
52
inline LVecBase3f OdeWorld::get_gravity(void) const;

691 7 get_erp 0 4 1269 17 OdeWorld::get_erp 0 1 20 0
43
inline dReal OdeWorld::get_erp(void) const;

692 7 get_cfm 0 4 1269 17 OdeWorld::get_cfm 0 1 21 0
43
inline dReal OdeWorld::get_cfm(void) const;

693 29 get_quick_step_num_iterations 0 4 1269 39 OdeWorld::get_quick_step_num_iterations 0 1 22 0
63
inline int OdeWorld::get_quick_step_num_iterations(void) const;

694 16 get_quick_step_w 0 4 1269 26 OdeWorld::get_quick_step_w 0 1 23 0
52
inline dReal OdeWorld::get_quick_step_w(void) const;

695 30 get_contact_max_correcting_vel 0 4 1269 40 OdeWorld::get_contact_max_correcting_vel 0 1 24 0
66
inline dReal OdeWorld::get_contact_max_correcting_vel(void) const;

696 25 get_contact_surface_layer 0 4 1269 35 OdeWorld::get_contact_surface_layer 0 1 25 0
61
inline dReal OdeWorld::get_contact_surface_layer(void) const;

697 33 get_auto_disable_linear_threshold 0 4 1269 43 OdeWorld::get_auto_disable_linear_threshold 0 1 26 0
69
inline dReal OdeWorld::get_auto_disable_linear_threshold(void) const;

698 34 get_auto_disable_angular_threshold 0 4 1269 44 OdeWorld::get_auto_disable_angular_threshold 0 1 27 0
70
inline dReal OdeWorld::get_auto_disable_angular_threshold(void) const;

699 22 get_auto_disable_steps 0 4 1269 32 OdeWorld::get_auto_disable_steps 0 1 28 0
56
inline int OdeWorld::get_auto_disable_steps(void) const;

700 21 get_auto_disable_time 0 4 1269 31 OdeWorld::get_auto_disable_time 0 1 29 0
57
inline dReal OdeWorld::get_auto_disable_time(void) const;

701 21 get_auto_disable_flag 0 4 1269 31 OdeWorld::get_auto_disable_flag 0 1 30 0
55
inline int OdeWorld::get_auto_disable_flag(void) const;

702 16 impulse_to_force 0 4 1269 26 OdeWorld::impulse_to_force 0 2 31 32 0
180
inline LVecBase3f OdeWorld::impulse_to_force(dReal stepsize, dReal ix, dReal iy, dReal iz);
inline LVecBase3f OdeWorld::impulse_to_force(dReal stepsize, LVecBase3f const &impulse);

703 4 step 0 4 1269 14 OdeWorld::step 0 1 33 0
43
inline void OdeWorld::step(dReal stepsize);

704 10 quick_step 0 4 1269 20 OdeWorld::quick_step 0 1 34 0
49
inline void OdeWorld::quick_step(dReal stepsize);

705 10 compare_to 0 4 1269 20 OdeWorld::compare_to 0 1 35 0
61
inline int OdeWorld::compare_to(OdeWorld const &other) const;

706 18 init_surface_table 0 4 1269 28 OdeWorld::init_surface_table 0 1 36 0
56
void OdeWorld::init_surface_table(uint8_t num_surfaces);

707 18 add_body_dampening 0 4 1269 28 OdeWorld::add_body_dampening 0 1 37 56
// void assign_surface_body(OdeBody& body, int surface);
62
void OdeWorld::add_body_dampening(OdeBody &body, int surface);

708 17 set_surface_entry 0 4 1269 27 OdeWorld::set_surface_entry 0 1 38 0
161
void OdeWorld::set_surface_entry(uint8_t pos1, uint8_t pos2, dReal mu, dReal bounce, dReal bounce_vel, dReal soft_erp, dReal soft_cfm, dReal slip, dReal dampen);

709 15 apply_dampening 0 4 1269 25 OdeWorld::apply_dampening 0 1 39 0
57
float OdeWorld::apply_dampening(float dt, OdeBody &body);

710 22 operator typecast bool 0 132 1269 32 OdeWorld::operator typecast bool 0 1 41 0
27
operator bool (void) const;

711 14 get_class_type 0 4 1269 24 OdeWorld::get_class_type 0 1 40 0
49
static TypeHandle OdeWorld::get_class_type(void);

712 13 OdeJointGroup 0 4 1271 28 OdeJointGroup::OdeJointGroup 0 1 42 0
35
OdeJointGroup::OdeJointGroup(void);

713 7 destroy 0 4 1271 22 OdeJointGroup::destroy 0 1 43 0
34
void OdeJointGroup::destroy(void);

714 6 get_id 0 4 1271 21 OdeJointGroup::get_id 0 1 44 0
55
inline dJointGroupID OdeJointGroup::get_id(void) const;

715 5 empty 0 4 1271 20 OdeJointGroup::empty 0 1 45 0
45
inline void OdeJointGroup::empty(void) const;

716 10 compare_to 0 4 1271 25 OdeJointGroup::compare_to 0 1 46 0
71
inline int OdeJointGroup::compare_to(OdeJointGroup const &other) const;

717 14 get_class_type 0 4 1271 29 OdeJointGroup::get_class_type 0 1 47 0
54
static TypeHandle OdeJointGroup::get_class_type(void);

718 10 get_force1 0 4 1272 28 OdeJointFeedback::get_force1 0 1 50 0
64
inline LVector3f const OdeJointFeedback::get_force1(void) const;

719 10 get_force2 0 4 1272 28 OdeJointFeedback::get_force2 0 1 51 0
64
inline LVector3f const OdeJointFeedback::get_force2(void) const;

720 11 get_torque1 0 4 1272 29 OdeJointFeedback::get_torque1 0 1 52 0
65
inline LVector3f const OdeJointFeedback::get_torque1(void) const;

721 11 get_torque2 0 4 1272 29 OdeJointFeedback::get_torque2 0 1 53 0
65
inline LVector3f const OdeJointFeedback::get_torque2(void) const;

722 16 OdeJointFeedback 0 4 1272 34 OdeJointFeedback::OdeJointFeedback 0 2 48 49 0
137
inline OdeJointFeedback::OdeJointFeedback(void) = default;
inline OdeJointFeedback::OdeJointFeedback(OdeJointFeedback const &) = default;

723 17 ~OdeJointFeedback 0 4 1272 35 OdeJointFeedback::~OdeJointFeedback 0 0 0
42
OdeJointFeedback::~OdeJointFeedback(void);

724 7 destroy 0 4 1274 17 OdeJoint::destroy 0 1 54 0
29
void OdeJoint::destroy(void);

725 8 is_empty 0 4 1274 18 OdeJoint::is_empty 0 1 55 205
/**
 * Returns true if the ID is 0, meaning the OdeJoint does not point to a valid
 * joint.  It is an error to call a method on an empty joint.  Note that an
 * empty OdeJoint also evaluates to False.
 */
43
inline bool OdeJoint::is_empty(void) const;

726 6 get_id 0 4 1274 16 OdeJoint::get_id 0 1 56 43
/**
 * Returns the underlying dJointID.
 */
45
inline dJointID OdeJoint::get_id(void) const;

727 14 get_joint_type 0 4 1274 24 OdeJoint::get_joint_type 0 1 57 30
/* INLINE void *get_data(); */
48
inline int OdeJoint::get_joint_type(void) const;

728 8 get_body 0 4 1274 18 OdeJoint::get_body 0 1 58 0
44
OdeBody OdeJoint::get_body(int index) const;

729 12 set_feedback 0 4 1274 22 OdeJoint::set_feedback 0 2 59 60 0
109
inline void OdeJoint::set_feedback(OdeJointFeedback *);
inline void OdeJoint::set_feedback(bool flag = true);

730 12 get_feedback 0 4 1274 22 OdeJoint::get_feedback 0 1 61 0
54
inline OdeJointFeedback *OdeJoint::get_feedback(void);

731 6 attach 0 4 1274 16 OdeJoint::attach 0 1 62 0
56
void OdeJoint::attach(PyObject *body1, PyObject *body2);

732 13 attach_bodies 0 4 1274 23 OdeJoint::attach_bodies 0 1 63 175
/**
 * Attaches two OdeBody objects to this joint.  Order is important.  Consider
 * using the OdeJoint::attach extension function if you're using the Python
 * interface.
 */
73
void OdeJoint::attach_bodies(OdeBody const &body1, OdeBody const &body2);

733 11 attach_body 0 4 1274 21 OdeJoint::attach_body 0 1 64 237
/**
 * Attaches a single OdeBody to this joint at the specified index (0 or 1).
 * The other index will be set to the environment (null). Consider using the
 * OdeJoint::attach extension function if you're using the Python interface.
 */
59
void OdeJoint::attach_body(OdeBody const &body, int index);

734 6 detach 0 4 1274 16 OdeJoint::detach 0 1 65 0
28
void OdeJoint::detach(void);

735 5 write 0 6 1274 15 OdeJoint::write 0 1 66 0
93
virtual void OdeJoint::write(std::ostream &out = ::std::cout, unsigned int indent = 0) const;

736 10 compare_to 0 4 1274 20 OdeJoint::compare_to 0 1 67 0
61
inline int OdeJoint::compare_to(OdeJoint const &other) const;

737 11 operator == 0 4 1274 21 OdeJoint::operator == 0 1 68 0
63
inline bool OdeJoint::operator ==(OdeJoint const &other) const;

738 22 operator typecast bool 0 132 1274 32 OdeJoint::operator typecast bool 0 1 82 0
27
operator bool (void) const;

739 7 convert 0 4 1274 17 OdeJoint::convert 0 1 69 0
40
PyObject *OdeJoint::convert(void) const;

740 15 convert_to_ball 0 4 1274 25 OdeJoint::convert_to_ball 0 1 70 0
51
OdeBallJoint OdeJoint::convert_to_ball(void) const;

741 16 convert_to_hinge 0 4 1274 26 OdeJoint::convert_to_hinge 0 1 71 0
53
OdeHingeJoint OdeJoint::convert_to_hinge(void) const;

742 17 convert_to_slider 0 4 1274 27 OdeJoint::convert_to_slider 0 1 72 0
55
OdeSliderJoint OdeJoint::convert_to_slider(void) const;

743 18 convert_to_contact 0 4 1274 28 OdeJoint::convert_to_contact 0 1 73 0
57
OdeContactJoint OdeJoint::convert_to_contact(void) const;

744 20 convert_to_universal 0 4 1274 30 OdeJoint::convert_to_universal 0 1 74 0
61
OdeUniversalJoint OdeJoint::convert_to_universal(void) const;

745 17 convert_to_hinge2 0 4 1274 27 OdeJoint::convert_to_hinge2 0 1 75 0
55
OdeHinge2Joint OdeJoint::convert_to_hinge2(void) const;

746 16 convert_to_fixed 0 4 1274 26 OdeJoint::convert_to_fixed 0 1 76 0
53
OdeFixedJoint OdeJoint::convert_to_fixed(void) const;

747 15 convert_to_null 0 4 1274 25 OdeJoint::convert_to_null 0 1 77 0
51
OdeNullJoint OdeJoint::convert_to_null(void) const;

748 18 convert_to_a_motor 0 4 1274 28 OdeJoint::convert_to_a_motor 0 1 78 0
56
OdeAMotorJoint OdeJoint::convert_to_a_motor(void) const;

749 18 convert_to_l_motor 0 4 1274 28 OdeJoint::convert_to_l_motor 0 1 79 0
56
OdeLMotorJoint OdeJoint::convert_to_l_motor(void) const;

750 18 convert_to_plane2d 0 4 1274 28 OdeJoint::convert_to_plane2d 0 1 80 0
57
OdePlane2dJoint OdeJoint::convert_to_plane2d(void) const;

751 14 get_class_type 0 4 1274 24 OdeJoint::get_class_type 0 1 81 0
49
static TypeHandle OdeJoint::get_class_type(void);

752 14 OdeAMotorJoint 0 4 1276 30 OdeAMotorJoint::OdeAMotorJoint 0 2 83 84 0
125
OdeAMotorJoint::OdeAMotorJoint(OdeWorld &world);
OdeAMotorJoint::OdeAMotorJoint(OdeWorld &world, OdeJointGroup &joint_group);

753 12 set_num_axes 0 4 1276 28 OdeAMotorJoint::set_num_axes 0 1 85 0
50
inline void OdeAMotorJoint::set_num_axes(int num);

754 8 set_axis 0 4 1276 24 OdeAMotorJoint::set_axis 0 2 86 87 0
164
inline void OdeAMotorJoint::set_axis(int anum, int rel, dReal x, dReal y, dReal z);
inline void OdeAMotorJoint::set_axis(int anum, int rel, LVecBase3f const &axis);

755 9 set_angle 0 4 1276 25 OdeAMotorJoint::set_angle 0 1 88 0
61
inline void OdeAMotorJoint::set_angle(int anum, dReal angle);

756 8 set_mode 0 4 1276 24 OdeAMotorJoint::set_mode 0 1 89 0
47
inline void OdeAMotorJoint::set_mode(int mode);

757 11 add_torques 0 4 1276 27 OdeAMotorJoint::add_torques 0 1 90 0
85
inline void OdeAMotorJoint::add_torques(dReal torque1, dReal torque2, dReal torque3);

758 12 get_num_axes 0 4 1276 28 OdeAMotorJoint::get_num_axes 0 1 91 0
52
inline int OdeAMotorJoint::get_num_axes(void) const;

759 8 get_axis 0 4 1276 24 OdeAMotorJoint::get_axis 0 1 92 0
59
inline LVecBase3f OdeAMotorJoint::get_axis(int anum) const;

760 12 get_axis_rel 0 4 1276 28 OdeAMotorJoint::get_axis_rel 0 1 93 0
56
inline int OdeAMotorJoint::get_axis_rel(int anum) const;

761 9 get_angle 0 4 1276 25 OdeAMotorJoint::get_angle 0 1 94 0
55
inline dReal OdeAMotorJoint::get_angle(int anum) const;

762 14 get_angle_rate 0 4 1276 30 OdeAMotorJoint::get_angle_rate 0 1 95 0
60
inline dReal OdeAMotorJoint::get_angle_rate(int anum) const;

763 8 get_mode 0 4 1276 24 OdeAMotorJoint::get_mode 0 1 96 0
48
inline int OdeAMotorJoint::get_mode(void) const;

764 17 set_param_lo_stop 0 4 1276 33 OdeAMotorJoint::set_param_lo_stop 0 1 97 0
67
inline void OdeAMotorJoint::set_param_lo_stop(int axis, dReal val);

765 17 set_param_hi_stop 0 4 1276 33 OdeAMotorJoint::set_param_hi_stop 0 1 98 0
67
inline void OdeAMotorJoint::set_param_hi_stop(int axis, dReal val);

766 13 set_param_vel 0 4 1276 29 OdeAMotorJoint::set_param_vel 0 1 99 0
63
inline void OdeAMotorJoint::set_param_vel(int axis, dReal val);

767 15 set_param_f_max 0 4 1276 31 OdeAMotorJoint::set_param_f_max 0 1 100 0
65
inline void OdeAMotorJoint::set_param_f_max(int axis, dReal val);

768 22 set_param_fudge_factor 0 4 1276 38 OdeAMotorJoint::set_param_fudge_factor 0 1 101 0
72
inline void OdeAMotorJoint::set_param_fudge_factor(int axis, dReal val);

769 16 set_param_bounce 0 4 1276 32 OdeAMotorJoint::set_param_bounce 0 1 102 0
66
inline void OdeAMotorJoint::set_param_bounce(int axis, dReal val);

770 13 set_param_CFM 0 4 1276 29 OdeAMotorJoint::set_param_CFM 0 1 103 0
63
inline void OdeAMotorJoint::set_param_CFM(int axis, dReal val);

771 18 set_param_stop_ERP 0 4 1276 34 OdeAMotorJoint::set_param_stop_ERP 0 1 104 0
68
inline void OdeAMotorJoint::set_param_stop_ERP(int axis, dReal val);

772 18 set_param_stop_CFM 0 4 1276 34 OdeAMotorJoint::set_param_stop_CFM 0 1 105 0
68
inline void OdeAMotorJoint::set_param_stop_CFM(int axis, dReal val);

773 17 get_param_lo_stop 0 4 1276 33 OdeAMotorJoint::get_param_lo_stop 0 1 106 0
63
inline dReal OdeAMotorJoint::get_param_lo_stop(int axis) const;

774 17 get_param_hi_stop 0 4 1276 33 OdeAMotorJoint::get_param_hi_stop 0 1 107 0
63
inline dReal OdeAMotorJoint::get_param_hi_stop(int axis) const;

775 13 get_param_vel 0 4 1276 29 OdeAMotorJoint::get_param_vel 0 1 108 0
59
inline dReal OdeAMotorJoint::get_param_vel(int axis) const;

776 15 get_param_f_max 0 4 1276 31 OdeAMotorJoint::get_param_f_max 0 1 109 0
61
inline dReal OdeAMotorJoint::get_param_f_max(int axis) const;

777 22 get_param_fudge_factor 0 4 1276 38 OdeAMotorJoint::get_param_fudge_factor 0 1 110 0
68
inline dReal OdeAMotorJoint::get_param_fudge_factor(int axis) const;

778 16 get_param_bounce 0 4 1276 32 OdeAMotorJoint::get_param_bounce 0 1 111 0
62
inline dReal OdeAMotorJoint::get_param_bounce(int axis) const;

779 13 get_param_CFM 0 4 1276 29 OdeAMotorJoint::get_param_CFM 0 1 112 0
59
inline dReal OdeAMotorJoint::get_param_CFM(int axis) const;

780 18 get_param_stop_ERP 0 4 1276 34 OdeAMotorJoint::get_param_stop_ERP 0 1 113 0
64
inline dReal OdeAMotorJoint::get_param_stop_ERP(int axis) const;

781 18 get_param_stop_CFM 0 4 1276 34 OdeAMotorJoint::get_param_stop_CFM 0 1 114 0
64
inline dReal OdeAMotorJoint::get_param_stop_CFM(int axis) const;

782 14 get_class_type 0 4 1276 30 OdeAMotorJoint::get_class_type 0 1 115 0
55
static TypeHandle OdeAMotorJoint::get_class_type(void);

783 12 OdeBallJoint 0 4 1277 26 OdeBallJoint::OdeBallJoint 0 2 116 117 0
117
OdeBallJoint::OdeBallJoint(OdeWorld &world);
OdeBallJoint::OdeBallJoint(OdeWorld &world, OdeJointGroup &joint_group);

784 10 set_anchor 0 4 1277 24 OdeBallJoint::set_anchor 0 2 118 119 0
128
inline void OdeBallJoint::set_anchor(dReal x, dReal y, dReal z);
inline void OdeBallJoint::set_anchor(LVecBase3f const &anchor);

785 11 set_anchor2 0 4 1277 25 OdeBallJoint::set_anchor2 0 2 120 121 0
130
inline void OdeBallJoint::set_anchor2(dReal x, dReal y, dReal z);
inline void OdeBallJoint::set_anchor2(LVecBase3f const &anchor);

786 10 get_anchor 0 4 1277 24 OdeBallJoint::get_anchor 0 1 122 0
55
inline LVecBase3f OdeBallJoint::get_anchor(void) const;

787 11 get_anchor2 0 4 1277 25 OdeBallJoint::get_anchor2 0 1 123 0
56
inline LVecBase3f OdeBallJoint::get_anchor2(void) const;

788 14 get_class_type 0 4 1277 28 OdeBallJoint::get_class_type 0 1 124 0
53
static TypeHandle OdeBallJoint::get_class_type(void);

789 7 OdeMass 0 4 1278 16 OdeMass::OdeMass 0 2 125 126 0
62
OdeMass::OdeMass(void);
OdeMass::OdeMass(OdeMass const &copy);

790 5 check 0 4 1278 14 OdeMass::check 0 1 127 0
32
inline int OdeMass::check(void);

791 8 set_zero 0 4 1278 17 OdeMass::set_zero 0 1 128 0
36
inline void OdeMass::set_zero(void);

792 14 set_parameters 0 4 1278 23 OdeMass::set_parameters 0 2 129 130 0
248
inline void OdeMass::set_parameters(dReal themass, dReal cgx, dReal cgy, dReal cgz, dReal I11, dReal I22, dReal I33, dReal I12, dReal I13, dReal I23);
inline void OdeMass::set_parameters(dReal themass, LVecBase3f const &center, LMatrix3f const &r);

793 10 set_sphere 0 4 1278 19 OdeMass::set_sphere 0 1 131 0
61
inline void OdeMass::set_sphere(dReal density, dReal radius);

794 16 set_sphere_total 0 4 1278 25 OdeMass::set_sphere_total 0 1 132 0
70
inline void OdeMass::set_sphere_total(dReal total_mass, dReal radius);

795 11 set_capsule 0 4 1278 20 OdeMass::set_capsule 0 1 133 0
91
inline void OdeMass::set_capsule(dReal density, int direction, dReal radius, dReal length);

796 17 set_capsule_total 0 4 1278 26 OdeMass::set_capsule_total 0 1 134 0
100
inline void OdeMass::set_capsule_total(dReal total_mass, int direction, dReal radius, dReal length);

797 12 set_cylinder 0 4 1278 21 OdeMass::set_cylinder 0 1 135 0
92
inline void OdeMass::set_cylinder(dReal density, int direction, dReal radius, dReal length);

798 18 set_cylinder_total 0 4 1278 27 OdeMass::set_cylinder_total 0 1 136 0
101
inline void OdeMass::set_cylinder_total(dReal total_mass, int direction, dReal radius, dReal length);

799 7 set_box 0 4 1278 16 OdeMass::set_box 0 2 137 138 0
143
inline void OdeMass::set_box(dReal density, dReal lx, dReal ly, dReal lz);
inline void OdeMass::set_box(dReal density, LVecBase3f const &size);

800 13 set_box_total 0 4 1278 22 OdeMass::set_box_total 0 2 139 140 0
161
inline void OdeMass::set_box_total(dReal total_mass, dReal lx, dReal ly, dReal lz);
inline void OdeMass::set_box_total(dReal total_mass, LVecBase3f const &size);

801 6 adjust 0 4 1278 15 OdeMass::adjust 0 1 141 0
43
inline void OdeMass::adjust(dReal newmass);

802 9 translate 0 4 1278 18 OdeMass::translate 0 2 142 143 0
113
inline void OdeMass::translate(dReal x, dReal y, dReal z);
inline void OdeMass::translate(LVecBase3f const &pos);

803 6 rotate 0 4 1278 15 OdeMass::rotate 0 1 144 0
48
inline void OdeMass::rotate(LMatrix3f const &r);

804 3 add 0 4 1278 12 OdeMass::add 0 1 145 0
41
inline void OdeMass::add(OdeMass &other);

805 13 get_magnitude 0 4 1278 22 OdeMass::get_magnitude 0 1 146 0
48
inline dReal OdeMass::get_magnitude(void) const;

806 10 get_center 0 4 1278 19 OdeMass::get_center 0 1 147 0
48
inline LPoint3f OdeMass::get_center(void) const;

807 19 get_inertial_tensor 0 4 1278 28 OdeMass::get_inertial_tensor 0 1 148 0
58
inline LMatrix3f OdeMass::get_inertial_tensor(void) const;

808 5 write 0 6 1278 14 OdeMass::write 0 1 149 0
92
virtual void OdeMass::write(std::ostream &out = ::std::cout, unsigned int indent = 0) const;

809 14 get_class_type 0 4 1278 23 OdeMass::get_class_type 0 1 150 0
48
static TypeHandle OdeMass::get_class_type(void);

810 7 OdeBody 0 4 1280 16 OdeBody::OdeBody 0 1 151 0
34
OdeBody::OdeBody(OdeWorld &world);

811 7 destroy 0 4 1280 16 OdeBody::destroy 0 1 152 0
28
void OdeBody::destroy(void);

812 8 is_empty 0 4 1280 17 OdeBody::is_empty 0 1 153 201
/**
 * Returns true if the ID is 0, meaning the OdeBody does not point to a valid
 * body.  It is an error to call a method on an empty body.  Note that an
 * empty OdeBody also evaluates to False.
 */
42
inline bool OdeBody::is_empty(void) const;

813 6 get_id 0 4 1280 15 OdeBody::get_id 0 1 154 42
/**
 * Returns the underlying dBodyID.
 */
43
inline dBodyID OdeBody::get_id(void) const;

814 33 set_auto_disable_linear_threshold 0 4 1280 42 OdeBody::set_auto_disable_linear_threshold 0 1 155 0
79
inline void OdeBody::set_auto_disable_linear_threshold(dReal linear_threshold);

815 34 set_auto_disable_angular_threshold 0 4 1280 43 OdeBody::set_auto_disable_angular_threshold 0 1 156 0
81
inline void OdeBody::set_auto_disable_angular_threshold(dReal angular_threshold);

816 22 set_auto_disable_steps 0 4 1280 31 OdeBody::set_auto_disable_steps 0 1 157 0
55
inline void OdeBody::set_auto_disable_steps(int steps);

817 21 set_auto_disable_time 0 4 1280 30 OdeBody::set_auto_disable_time 0 1 158 0
55
inline void OdeBody::set_auto_disable_time(dReal time);

818 21 set_auto_disable_flag 0 4 1280 30 OdeBody::set_auto_disable_flag 0 1 159 0
64
inline void OdeBody::set_auto_disable_flag(int do_auto_disable);

819 25 set_auto_disable_defaults 0 4 1280 34 OdeBody::set_auto_disable_defaults 0 1 160 0
53
inline void OdeBody::set_auto_disable_defaults(void);

820 8 set_data 0 4 1280 17 OdeBody::set_data 0 1 161 0
82
inline void OdeBody::set_data(void *data);
void OdeBody::set_data(PyObject *data);

821 12 set_position 0 4 1280 21 OdeBody::set_position 0 2 162 163 0
119
inline void OdeBody::set_position(dReal x, dReal y, dReal z);
inline void OdeBody::set_position(LVecBase3f const &pos);

822 12 set_rotation 0 4 1280 21 OdeBody::set_rotation 0 1 164 0
54
inline void OdeBody::set_rotation(LMatrix3f const &r);

823 14 set_quaternion 0 4 1280 23 OdeBody::set_quaternion 0 1 165 0
59
inline void OdeBody::set_quaternion(LQuaternionf const &q);

824 14 set_linear_vel 0 4 1280 23 OdeBody::set_linear_vel 0 2 166 167 0
123
inline void OdeBody::set_linear_vel(dReal x, dReal y, dReal z);
inline void OdeBody::set_linear_vel(LVecBase3f const &vel);

825 15 set_angular_vel 0 4 1280 24 OdeBody::set_angular_vel 0 2 168 169 0
125
inline void OdeBody::set_angular_vel(dReal x, dReal y, dReal z);
inline void OdeBody::set_angular_vel(LVecBase3f const &vel);

826 8 set_mass 0 4 1280 17 OdeBody::set_mass 0 1 170 0
45
inline void OdeBody::set_mass(OdeMass &mass);

827 33 get_auto_disable_linear_threshold 0 4 1280 42 OdeBody::get_auto_disable_linear_threshold 0 1 171 0
68
inline dReal OdeBody::get_auto_disable_linear_threshold(void) const;

828 34 get_auto_disable_angular_threshold 0 4 1280 43 OdeBody::get_auto_disable_angular_threshold 0 1 172 0
69
inline dReal OdeBody::get_auto_disable_angular_threshold(void) const;

829 22 get_auto_disable_steps 0 4 1280 31 OdeBody::get_auto_disable_steps 0 1 173 0
55
inline int OdeBody::get_auto_disable_steps(void) const;

830 21 get_auto_disable_time 0 4 1280 30 OdeBody::get_auto_disable_time 0 1 174 0
56
inline dReal OdeBody::get_auto_disable_time(void) const;

831 21 get_auto_disable_flag 0 4 1280 30 OdeBody::get_auto_disable_flag 0 1 175 0
54
inline int OdeBody::get_auto_disable_flag(void) const;

832 8 get_data 0 4 1280 17 OdeBody::get_data 0 1 176 0
40
PyObject *OdeBody::get_data(void) const;

833 12 get_position 0 4 1280 21 OdeBody::get_position 0 1 177 0
52
inline LVecBase3f OdeBody::get_position(void) const;

834 12 get_rotation 0 4 1280 21 OdeBody::get_rotation 0 1 178 0
51
inline LMatrix3f OdeBody::get_rotation(void) const;

835 14 get_quaternion 0 4 1280 23 OdeBody::get_quaternion 0 1 179 0
54
inline LVecBase4f OdeBody::get_quaternion(void) const;

836 14 get_linear_vel 0 4 1280 23 OdeBody::get_linear_vel 0 1 180 0
54
inline LVecBase3f OdeBody::get_linear_vel(void) const;

837 15 get_angular_vel 0 4 1280 24 OdeBody::get_angular_vel 0 1 181 0
55
inline LVecBase3f OdeBody::get_angular_vel(void) const;

838 8 get_mass 0 4 1280 17 OdeBody::get_mass 0 1 182 0
45
inline OdeMass OdeBody::get_mass(void) const;

839 9 add_force 0 4 1280 18 OdeBody::add_force 0 2 183 184 0
114
inline void OdeBody::add_force(dReal fx, dReal fy, dReal fz);
inline void OdeBody::add_force(LVecBase3f const &f);

840 10 add_torque 0 4 1280 19 OdeBody::add_torque 0 2 185 186 0
116
inline void OdeBody::add_torque(dReal fx, dReal fy, dReal fz);
inline void OdeBody::add_torque(LVecBase3f const &f);

841 13 add_rel_force 0 4 1280 22 OdeBody::add_rel_force 0 2 187 188 0
122
inline void OdeBody::add_rel_force(dReal fx, dReal fy, dReal fz);
inline void OdeBody::add_rel_force(LVecBase3f const &f);

842 14 add_rel_torque 0 4 1280 23 OdeBody::add_rel_torque 0 2 189 190 0
124
inline void OdeBody::add_rel_torque(dReal fx, dReal fy, dReal fz);
inline void OdeBody::add_rel_torque(LVecBase3f const &f);

843 16 add_force_at_pos 0 4 1280 25 OdeBody::add_force_at_pos 0 2 191 192 0
181
inline void OdeBody::add_force_at_pos(dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
inline void OdeBody::add_force_at_pos(LVecBase3f const &f, LVecBase3f const &pos);

844 20 add_force_at_rel_pos 0 4 1280 29 OdeBody::add_force_at_rel_pos 0 2 193 194 0
189
inline void OdeBody::add_force_at_rel_pos(dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
inline void OdeBody::add_force_at_rel_pos(LVecBase3f const &f, LVecBase3f const &pos);

845 20 add_rel_force_at_pos 0 4 1280 29 OdeBody::add_rel_force_at_pos 0 2 195 196 0
189
inline void OdeBody::add_rel_force_at_pos(dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
inline void OdeBody::add_rel_force_at_pos(LVecBase3f const &f, LVecBase3f const &pos);

846 24 add_rel_force_at_rel_pos 0 4 1280 33 OdeBody::add_rel_force_at_rel_pos 0 2 197 198 0
197
inline void OdeBody::add_rel_force_at_rel_pos(dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
inline void OdeBody::add_rel_force_at_rel_pos(LVecBase3f const &f, LVecBase3f const &pos);

847 9 set_force 0 4 1280 18 OdeBody::set_force 0 2 199 200 0
111
inline void OdeBody::set_force(dReal x, dReal y, dReal z);
inline void OdeBody::set_force(LVecBase3f const &f);

848 10 set_torque 0 4 1280 19 OdeBody::set_torque 0 2 201 202 0
113
inline void OdeBody::set_torque(dReal x, dReal y, dReal z);
inline void OdeBody::set_torque(LVecBase3f const &f);

849 17 get_rel_point_pos 0 4 1280 26 OdeBody::get_rel_point_pos 0 2 203 204 0
152
inline LPoint3f OdeBody::get_rel_point_pos(dReal px, dReal py, dReal pz) const;
inline LPoint3f OdeBody::get_rel_point_pos(LVecBase3f const &pos) const;

850 17 get_rel_point_vel 0 4 1280 26 OdeBody::get_rel_point_vel 0 2 205 206 0
152
inline LPoint3f OdeBody::get_rel_point_vel(dReal px, dReal py, dReal pz) const;
inline LPoint3f OdeBody::get_rel_point_vel(LVecBase3f const &pos) const;

851 13 get_point_vel 0 4 1280 22 OdeBody::get_point_vel 0 2 207 208 0
144
inline LPoint3f OdeBody::get_point_vel(dReal px, dReal py, dReal pz) const;
inline LPoint3f OdeBody::get_point_vel(LVecBase3f const &pos) const;

852 17 get_pos_rel_point 0 4 1280 26 OdeBody::get_pos_rel_point 0 2 209 210 0
152
inline LPoint3f OdeBody::get_pos_rel_point(dReal px, dReal py, dReal pz) const;
inline LPoint3f OdeBody::get_pos_rel_point(LVecBase3f const &pos) const;

853 15 vector_to_world 0 4 1280 24 OdeBody::vector_to_world 0 2 211 212 0
152
inline LVecBase3f OdeBody::vector_to_world(dReal px, dReal py, dReal pz) const;
inline LVecBase3f OdeBody::vector_to_world(LVecBase3f const &pos) const;

854 17 vector_from_world 0 4 1280 26 OdeBody::vector_from_world 0 2 213 214 0
156
inline LVecBase3f OdeBody::vector_from_world(dReal px, dReal py, dReal pz) const;
inline LVecBase3f OdeBody::vector_from_world(LVecBase3f const &pos) const;

855 24 set_finite_rotation_mode 0 4 1280 33 OdeBody::set_finite_rotation_mode 0 1 215 0
56
inline void OdeBody::set_finite_rotation_mode(int mode);

856 24 set_finite_rotation_axis 0 4 1280 33 OdeBody::set_finite_rotation_axis 0 2 216 217 0
144
inline void OdeBody::set_finite_rotation_axis(dReal x, dReal y, dReal z);
inline void OdeBody::set_finite_rotation_axis(LVecBase3f const &axis);

857 24 get_finite_rotation_mode 0 4 1280 33 OdeBody::get_finite_rotation_mode 0 1 218 0
57
inline int OdeBody::get_finite_rotation_mode(void) const;

858 24 get_finite_rotation_axis 0 4 1280 33 OdeBody::get_finite_rotation_axis 0 1 219 0
64
inline LVecBase3f OdeBody::get_finite_rotation_axis(void) const;

859 14 get_num_joints 0 4 1280 23 OdeBody::get_num_joints 0 1 220 0
47
inline int OdeBody::get_num_joints(void) const;

860 9 get_joint 0 4 1280 18 OdeBody::get_joint 0 1 221 0
45
OdeJoint OdeBody::get_joint(int index) const;

861 19 get_converted_joint 0 4 1280 28 OdeBody::get_converted_joint 0 1 222 0
59
inline PyObject *OdeBody::get_converted_joint(int i) const;

862 0 0 0 0 0 0 0 0
0

863 6 enable 0 4 1280 15 OdeBody::enable 0 1 223 0
34
inline void OdeBody::enable(void);

864 7 disable 0 4 1280 16 OdeBody::disable 0 1 224 0
35
inline void OdeBody::disable(void);

865 10 is_enabled 0 4 1280 19 OdeBody::is_enabled 0 1 225 0
43
inline int OdeBody::is_enabled(void) const;

866 16 set_gravity_mode 0 4 1280 25 OdeBody::set_gravity_mode 0 1 226 0
48
inline void OdeBody::set_gravity_mode(int mode);

867 16 get_gravity_mode 0 4 1280 25 OdeBody::get_gravity_mode 0 1 227 0
49
inline int OdeBody::get_gravity_mode(void) const;

868 5 write 0 6 1280 14 OdeBody::write 0 1 228 0
92
virtual void OdeBody::write(std::ostream &out = ::std::cout, unsigned int indent = 0) const;

869 22 operator typecast bool 0 132 1280 31 OdeBody::operator typecast bool 0 1 231 0
27
operator bool (void) const;

870 10 compare_to 0 4 1280 19 OdeBody::compare_to 0 1 229 0
59
inline int OdeBody::compare_to(OdeBody const &other) const;

871 14 get_class_type 0 4 1280 23 OdeBody::get_class_type 0 1 230 0
48
static TypeHandle OdeBody::get_class_type(void);

872 7 destroy 0 4 1284 17 OdeSpace::destroy 0 1 232 0
29
void OdeSpace::destroy(void);

873 8 is_empty 0 4 1284 18 OdeSpace::is_empty 0 1 233 205
/**
 * Returns true if the ID is 0, meaning the OdeSpace does not point to a valid
 * space.  It is an error to call a method on an empty space.  Note that an
 * empty OdeSpace also evaluates to False.
 */
43
inline bool OdeSpace::is_empty(void) const;

874 11 set_cleanup 0 4 1284 21 OdeSpace::set_cleanup 0 1 234 0
44
inline void OdeSpace::set_cleanup(int mode);

875 11 get_cleanup 0 4 1284 21 OdeSpace::get_cleanup 0 1 235 0
45
inline int OdeSpace::get_cleanup(void) const;

876 5 query 0 4 1284 15 OdeSpace::query 0 2 236 237 0
97
int OdeSpace::query(OdeGeom const &geom) const;
int OdeSpace::query(OdeSpace const &space) const;

877 13 get_num_geoms 0 4 1284 23 OdeSpace::get_num_geoms 0 1 238 0
47
inline int OdeSpace::get_num_geoms(void) const;

878 8 get_AABB 0 4 1284 18 OdeSpace::get_AABB 0 1 239 0
71
inline void OdeSpace::get_AABB(LVecBase3f &min, LVecBase3f &max) const;

879 13 get_AA_bounds 0 4 1284 23 OdeSpace::get_AA_bounds 0 1 240 0
53
inline PyObject *OdeSpace::get_AA_bounds(void) const;

880 8 is_space 0 4 1284 18 OdeSpace::is_space 0 1 241 0
36
inline int OdeSpace::is_space(void);

881 9 get_class 0 4 1284 19 OdeSpace::get_class 0 1 242 0
43
inline int OdeSpace::get_class(void) const;

882 17 set_category_bits 0 4 1284 27 OdeSpace::set_category_bits 0 1 243 0
63
inline void OdeSpace::set_category_bits(BitMask32 const &bits);

883 16 set_collide_bits 0 4 1284 26 OdeSpace::set_collide_bits 0 1 244 0
62
inline void OdeSpace::set_collide_bits(BitMask32 const &bits);

884 17 get_category_bits 0 4 1284 27 OdeSpace::get_category_bits 0 1 245 0
51
inline BitMask32 OdeSpace::get_category_bits(void);

885 16 get_collide_bits 0 4 1284 26 OdeSpace::get_collide_bits 0 1 246 0
50
inline BitMask32 OdeSpace::get_collide_bits(void);

886 6 enable 0 4 1284 16 OdeSpace::enable 0 1 247 0
35
inline void OdeSpace::enable(void);

887 7 disable 0 4 1284 17 OdeSpace::disable 0 1 248 0
36
inline void OdeSpace::disable(void);

888 10 is_enabled 0 4 1284 20 OdeSpace::is_enabled 0 1 249 0
38
inline int OdeSpace::is_enabled(void);

889 22 set_auto_collide_world 0 4 1284 32 OdeSpace::set_auto_collide_world 0 1 250 0
50
void OdeSpace::set_auto_collide_world(OdeWorld &);

890 28 set_auto_collide_joint_group 0 4 1284 38 OdeSpace::set_auto_collide_joint_group 0 1 251 0
61
void OdeSpace::set_auto_collide_joint_group(OdeJointGroup &);

891 3 add 0 4 1284 13 OdeSpace::add 0 2 252 253 0
71
void OdeSpace::add(OdeGeom &geom);
void OdeSpace::add(OdeSpace &space);

892 6 remove 0 4 1284 16 OdeSpace::remove 0 2 254 255 0
77
void OdeSpace::remove(OdeGeom &geom);
void OdeSpace::remove(OdeSpace &space);

893 5 clean 0 4 1284 15 OdeSpace::clean 0 1 256 0
27
void OdeSpace::clean(void);

894 8 get_geom 0 4 1284 18 OdeSpace::get_geom 0 1 257 0
34
OdeGeom OdeSpace::get_geom(int i);

895 9 get_space 0 4 1284 19 OdeSpace::get_space 0 1 258 0
48
inline OdeSpace OdeSpace::get_space(void) const;

896 5 write 0 6 1284 15 OdeSpace::write 0 1 259 0
93
virtual void OdeSpace::write(std::ostream &out = ::std::cout, unsigned int indent = 0) const;

897 22 operator typecast bool 0 132 1284 32 OdeSpace::operator typecast bool 0 1 279 0
27
operator bool (void) const;

898 23 convert_to_simple_space 0 4 1284 33 OdeSpace::convert_to_simple_space 0 1 260 0
61
OdeSimpleSpace OdeSpace::convert_to_simple_space(void) const;

899 21 convert_to_hash_space 0 4 1284 31 OdeSpace::convert_to_hash_space 0 1 261 0
57
OdeHashSpace OdeSpace::convert_to_hash_space(void) const;

900 26 convert_to_quad_tree_space 0 4 1284 36 OdeSpace::convert_to_quad_tree_space 0 1 262 0
66
OdeQuadTreeSpace OdeSpace::convert_to_quad_tree_space(void) const;

901 7 convert 0 4 1284 17 OdeSpace::convert 0 1 263 0
40
PyObject *OdeSpace::convert(void) const;

902 18 get_converted_geom 0 4 1284 28 OdeSpace::get_converted_geom 0 1 264 0
59
inline PyObject *OdeSpace::get_converted_geom(int i) const;

903 19 get_converted_space 0 4 1284 29 OdeSpace::get_converted_space 0 1 265 0
59
inline PyObject *OdeSpace::get_converted_space(void) const;

904 12 auto_collide 0 4 1284 22 OdeSpace::auto_collide 0 1 266 0
34
void OdeSpace::auto_collide(void);

905 7 collide 0 4 1284 17 OdeSpace::collide 0 1 267 0
62
int OdeSpace::collide(PyObject *arg, PyObject *near_callback);

906 14 set_collide_id 0 4 1284 24 OdeSpace::set_collide_id 0 2 268 269 0
118
int OdeSpace::set_collide_id(int collide_id, dGeomID id);
int OdeSpace::set_collide_id(OdeGeom &geom, int collide_id);

907 16 set_surface_type 0 4 1284 26 OdeSpace::set_surface_type 0 2 270 271 0
128
void OdeSpace::set_surface_type(int surface_type, dGeomID id);
void OdeSpace::set_surface_type(OdeGeom &geom, int surface_type);

908 16 get_surface_type 0 4 1284 26 OdeSpace::get_surface_type 0 2 272 273 0
90
int OdeSpace::get_surface_type(dGeomID o1);
int OdeSpace::get_surface_type(OdeGeom &geom);

909 14 get_collide_id 0 4 1284 24 OdeSpace::get_collide_id 0 2 274 275 0
86
int OdeSpace::get_collide_id(dGeomID o1);
int OdeSpace::get_collide_id(OdeGeom &geom);

910 19 set_collision_event 0 4 1284 29 OdeSpace::set_collision_event 0 1 276 0
73
inline void OdeSpace::set_collision_event(std::string const &event_name);

911 19 get_collision_event 0 4 1284 29 OdeSpace::get_collision_event 0 1 277 0
55
inline std::string OdeSpace::get_collision_event(void);

912 14 get_class_type 0 4 1284 24 OdeSpace::get_class_type 0 1 278 0
49
static TypeHandle OdeSpace::get_class_type(void);

913 7 destroy 0 4 1285 16 OdeGeom::destroy 0 1 280 0
28
void OdeGeom::destroy(void);

914 8 is_empty 0 4 1285 17 OdeGeom::is_empty 0 1 281 201
/**
 * Returns true if the ID is 0, meaning the OdeGeom does not point to a valid
 * geom.  It is an error to call a method on an empty geom.  Note that an
 * empty OdeGeom also evaluates to False.
 */
42
inline bool OdeGeom::is_empty(void) const;

915 6 get_id 0 4 1285 15 OdeGeom::get_id 0 1 282 42
/**
 * Returns the underlying dGeomID.
 */
43
inline dGeomID OdeGeom::get_id(void) const;

916 8 set_body 0 4 1285 17 OdeGeom::set_body 0 1 283 36
// INLINE void set_data(void* data);
45
inline void OdeGeom::set_body(OdeBody &body);

917 8 has_body 0 4 1285 17 OdeGeom::has_body 0 1 284 0
42
inline bool OdeGeom::has_body(void) const;

918 8 get_body 0 4 1285 17 OdeGeom::get_body 0 1 285 0
45
inline OdeBody OdeGeom::get_body(void) const;

919 12 set_position 0 4 1285 21 OdeGeom::set_position 0 2 286 287 0
119
inline void OdeGeom::set_position(dReal x, dReal y, dReal z);
inline void OdeGeom::set_position(LVecBase3f const &pos);

920 12 set_rotation 0 4 1285 21 OdeGeom::set_rotation 0 1 288 0
54
inline void OdeGeom::set_rotation(LMatrix3f const &r);

921 14 set_quaternion 0 4 1285 23 OdeGeom::set_quaternion 0 1 289 0
59
inline void OdeGeom::set_quaternion(LQuaternionf const &q);

922 12 get_position 0 4 1285 21 OdeGeom::get_position 0 1 290 0
50
inline LPoint3f OdeGeom::get_position(void) const;

923 12 get_rotation 0 4 1285 21 OdeGeom::get_rotation 0 1 291 0
51
inline LMatrix3f OdeGeom::get_rotation(void) const;

924 14 get_quaternion 0 4 1285 23 OdeGeom::get_quaternion 0 1 292 0
56
inline LQuaternionf OdeGeom::get_quaternion(void) const;

925 8 get_AABB 0 4 1285 17 OdeGeom::get_AABB 0 1 293 0
70
inline void OdeGeom::get_AABB(LVecBase3f &min, LVecBase3f &max) const;

926 13 get_AA_bounds 0 4 1285 22 OdeGeom::get_AA_bounds 0 1 294 0
52
inline PyObject *OdeGeom::get_AA_bounds(void) const;

927 8 is_space 0 4 1285 17 OdeGeom::is_space 0 1 295 0
35
inline int OdeGeom::is_space(void);

928 9 get_class 0 4 1285 18 OdeGeom::get_class 0 1 296 0
42
inline int OdeGeom::get_class(void) const;

929 17 set_category_bits 0 4 1285 26 OdeGeom::set_category_bits 0 1 297 0
62
inline void OdeGeom::set_category_bits(BitMask32 const &bits);

930 16 set_collide_bits 0 4 1285 25 OdeGeom::set_collide_bits 0 1 298 0
61
inline void OdeGeom::set_collide_bits(BitMask32 const &bits);

931 17 get_category_bits 0 4 1285 26 OdeGeom::get_category_bits 0 1 299 0
50
inline BitMask32 OdeGeom::get_category_bits(void);

932 16 get_collide_bits 0 4 1285 25 OdeGeom::get_collide_bits 0 1 300 0
49
inline BitMask32 OdeGeom::get_collide_bits(void);

933 6 enable 0 4 1285 15 OdeGeom::enable 0 1 301 0
34
inline void OdeGeom::enable(void);

934 7 disable 0 4 1285 16 OdeGeom::disable 0 1 302 0
35
inline void OdeGeom::disable(void);

935 10 is_enabled 0 4 1285 19 OdeGeom::is_enabled 0 1 303 0
37
inline int OdeGeom::is_enabled(void);

936 19 set_offset_position 0 4 1285 28 OdeGeom::set_offset_position 0 2 304 305 0
133
inline void OdeGeom::set_offset_position(dReal x, dReal y, dReal z);
inline void OdeGeom::set_offset_position(LVecBase3f const &pos);

937 19 set_offset_rotation 0 4 1285 28 OdeGeom::set_offset_rotation 0 1 306 0
61
inline void OdeGeom::set_offset_rotation(LMatrix3f const &r);

938 21 set_offset_quaternion 0 4 1285 30 OdeGeom::set_offset_quaternion 0 1 307 0
66
inline void OdeGeom::set_offset_quaternion(LQuaternionf const &q);

939 25 set_offset_world_position 0 4 1285 34 OdeGeom::set_offset_world_position 0 2 308 309 0
145
inline void OdeGeom::set_offset_world_position(dReal x, dReal y, dReal z);
inline void OdeGeom::set_offset_world_position(LVecBase3f const &pos);

940 25 set_offset_world_rotation 0 4 1285 34 OdeGeom::set_offset_world_rotation 0 1 310 0
67
inline void OdeGeom::set_offset_world_rotation(LMatrix3f const &r);

941 27 set_offset_world_quaternion 0 4 1285 36 OdeGeom::set_offset_world_quaternion 0 1 311 0
72
inline void OdeGeom::set_offset_world_quaternion(LQuaternionf const &q);

942 12 clear_offset 0 4 1285 21 OdeGeom::clear_offset 0 1 312 0
40
inline void OdeGeom::clear_offset(void);

943 9 is_offset 0 4 1285 18 OdeGeom::is_offset 0 1 313 0
36
inline int OdeGeom::is_offset(void);

944 19 get_offset_position 0 4 1285 28 OdeGeom::get_offset_position 0 1 314 0
57
inline LPoint3f OdeGeom::get_offset_position(void) const;

945 19 get_offset_rotation 0 4 1285 28 OdeGeom::get_offset_rotation 0 1 315 0
58
inline LMatrix3f OdeGeom::get_offset_rotation(void) const;

946 21 get_offset_quaternion 0 4 1285 30 OdeGeom::get_offset_quaternion 0 1 316 0
63
inline LQuaternionf OdeGeom::get_offset_quaternion(void) const;

947 9 get_space 0 4 1285 18 OdeGeom::get_space 0 1 317 0
40
OdeSpace OdeGeom::get_space(void) const;

948 19 get_converted_space 0 4 1285 28 OdeGeom::get_converted_space 0 1 318 0
58
inline PyObject *OdeGeom::get_converted_space(void) const;

949 5 write 0 6 1285 14 OdeGeom::write 0 1 319 0
92
virtual void OdeGeom::write(std::ostream &out = ::std::cout, unsigned int indent = 0) const;

950 22 operator typecast bool 0 132 1285 31 OdeGeom::operator typecast bool 0 1 333 0
27
operator bool (void) const;

951 10 compare_to 0 4 1285 19 OdeGeom::compare_to 0 1 320 0
59
inline int OdeGeom::compare_to(OdeGeom const &other) const;

952 7 convert 0 4 1285 16 OdeGeom::convert 0 1 321 0
39
PyObject *OdeGeom::convert(void) const;

953 14 convert_to_box 0 4 1285 23 OdeGeom::convert_to_box 0 1 322 0
47
OdeBoxGeom OdeGeom::convert_to_box(void) const;

954 26 convert_to_capped_cylinder 0 4 1285 35 OdeGeom::convert_to_capped_cylinder 0 1 323 0
70
OdeCappedCylinderGeom OdeGeom::convert_to_capped_cylinder(void) const;

955 19 convert_to_cylinder 0 4 1285 28 OdeGeom::convert_to_cylinder 0 1 324 43
// OdeConvexGeom convert_to_convex() const;
57
OdeCylinderGeom OdeGeom::convert_to_cylinder(void) const;

956 16 convert_to_plane 0 4 1285 25 OdeGeom::convert_to_plane 0 1 325 53
// OdeHeightfieldGeom convert_to_heightfield() const;
51
OdePlaneGeom OdeGeom::convert_to_plane(void) const;

957 14 convert_to_ray 0 4 1285 23 OdeGeom::convert_to_ray 0 1 326 0
47
OdeRayGeom OdeGeom::convert_to_ray(void) const;

958 17 convert_to_sphere 0 4 1285 26 OdeGeom::convert_to_sphere 0 1 327 0
53
OdeSphereGeom OdeGeom::convert_to_sphere(void) const;

959 19 convert_to_tri_mesh 0 4 1285 28 OdeGeom::convert_to_tri_mesh 0 1 328 0
56
OdeTriMeshGeom OdeGeom::convert_to_tri_mesh(void) const;

960 23 convert_to_simple_space 0 4 1285 32 OdeGeom::convert_to_simple_space 0 1 329 0
60
OdeSimpleSpace OdeGeom::convert_to_simple_space(void) const;

961 21 convert_to_hash_space 0 4 1285 30 OdeGeom::convert_to_hash_space 0 1 330 0
56
OdeHashSpace OdeGeom::convert_to_hash_space(void) const;

962 26 convert_to_quad_tree_space 0 4 1285 35 OdeGeom::convert_to_quad_tree_space 0 1 331 0
65
OdeQuadTreeSpace OdeGeom::convert_to_quad_tree_space(void) const;

963 14 get_class_type 0 4 1285 23 OdeGeom::get_class_type 0 1 332 0
48
static TypeHandle OdeGeom::get_class_type(void);

964 10 OdeBoxGeom 0 4 1287 22 OdeBoxGeom::OdeBoxGeom 0 3 334 335 336 0
189
OdeBoxGeom::OdeBoxGeom(dReal lx, dReal ly, dReal lz);
OdeBoxGeom::OdeBoxGeom(OdeSpace &space, dReal lx, dReal ly, dReal lz);
OdeBoxGeom::OdeBoxGeom(OdeSpace &space, LVecBase3f const &size);

965 11 set_lengths 0 4 1287 23 OdeBoxGeom::set_lengths 0 2 337 338 0
127
inline void OdeBoxGeom::set_lengths(dReal lx, dReal ly, dReal lz);
inline void OdeBoxGeom::set_lengths(LVecBase3f const &size);

966 11 get_lengths 0 4 1287 23 OdeBoxGeom::get_lengths 0 1 339 0
48
inline LVecBase3f OdeBoxGeom::get_lengths(void);

967 15 get_point_depth 0 4 1287 27 OdeBoxGeom::get_point_depth 0 2 340 341 0
129
inline dReal OdeBoxGeom::get_point_depth(dReal x, dReal y, dReal z);
inline dReal OdeBoxGeom::get_point_depth(LPoint3f const &p);

968 14 get_class_type 0 4 1287 26 OdeBoxGeom::get_class_type 0 1 342 0
51
static TypeHandle OdeBoxGeom::get_class_type(void);

969 21 OdeCappedCylinderGeom 0 4 1288 44 OdeCappedCylinderGeom::OdeCappedCylinderGeom 0 2 343 344 0
164
OdeCappedCylinderGeom::OdeCappedCylinderGeom(dReal radius, dReal length);
OdeCappedCylinderGeom::OdeCappedCylinderGeom(OdeSpace &space, dReal radius, dReal length);

970 10 set_params 0 4 1288 33 OdeCappedCylinderGeom::set_params 0 1 345 0
74
inline void OdeCappedCylinderGeom::set_params(dReal radius, dReal length);

971 10 get_params 0 4 1288 33 OdeCappedCylinderGeom::get_params 0 0 0
82
inline void OdeCappedCylinderGeom::get_params(dReal *radius, dReal *length) const;

972 10 get_radius 0 4 1288 33 OdeCappedCylinderGeom::get_radius 0 1 346 0
59
inline dReal OdeCappedCylinderGeom::get_radius(void) const;

973 10 get_length 0 4 1288 33 OdeCappedCylinderGeom::get_length 0 1 347 0
59
inline dReal OdeCappedCylinderGeom::get_length(void) const;

974 15 get_point_depth 0 4 1288 38 OdeCappedCylinderGeom::get_point_depth 0 2 348 349 0
163
inline dReal OdeCappedCylinderGeom::get_point_depth(dReal x, dReal y, dReal z) const;
inline dReal OdeCappedCylinderGeom::get_point_depth(LPoint3f const &p) const;

975 14 get_class_type 0 4 1288 37 OdeCappedCylinderGeom::get_class_type 0 1 350 0
62
static TypeHandle OdeCappedCylinderGeom::get_class_type(void);

976 14 OdeContactGeom 0 4 1289 30 OdeContactGeom::OdeContactGeom 0 2 351 352 0
97
OdeContactGeom::OdeContactGeom(void);
OdeContactGeom::OdeContactGeom(OdeContactGeom const &copy);

977 7 get_pos 0 4 1289 23 OdeContactGeom::get_pos 0 1 353 0
54
inline LVecBase3f OdeContactGeom::get_pos(void) const;

978 10 get_normal 0 4 1289 26 OdeContactGeom::get_normal 0 1 354 0
57
inline LVecBase3f OdeContactGeom::get_normal(void) const;

979 9 get_depth 0 4 1289 25 OdeContactGeom::get_depth 0 1 355 0
51
inline dReal OdeContactGeom::get_depth(void) const;

980 6 get_g1 0 4 1289 22 OdeContactGeom::get_g1 0 1 356 0
50
inline OdeGeom OdeContactGeom::get_g1(void) const;

981 6 get_g2 0 4 1289 22 OdeContactGeom::get_g2 0 1 357 0
50
inline OdeGeom OdeContactGeom::get_g2(void) const;

982 9 get_side1 0 4 1289 25 OdeContactGeom::get_side1 0 1 358 0
49
inline int OdeContactGeom::get_side1(void) const;

983 9 get_side2 0 4 1289 25 OdeContactGeom::get_side2 0 1 359 0
49
inline int OdeContactGeom::get_side2(void) const;

984 7 set_pos 0 4 1289 23 OdeContactGeom::set_pos 0 1 360 0
59
inline void OdeContactGeom::set_pos(LVecBase3f const &pos);

985 10 set_normal 0 4 1289 26 OdeContactGeom::set_normal 0 1 361 0
65
inline void OdeContactGeom::set_normal(LVecBase3f const &normal);

986 9 set_depth 0 4 1289 25 OdeContactGeom::set_depth 0 1 362 0
57
inline void OdeContactGeom::set_depth(dReal const depth);

987 6 set_g1 0 4 1289 22 OdeContactGeom::set_g1 0 1 363 0
56
inline void OdeContactGeom::set_g1(OdeGeom const &geom);

988 6 set_g2 0 4 1289 22 OdeContactGeom::set_g2 0 1 364 0
56
inline void OdeContactGeom::set_g2(OdeGeom const &geom);

989 14 get_class_type 0 4 1289 30 OdeContactGeom::get_class_type 0 1 365 0
55
static TypeHandle OdeContactGeom::get_class_type(void);

990 9 get_geom1 0 4 1290 28 OdeCollisionEntry::get_geom1 0 1 367 51
/**
 * Returns the first geom in the collision.
 */
56
inline OdeGeom OdeCollisionEntry::get_geom1(void) const;

991 9 get_geom2 0 4 1290 28 OdeCollisionEntry::get_geom2 0 1 368 52
/**
 * Returns the second geom in the collision.
 */
56
inline OdeGeom OdeCollisionEntry::get_geom2(void) const;

992 9 get_body1 0 4 1290 28 OdeCollisionEntry::get_body1 0 1 369 51
/**
 * Returns the first body in the collision.
 */
56
inline OdeBody OdeCollisionEntry::get_body1(void) const;

993 9 get_body2 0 4 1290 28 OdeCollisionEntry::get_body2 0 1 370 52
/**
 * Returns the second body in the collision.
 */
56
inline OdeBody OdeCollisionEntry::get_body2(void) const;

994 16 get_num_contacts 0 4 1290 35 OdeCollisionEntry::get_num_contacts 0 1 371 59
/**
 * Returns the number of contacts in the collision.
 */
67
inline std::size_t OdeCollisionEntry::get_num_contacts(void) const;

995 17 get_contact_point 0 4 1290 36 OdeCollisionEntry::get_contact_point 0 1 372 123
/**
 * Returns the nth contact point in the collision.  This does exactly the same
 * as get_contact_geom(n).get_pos().
 */
74
inline LPoint3f OdeCollisionEntry::get_contact_point(std::size_t n) const;

996 16 get_contact_geom 0 4 1290 35 OdeCollisionEntry::get_contact_geom 0 1 373 57
/**
 * Returns the nth contact geom in the collision.
 */
79
inline OdeContactGeom OdeCollisionEntry::get_contact_geom(std::size_t n) const;

997 11 operator [] 0 4 1290 30 OdeCollisionEntry::operator [] 0 1 374 0
74
inline OdeContactGeom OdeCollisionEntry::operator [](std::size_t n) const;

998 22 operator typecast bool 0 132 1290 41 OdeCollisionEntry::operator typecast bool 0 1 377 0
34
inline operator bool (void) const;

999 8 is_empty 0 4 1290 27 OdeCollisionEntry::is_empty 0 1 375 55
/**
 * Returns true if the entry holds no contacts.
 */
52
inline bool OdeCollisionEntry::is_empty(void) const;

1000 14 get_class_type 0 4 1290 33 OdeCollisionEntry::get_class_type 0 1 376 0
58
static TypeHandle OdeCollisionEntry::get_class_type(void);

1001 17 OdeCollisionEntry 0 4 1290 36 OdeCollisionEntry::OdeCollisionEntry 0 1 366 10
/**
 *
 */
81
inline OdeCollisionEntry::OdeCollisionEntry(OdeCollisionEntry const &) = default;

1002 20 OdeSurfaceParameters 0 4 1291 42 OdeSurfaceParameters::OdeSurfaceParameters 0 1 378 0
71
OdeSurfaceParameters::OdeSurfaceParameters(int mode = 0, dReal mu = 0);

1003 8 set_mode 0 4 1291 30 OdeSurfaceParameters::set_mode 0 1 379 0
53
inline void OdeSurfaceParameters::set_mode(int mode);

1004 6 set_mu 0 4 1291 28 OdeSurfaceParameters::set_mu 0 1 380 0
51
inline void OdeSurfaceParameters::set_mu(dReal mu);

1005 7 set_mu2 0 4 1291 29 OdeSurfaceParameters::set_mu2 0 1 381 0
53
inline void OdeSurfaceParameters::set_mu2(dReal mu2);

1006 10 set_bounce 0 4 1291 32 OdeSurfaceParameters::set_bounce 0 1 382 0
59
inline void OdeSurfaceParameters::set_bounce(dReal bounce);

1007 14 set_bounce_vel 0 4 1291 36 OdeSurfaceParameters::set_bounce_vel 0 1 383 0
67
inline void OdeSurfaceParameters::set_bounce_vel(dReal bounce_vel);

1008 12 set_soft_erp 0 4 1291 34 OdeSurfaceParameters::set_soft_erp 0 1 384 0
63
inline void OdeSurfaceParameters::set_soft_erp(dReal soft_erp);

1009 12 set_soft_cfm 0 4 1291 34 OdeSurfaceParameters::set_soft_cfm 0 1 385 0
63
inline void OdeSurfaceParameters::set_soft_cfm(dReal soft_cfm);

1010 11 set_motion1 0 4 1291 33 OdeSurfaceParameters::set_motion1 0 1 386 0
60
inline void OdeSurfaceParameters::set_motion1(dReal motion);

1011 11 set_motion2 0 4 1291 33 OdeSurfaceParameters::set_motion2 0 1 387 0
60
inline void OdeSurfaceParameters::set_motion2(dReal motion);

1012 9 set_slip1 0 4 1291 31 OdeSurfaceParameters::set_slip1 0 1 388 0
56
inline void OdeSurfaceParameters::set_slip1(dReal slip);

1013 9 set_slip2 0 4 1291 31 OdeSurfaceParameters::set_slip2 0 1 389 0
56
inline void OdeSurfaceParameters::set_slip2(dReal slip);

1014 8 get_mode 0 4 1291 30 OdeSurfaceParameters::get_mode 0 1 390 0
54
inline int OdeSurfaceParameters::get_mode(void) const;

1015 6 get_mu 0 4 1291 28 OdeSurfaceParameters::get_mu 0 1 391 0
54
inline dReal OdeSurfaceParameters::get_mu(void) const;

1016 7 get_mu2 0 4 1291 29 OdeSurfaceParameters::get_mu2 0 1 392 0
55
inline dReal OdeSurfaceParameters::get_mu2(void) const;

1017 10 get_bounce 0 4 1291 32 OdeSurfaceParameters::get_bounce 0 1 393 0
58
inline dReal OdeSurfaceParameters::get_bounce(void) const;

1018 14 get_bounce_vel 0 4 1291 36 OdeSurfaceParameters::get_bounce_vel 0 1 394 0
62
inline dReal OdeSurfaceParameters::get_bounce_vel(void) const;

1019 12 get_soft_erp 0 4 1291 34 OdeSurfaceParameters::get_soft_erp 0 1 395 0
60
inline dReal OdeSurfaceParameters::get_soft_erp(void) const;

1020 12 get_soft_cfm 0 4 1291 34 OdeSurfaceParameters::get_soft_cfm 0 1 396 0
60
inline dReal OdeSurfaceParameters::get_soft_cfm(void) const;

1021 11 get_motion1 0 4 1291 33 OdeSurfaceParameters::get_motion1 0 1 397 0
59
inline dReal OdeSurfaceParameters::get_motion1(void) const;

1022 11 get_motion2 0 4 1291 33 OdeSurfaceParameters::get_motion2 0 1 398 0
59
inline dReal OdeSurfaceParameters::get_motion2(void) const;

1023 9 get_slip1 0 4 1291 31 OdeSurfaceParameters::get_slip1 0 1 399 0
57
inline dReal OdeSurfaceParameters::get_slip1(void) const;

1024 9 get_slip2 0 4 1291 31 OdeSurfaceParameters::get_slip2 0 1 400 0
57
inline dReal OdeSurfaceParameters::get_slip2(void) const;

1025 14 get_class_type 0 4 1291 36 OdeSurfaceParameters::get_class_type 0 1 401 0
61
static TypeHandle OdeSurfaceParameters::get_class_type(void);

1026 10 OdeContact 0 4 1293 22 OdeContact::OdeContact 0 2 402 403 38
// OdeContact(const OdeContact &copy);
78
OdeContact::OdeContact(void);
OdeContact::OdeContact(dContact const &contact);

1027 11 get_surface 0 4 1293 23 OdeContact::get_surface 0 1 404 0
64
inline OdeSurfaceParameters OdeContact::get_surface(void) const;

1028 8 get_geom 0 4 1293 20 OdeContact::get_geom 0 1 405 0
49
inline OdeContactGeom OdeContact::get_geom(void);

1029 9 get_fdir1 0 4 1293 21 OdeContact::get_fdir1 0 1 406 0
52
inline LVecBase3f OdeContact::get_fdir1(void) const;

1030 11 set_surface 0 4 1293 23 OdeContact::set_surface 0 1 407 0
84
inline void OdeContact::set_surface(OdeSurfaceParameters const &surface_parameters);

1031 8 set_geom 0 4 1293 20 OdeContact::set_geom 0 1 408 0
69
inline void OdeContact::set_geom(OdeContactGeom const &contact_geom);

1032 9 set_fdir1 0 4 1293 21 OdeContact::set_fdir1 0 1 409 0
59
inline void OdeContact::set_fdir1(LVecBase3f const &fdir1);

1033 14 get_class_type 0 4 1293 26 OdeContact::get_class_type 0 1 410 0
51
static TypeHandle OdeContact::get_class_type(void);

1034 15 OdeContactJoint 0 4 1294 32 OdeContactJoint::OdeContactJoint 0 2 411 412 0
183
OdeContactJoint::OdeContactJoint(OdeWorld &world, OdeContact const &contact);
OdeContactJoint::OdeContactJoint(OdeWorld &world, OdeJointGroup &joint_group, OdeContact const &contact);

1035 14 get_class_type 0 4 1294 31 OdeContactJoint::get_class_type 0 1 413 0
56
static TypeHandle OdeContactJoint::get_class_type(void);

1036 15 OdeCylinderGeom 0 4 1295 32 OdeCylinderGeom::OdeCylinderGeom 0 2 414 415 0
140
OdeCylinderGeom::OdeCylinderGeom(dReal radius, dReal length);
OdeCylinderGeom::OdeCylinderGeom(OdeSpace &space, dReal radius, dReal length);

1037 10 set_params 0 4 1295 27 OdeCylinderGeom::set_params 0 1 416 0
68
inline void OdeCylinderGeom::set_params(dReal radius, dReal length);

1038 10 get_params 0 4 1295 27 OdeCylinderGeom::get_params 0 0 0
76
inline void OdeCylinderGeom::get_params(dReal *radius, dReal *length) const;

1039 10 get_radius 0 4 1295 27 OdeCylinderGeom::get_radius 0 1 417 0
53
inline dReal OdeCylinderGeom::get_radius(void) const;

1040 10 get_length 0 4 1295 27 OdeCylinderGeom::get_length 0 1 418 0
53
inline dReal OdeCylinderGeom::get_length(void) const;

1041 14 get_class_type 0 4 1295 31 OdeCylinderGeom::get_class_type 0 1 419 0
56
static TypeHandle OdeCylinderGeom::get_class_type(void);

1042 13 OdeFixedJoint 0 4 1296 28 OdeFixedJoint::OdeFixedJoint 0 2 420 421 0
121
OdeFixedJoint::OdeFixedJoint(OdeWorld &world);
OdeFixedJoint::OdeFixedJoint(OdeWorld &world, OdeJointGroup &joint_group);

1043 3 set 0 4 1296 18 OdeFixedJoint::set 0 1 422 0
37
inline void OdeFixedJoint::set(void);

1044 14 get_class_type 0 4 1296 29 OdeFixedJoint::get_class_type 0 1 423 0
54
static TypeHandle OdeFixedJoint::get_class_type(void);

1045 12 OdeHashSpace 0 4 1297 26 OdeHashSpace::OdeHashSpace 0 2 424 425 0
78
OdeHashSpace::OdeHashSpace(void);
OdeHashSpace::OdeHashSpace(OdeSpace &space);

1046 10 set_levels 0 4 1297 24 OdeHashSpace::set_levels 0 1 426 0
65
inline void OdeHashSpace::set_levels(int minlevel, int maxlevel);

1047 13 get_min_level 0 4 1297 27 OdeHashSpace::get_min_level 0 1 427 0
51
inline int OdeHashSpace::get_min_level(void) const;

1048 13 get_max_level 0 4 1297 27 OdeHashSpace::get_max_level 0 1 428 0
51
inline int OdeHashSpace::get_max_level(void) const;

1049 14 get_class_type 0 4 1297 28 OdeHashSpace::get_class_type 0 1 429 0
53
static TypeHandle OdeHashSpace::get_class_type(void);

1050 14 OdeHinge2Joint 0 4 1298 30 OdeHinge2Joint::OdeHinge2Joint 0 2 430 431 0
125
OdeHinge2Joint::OdeHinge2Joint(OdeWorld &world, OdeJointGroup &joint_group);
OdeHinge2Joint::OdeHinge2Joint(OdeWorld &world);

1051 10 set_anchor 0 4 1298 26 OdeHinge2Joint::set_anchor 0 2 432 433 0
132
inline void OdeHinge2Joint::set_anchor(dReal x, dReal y, dReal z);
inline void OdeHinge2Joint::set_anchor(LVecBase3f const &anchor);

1052 9 set_axis1 0 4 1298 25 OdeHinge2Joint::set_axis1 0 2 434 435 0
128
inline void OdeHinge2Joint::set_axis1(dReal x, dReal y, dReal z);
inline void OdeHinge2Joint::set_axis1(LVecBase3f const &axis);

1053 9 set_axis2 0 4 1298 25 OdeHinge2Joint::set_axis2 0 2 436 437 0
128
inline void OdeHinge2Joint::set_axis2(dReal x, dReal y, dReal z);
inline void OdeHinge2Joint::set_axis2(LVecBase3f const &axis);

1054 11 add_torques 0 4 1298 27 OdeHinge2Joint::add_torques 0 1 438 0
70
inline void OdeHinge2Joint::add_torques(dReal torque1, dReal torque2);

1055 10 get_anchor 0 4 1298 26 OdeHinge2Joint::get_anchor 0 1 439 0
57
inline LVecBase3f OdeHinge2Joint::get_anchor(void) const;

1056 11 get_anchor2 0 4 1298 27 OdeHinge2Joint::get_anchor2 0 1 440 0
58
inline LVecBase3f OdeHinge2Joint::get_anchor2(void) const;

1057 9 get_axis1 0 4 1298 25 OdeHinge2Joint::get_axis1 0 1 441 0
56
inline LVecBase3f OdeHinge2Joint::get_axis1(void) const;

1058 9 get_axis2 0 4 1298 25 OdeHinge2Joint::get_axis2 0 1 442 0
56
inline LVecBase3f OdeHinge2Joint::get_axis2(void) const;

1059 10 get_angle1 0 4 1298 26 OdeHinge2Joint::get_angle1 0 1 443 0
52
inline dReal OdeHinge2Joint::get_angle1(void) const;

1060 15 get_angle1_rate 0 4 1298 31 OdeHinge2Joint::get_angle1_rate 0 1 444 0
57
inline dReal OdeHinge2Joint::get_angle1_rate(void) const;

1061 15 get_angle2_rate 0 4 1298 31 OdeHinge2Joint::get_angle2_rate 0 1 445 0
57
inline dReal OdeHinge2Joint::get_angle2_rate(void) const;

1062 17 set_param_lo_stop 0 4 1298 33 OdeHinge2Joint::set_param_lo_stop 0 1 446 0
67
inline void OdeHinge2Joint::set_param_lo_stop(int axis, dReal val);

1063 17 set_param_hi_stop 0 4 1298 33 OdeHinge2Joint::set_param_hi_stop 0 1 447 0
67
inline void OdeHinge2Joint::set_param_hi_stop(int axis, dReal val);

1064 13 set_param_vel 0 4 1298 29 OdeHinge2Joint::set_param_vel 0 1 448 0
63
inline void OdeHinge2Joint::set_param_vel(int axis, dReal val);

1065 15 set_param_f_max 0 4 1298 31 OdeHinge2Joint::set_param_f_max 0 1 449 0
65
inline void OdeHinge2Joint::set_param_f_max(int axis, dReal val);

1066 22 set_param_fudge_factor 0 4 1298 38 OdeHinge2Joint::set_param_fudge_factor 0 1 450 0
72
inline void OdeHinge2Joint::set_param_fudge_factor(int axis, dReal val);

1067 16 set_param_bounce 0 4 1298 32 OdeHinge2Joint::set_param_bounce 0 1 451 0
66
inline void OdeHinge2Joint::set_param_bounce(int axis, dReal val);

1068 13 set_param_CFM 0 4 1298 29 OdeHinge2Joint::set_param_CFM 0 1 452 0
63
inline void OdeHinge2Joint::set_param_CFM(int axis, dReal val);

1069 18 set_param_stop_ERP 0 4 1298 34 OdeHinge2Joint::set_param_stop_ERP 0 1 453 0
68
inline void OdeHinge2Joint::set_param_stop_ERP(int axis, dReal val);

1070 18 set_param_stop_CFM 0 4 1298 34 OdeHinge2Joint::set_param_stop_CFM 0 1 454 0
68
inline void OdeHinge2Joint::set_param_stop_CFM(int axis, dReal val);

1071 24 set_param_suspension_ERP 0 4 1298 40 OdeHinge2Joint::set_param_suspension_ERP 0 1 455 0
74
inline void OdeHinge2Joint::set_param_suspension_ERP(int axis, dReal val);

1072 24 set_param_suspension_CFM 0 4 1298 40 OdeHinge2Joint::set_param_suspension_CFM 0 1 456 0
74
inline void OdeHinge2Joint::set_param_suspension_CFM(int axis, dReal val);

1073 17 get_param_lo_stop 0 4 1298 33 OdeHinge2Joint::get_param_lo_stop 0 1 457 0
63
inline dReal OdeHinge2Joint::get_param_lo_stop(int axis) const;

1074 17 get_param_hi_stop 0 4 1298 33 OdeHinge2Joint::get_param_hi_stop 0 1 458 0
63
inline dReal OdeHinge2Joint::get_param_hi_stop(int axis) const;

1075 13 get_param_vel 0 4 1298 29 OdeHinge2Joint::get_param_vel 0 1 459 0
59
inline dReal OdeHinge2Joint::get_param_vel(int axis) const;

1076 15 get_param_f_max 0 4 1298 31 OdeHinge2Joint::get_param_f_max 0 1 460 0
61
inline dReal OdeHinge2Joint::get_param_f_max(int axis) const;

1077 22 get_param_fudge_factor 0 4 1298 38 OdeHinge2Joint::get_param_fudge_factor 0 1 461 0
68
inline dReal OdeHinge2Joint::get_param_fudge_factor(int axis) const;

1078 16 get_param_bounce 0 4 1298 32 OdeHinge2Joint::get_param_bounce 0 1 462 0
62
inline dReal OdeHinge2Joint::get_param_bounce(int axis) const;

1079 13 get_param_CFM 0 4 1298 29 OdeHinge2Joint::get_param_CFM 0 1 463 0
59
inline dReal OdeHinge2Joint::get_param_CFM(int axis) const;

1080 18 get_param_stop_ERP 0 4 1298 34 OdeHinge2Joint::get_param_stop_ERP 0 1 464 0
64
inline dReal OdeHinge2Joint::get_param_stop_ERP(int axis) const;

1081 18 get_param_stop_CFM 0 4 1298 34 OdeHinge2Joint::get_param_stop_CFM 0 1 465 0
64
inline dReal OdeHinge2Joint::get_param_stop_CFM(int axis) const;

1082 24 get_param_suspension_ERP 0 4 1298 40 OdeHinge2Joint::get_param_suspension_ERP 0 1 466 0
70
inline dReal OdeHinge2Joint::get_param_suspension_ERP(int axis) const;

1083 24 get_param_suspension_CFM 0 4 1298 40 OdeHinge2Joint::get_param_suspension_CFM 0 1 467 0
70
inline dReal OdeHinge2Joint::get_param_suspension_CFM(int axis) const;

1084 14 get_class_type 0 4 1298 30 OdeHinge2Joint::get_class_type 0 1 468 0
55
static TypeHandle OdeHinge2Joint::get_class_type(void);

1085 13 OdeHingeJoint 0 4 1299 28 OdeHingeJoint::OdeHingeJoint 0 2 469 470 0
121
OdeHingeJoint::OdeHingeJoint(OdeWorld &world);
OdeHingeJoint::OdeHingeJoint(OdeWorld &world, OdeJointGroup &joint_group);

1086 10 set_anchor 0 4 1299 25 OdeHingeJoint::set_anchor 0 2 471 472 0
130
inline void OdeHingeJoint::set_anchor(dReal x, dReal y, dReal z);
inline void OdeHingeJoint::set_anchor(LVecBase3f const &anchor);

1087 16 set_anchor_delta 0 4 1299 31 OdeHingeJoint::set_anchor_delta 0 2 473 474 0
195
inline void OdeHingeJoint::set_anchor_delta(dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
inline void OdeHingeJoint::set_anchor_delta(LVecBase3f const &anchor, LVecBase3f const &vec);

1088 8 set_axis 0 4 1299 23 OdeHingeJoint::set_axis 0 2 475 476 0
124
inline void OdeHingeJoint::set_axis(dReal x, dReal y, dReal z);
inline void OdeHingeJoint::set_axis(LVecBase3f const &axis);

1089 10 add_torque 0 4 1299 25 OdeHingeJoint::add_torque 0 1 477 0
52
inline void OdeHingeJoint::add_torque(dReal torque);

1090 10 get_anchor 0 4 1299 25 OdeHingeJoint::get_anchor 0 1 478 0
56
inline LVecBase3f OdeHingeJoint::get_anchor(void) const;

1091 11 get_anchor2 0 4 1299 26 OdeHingeJoint::get_anchor2 0 1 479 0
57
inline LVecBase3f OdeHingeJoint::get_anchor2(void) const;

1092 8 get_axis 0 4 1299 23 OdeHingeJoint::get_axis 0 1 480 0
54
inline LVecBase3f OdeHingeJoint::get_axis(void) const;

1093 9 get_angle 0 4 1299 24 OdeHingeJoint::get_angle 0 1 481 0
50
inline dReal OdeHingeJoint::get_angle(void) const;

1094 14 get_angle_rate 0 4 1299 29 OdeHingeJoint::get_angle_rate 0 1 482 0
55
inline dReal OdeHingeJoint::get_angle_rate(void) const;

1095 17 set_param_lo_stop 0 4 1299 32 OdeHingeJoint::set_param_lo_stop 0 1 483 0
56
inline void OdeHingeJoint::set_param_lo_stop(dReal val);

1096 17 set_param_hi_stop 0 4 1299 32 OdeHingeJoint::set_param_hi_stop 0 1 484 0
56
inline void OdeHingeJoint::set_param_hi_stop(dReal val);

1097 13 set_param_vel 0 4 1299 28 OdeHingeJoint::set_param_vel 0 1 485 0
52
inline void OdeHingeJoint::set_param_vel(dReal val);

1098 15 set_param_f_max 0 4 1299 30 OdeHingeJoint::set_param_f_max 0 1 486 0
54
inline void OdeHingeJoint::set_param_f_max(dReal val);

1099 22 set_param_fudge_factor 0 4 1299 37 OdeHingeJoint::set_param_fudge_factor 0 1 487 0
61
inline void OdeHingeJoint::set_param_fudge_factor(dReal val);

1100 16 set_param_bounce 0 4 1299 31 OdeHingeJoint::set_param_bounce 0 1 488 0
55
inline void OdeHingeJoint::set_param_bounce(dReal val);

1101 13 set_param_CFM 0 4 1299 28 OdeHingeJoint::set_param_CFM 0 1 489 0
52
inline void OdeHingeJoint::set_param_CFM(dReal val);

1102 18 set_param_stop_ERP 0 4 1299 33 OdeHingeJoint::set_param_stop_ERP 0 1 490 0
57
inline void OdeHingeJoint::set_param_stop_ERP(dReal val);

1103 18 set_param_stop_CFM 0 4 1299 33 OdeHingeJoint::set_param_stop_CFM 0 1 491 0
57
inline void OdeHingeJoint::set_param_stop_CFM(dReal val);

1104 17 get_param_lo_stop 0 4 1299 32 OdeHingeJoint::get_param_lo_stop 0 1 492 0
58
inline dReal OdeHingeJoint::get_param_lo_stop(void) const;

1105 17 get_param_hi_stop 0 4 1299 32 OdeHingeJoint::get_param_hi_stop 0 1 493 0
58
inline dReal OdeHingeJoint::get_param_hi_stop(void) const;

1106 13 get_param_vel 0 4 1299 28 OdeHingeJoint::get_param_vel 0 1 494 0
54
inline dReal OdeHingeJoint::get_param_vel(void) const;

1107 15 get_param_f_max 0 4 1299 30 OdeHingeJoint::get_param_f_max 0 1 495 0
56
inline dReal OdeHingeJoint::get_param_f_max(void) const;

1108 22 get_param_fudge_factor 0 4 1299 37 OdeHingeJoint::get_param_fudge_factor 0 1 496 0
63
inline dReal OdeHingeJoint::get_param_fudge_factor(void) const;

1109 16 get_param_bounce 0 4 1299 31 OdeHingeJoint::get_param_bounce 0 1 497 0
57
inline dReal OdeHingeJoint::get_param_bounce(void) const;

1110 13 get_param_CFM 0 4 1299 28 OdeHingeJoint::get_param_CFM 0 1 498 0
54
inline dReal OdeHingeJoint::get_param_CFM(void) const;

1111 18 get_param_stop_ERP 0 4 1299 33 OdeHingeJoint::get_param_stop_ERP 0 1 499 0
59
inline dReal OdeHingeJoint::get_param_stop_ERP(void) const;

1112 18 get_param_stop_CFM 0 4 1299 33 OdeHingeJoint::get_param_stop_CFM 0 1 500 0
59
inline dReal OdeHingeJoint::get_param_stop_CFM(void) const;

1113 14 get_class_type 0 4 1299 29 OdeHingeJoint::get_class_type 0 1 501 0
54
static TypeHandle OdeHingeJoint::get_class_type(void);

1114 18 OdeJointCollection 0 4 1300 38 OdeJointCollection::OdeJointCollection 0 2 502 503 0
117
OdeJointCollection::OdeJointCollection(void);
OdeJointCollection::OdeJointCollection(OdeJointCollection const &copy);

1115 10 operator = 0 4 1300 30 OdeJointCollection::operator = 0 1 504 0
68
void OdeJointCollection::operator =(OdeJointCollection const &copy);

1116 19 ~OdeJointCollection 0 4 1300 39 OdeJointCollection::~OdeJointCollection 0 0 10
/**
 *
 */
53
inline OdeJointCollection::~OdeJointCollection(void);

1117 9 add_joint 0 4 1300 29 OdeJointCollection::add_joint 0 1 505 0
58
void OdeJointCollection::add_joint(OdeJoint const &joint);

1118 12 remove_joint 0 4 1300 32 OdeJointCollection::remove_joint 0 1 506 0
61
bool OdeJointCollection::remove_joint(OdeJoint const &joint);

1119 15 add_joints_from 0 4 1300 35 OdeJointCollection::add_joints_from 0 1 507 0
74
void OdeJointCollection::add_joints_from(OdeJointCollection const &other);

1120 18 remove_joints_from 0 4 1300 38 OdeJointCollection::remove_joints_from 0 1 508 0
77
void OdeJointCollection::remove_joints_from(OdeJointCollection const &other);

1121 23 remove_duplicate_joints 0 4 1300 43 OdeJointCollection::remove_duplicate_joints 0 1 509 0
55
void OdeJointCollection::remove_duplicate_joints(void);

1122 9 has_joint 0 4 1300 29 OdeJointCollection::has_joint 0 1 510 0
64
bool OdeJointCollection::has_joint(OdeJoint const &joint) const;

1123 5 clear 0 4 1300 25 OdeJointCollection::clear 0 1 511 0
37
void OdeJointCollection::clear(void);

1124 8 is_empty 0 4 1300 28 OdeJointCollection::is_empty 0 1 512 0
46
bool OdeJointCollection::is_empty(void) const;

1125 14 get_num_joints 0 4 1300 34 OdeJointCollection::get_num_joints 0 1 513 0
51
int OdeJointCollection::get_num_joints(void) const;

1126 9 get_joint 0 4 1300 29 OdeJointCollection::get_joint 0 1 514 0
56
OdeJoint OdeJointCollection::get_joint(int index) const;

1127 11 operator [] 0 4 1300 31 OdeJointCollection::operator [] 0 1 515 0
58
OdeJoint OdeJointCollection::operator [](int index) const;

1128 4 size 0 4 1300 24 OdeJointCollection::size 0 1 516 106
/**
 * Returns the number of joints in the collection.  This is the same thing as
 * get_num_joints().
 */
41
int OdeJointCollection::size(void) const;

1129 11 operator += 0 4 1300 31 OdeJointCollection::operator += 0 1 517 0
77
inline void OdeJointCollection::operator +=(OdeJointCollection const &other);

1130 10 operator + 0 4 1300 30 OdeJointCollection::operator + 0 1 518 0
96
inline OdeJointCollection OdeJointCollection::operator +(OdeJointCollection const &other) const;

1131 14 OdeLMotorJoint 0 4 1301 30 OdeLMotorJoint::OdeLMotorJoint 0 2 519 520 0
125
OdeLMotorJoint::OdeLMotorJoint(OdeWorld &world);
OdeLMotorJoint::OdeLMotorJoint(OdeWorld &world, OdeJointGroup &joint_group);

1132 12 set_num_axes 0 4 1301 28 OdeLMotorJoint::set_num_axes 0 1 521 0
50
inline void OdeLMotorJoint::set_num_axes(int num);

1133 8 set_axis 0 4 1301 24 OdeLMotorJoint::set_axis 0 2 522 523 0
164
inline void OdeLMotorJoint::set_axis(int anum, int rel, dReal x, dReal y, dReal z);
inline void OdeLMotorJoint::set_axis(int anum, int rel, LVecBase3f const &axis);

1134 9 set_param 0 4 1301 25 OdeLMotorJoint::set_param 0 1 524 0
66
inline void OdeLMotorJoint::set_param(int parameter, dReal value);

1135 12 get_num_axes 0 4 1301 28 OdeLMotorJoint::get_num_axes 0 1 525 0
52
inline int OdeLMotorJoint::get_num_axes(void) const;

1136 8 get_axis 0 4 1301 24 OdeLMotorJoint::get_axis 0 1 526 0
59
inline LVecBase3f OdeLMotorJoint::get_axis(int anum) const;

1137 9 get_param 0 4 1301 25 OdeLMotorJoint::get_param 0 1 527 0
60
inline dReal OdeLMotorJoint::get_param(int parameter) const;

1138 14 get_class_type 0 4 1301 30 OdeLMotorJoint::get_class_type 0 1 528 0
55
static TypeHandle OdeLMotorJoint::get_class_type(void);

1139 12 OdeNullJoint 0 4 1302 26 OdeNullJoint::OdeNullJoint 0 2 529 530 0
117
OdeNullJoint::OdeNullJoint(OdeWorld &world);
OdeNullJoint::OdeNullJoint(OdeWorld &world, OdeJointGroup &joint_group);

1140 14 get_class_type 0 4 1302 28 OdeNullJoint::get_class_type 0 1 531 0
53
static TypeHandle OdeNullJoint::get_class_type(void);

1141 15 OdePlane2dJoint 0 4 1303 32 OdePlane2dJoint::OdePlane2dJoint 0 2 532 533 0
129
OdePlane2dJoint::OdePlane2dJoint(OdeWorld &world);
OdePlane2dJoint::OdePlane2dJoint(OdeWorld &world, OdeJointGroup &joint_group);

1142 11 set_x_param 0 4 1303 28 OdePlane2dJoint::set_x_param 0 1 534 0
69
inline void OdePlane2dJoint::set_x_param(int parameter, dReal value);

1143 11 set_y_param 0 4 1303 28 OdePlane2dJoint::set_y_param 0 1 535 0
69
inline void OdePlane2dJoint::set_y_param(int parameter, dReal value);

1144 15 set_angle_param 0 4 1303 32 OdePlane2dJoint::set_angle_param 0 1 536 0
73
inline void OdePlane2dJoint::set_angle_param(int parameter, dReal value);

1145 14 get_class_type 0 4 1303 31 OdePlane2dJoint::get_class_type 0 1 537 0
56
static TypeHandle OdePlane2dJoint::get_class_type(void);

1146 12 OdePlaneGeom 0 4 1304 26 OdePlaneGeom::OdePlaneGeom 0 4 538 539 540 541 0
269
OdePlaneGeom::OdePlaneGeom(dReal a, dReal b, dReal c, dReal d);
OdePlaneGeom::OdePlaneGeom(LVecBase4f const &params);
OdePlaneGeom::OdePlaneGeom(OdeSpace &space, dReal a, dReal b, dReal c, dReal d);
OdePlaneGeom::OdePlaneGeom(OdeSpace &space, LVecBase4f const &params);

1147 10 set_params 0 4 1304 24 OdePlaneGeom::set_params 0 2 542 543 0
137
inline void OdePlaneGeom::set_params(dReal a, dReal b, dReal c, dReal d);
inline void OdePlaneGeom::set_params(LVecBase4f const &params);

1148 10 get_params 0 4 1304 24 OdePlaneGeom::get_params 0 1 544 0
55
inline LVecBase4f OdePlaneGeom::get_params(void) const;

1149 15 get_point_depth 0 4 1304 29 OdePlaneGeom::get_point_depth 0 2 545 546 0
145
inline dReal OdePlaneGeom::get_point_depth(dReal x, dReal y, dReal z) const;
inline dReal OdePlaneGeom::get_point_depth(LPoint3f const &p) const;

1150 14 get_class_type 0 4 1304 28 OdePlaneGeom::get_class_type 0 1 547 0
53
static TypeHandle OdePlaneGeom::get_class_type(void);

1151 16 OdeQuadTreeSpace 0 4 1305 34 OdeQuadTreeSpace::OdeQuadTreeSpace 0 2 548 549 0
224
OdeQuadTreeSpace::OdeQuadTreeSpace(LPoint3f const &center, LVecBase3f const &extents, int const depth);
OdeQuadTreeSpace::OdeQuadTreeSpace(OdeSpace &space, LPoint3f const &center, LVecBase3f const &extents, int const depth);

1152 14 get_class_type 0 4 1305 32 OdeQuadTreeSpace::get_class_type 0 1 550 0
57
static TypeHandle OdeQuadTreeSpace::get_class_type(void);

1153 10 OdeRayGeom 0 4 1306 22 OdeRayGeom::OdeRayGeom 0 2 551 552 0
92
OdeRayGeom::OdeRayGeom(dReal length);
OdeRayGeom::OdeRayGeom(OdeSpace &space, dReal length);

1154 10 set_length 0 4 1306 22 OdeRayGeom::set_length 0 1 553 0
49
inline void OdeRayGeom::set_length(dReal length);

1155 10 get_length 0 4 1306 22 OdeRayGeom::get_length 0 1 554 0
42
inline dReal OdeRayGeom::get_length(void);

1156 3 set 0 4 1306 15 OdeRayGeom::set 0 2 555 556 0
165
inline void OdeRayGeom::set(dReal px, dReal py, dReal pz, dReal dx, dReal dy, dReal dz);
inline void OdeRayGeom::set(LVecBase3f const &start, LVecBase3f const &dir);

1157 3 get 0 4 1306 15 OdeRayGeom::get 0 1 557 0
70
inline void OdeRayGeom::get(LVecBase3f &start, LVecBase3f &dir) const;

1158 9 get_start 0 4 1306 21 OdeRayGeom::get_start 0 1 558 0
52
inline LVecBase3f OdeRayGeom::get_start(void) const;

1159 13 get_direction 0 4 1306 25 OdeRayGeom::get_direction 0 1 559 0
56
inline LVecBase3f OdeRayGeom::get_direction(void) const;

1160 10 set_params 0 4 1306 22 OdeRayGeom::set_params 0 1 560 0
73
inline void OdeRayGeom::set_params(int first_contact, int backface_cull);

1161 10 get_params 0 4 1306 22 OdeRayGeom::get_params 0 0 0
81
inline void OdeRayGeom::get_params(int &first_contact, int &backface_cull) const;

1162 17 get_first_contact 0 4 1306 29 OdeRayGeom::get_first_contact 0 1 561 0
53
inline int OdeRayGeom::get_first_contact(void) const;

1163 17 get_backface_cull 0 4 1306 29 OdeRayGeom::get_backface_cull 0 1 562 0
53
inline int OdeRayGeom::get_backface_cull(void) const;

1164 15 set_closest_hit 0 4 1306 27 OdeRayGeom::set_closest_hit 0 1 563 0
57
inline void OdeRayGeom::set_closest_hit(int closest_hit);

1165 15 get_closest_hit 0 4 1306 27 OdeRayGeom::get_closest_hit 0 1 564 0
45
inline int OdeRayGeom::get_closest_hit(void);

1166 14 get_class_type 0 4 1306 26 OdeRayGeom::get_class_type 0 1 565 0
51
static TypeHandle OdeRayGeom::get_class_type(void);

1167 14 OdeSimpleSpace 0 4 1307 30 OdeSimpleSpace::OdeSimpleSpace 0 2 566 567 0
86
OdeSimpleSpace::OdeSimpleSpace(void);
OdeSimpleSpace::OdeSimpleSpace(OdeSpace &space);

1168 14 get_class_type 0 4 1307 30 OdeSimpleSpace::get_class_type 0 1 568 0
55
static TypeHandle OdeSimpleSpace::get_class_type(void);

1169 14 OdeSliderJoint 0 4 1308 30 OdeSliderJoint::OdeSliderJoint 0 2 569 570 0
125
OdeSliderJoint::OdeSliderJoint(OdeWorld &world);
OdeSliderJoint::OdeSliderJoint(OdeWorld &world, OdeJointGroup &joint_group);

1170 8 set_axis 0 4 1308 24 OdeSliderJoint::set_axis 0 2 571 572 0
126
inline void OdeSliderJoint::set_axis(dReal x, dReal y, dReal z);
inline void OdeSliderJoint::set_axis(LVecBase3f const &axis);

1171 14 set_axis_delta 0 4 1308 30 OdeSliderJoint::set_axis_delta 0 2 573 574 0
191
inline void OdeSliderJoint::set_axis_delta(dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
inline void OdeSliderJoint::set_axis_delta(LVecBase3f const &axis, LVecBase3f const &vec);

1172 9 add_force 0 4 1308 25 OdeSliderJoint::add_force 0 1 575 0
51
inline void OdeSliderJoint::add_force(dReal force);

1173 12 get_position 0 4 1308 28 OdeSliderJoint::get_position 0 1 576 0
54
inline dReal OdeSliderJoint::get_position(void) const;

1174 17 get_position_rate 0 4 1308 33 OdeSliderJoint::get_position_rate 0 1 577 0
59
inline dReal OdeSliderJoint::get_position_rate(void) const;

1175 8 get_axis 0 4 1308 24 OdeSliderJoint::get_axis 0 1 578 0
55
inline LVecBase3f OdeSliderJoint::get_axis(void) const;

1176 17 set_param_lo_stop 0 4 1308 33 OdeSliderJoint::set_param_lo_stop 0 1 579 0
57
inline void OdeSliderJoint::set_param_lo_stop(dReal val);

1177 17 set_param_hi_stop 0 4 1308 33 OdeSliderJoint::set_param_hi_stop 0 1 580 0
57
inline void OdeSliderJoint::set_param_hi_stop(dReal val);

1178 13 set_param_vel 0 4 1308 29 OdeSliderJoint::set_param_vel 0 1 581 0
53
inline void OdeSliderJoint::set_param_vel(dReal val);

1179 15 set_param_f_max 0 4 1308 31 OdeSliderJoint::set_param_f_max 0 1 582 0
55
inline void OdeSliderJoint::set_param_f_max(dReal val);

1180 22 set_param_fudge_factor 0 4 1308 38 OdeSliderJoint::set_param_fudge_factor 0 1 583 0
62
inline void OdeSliderJoint::set_param_fudge_factor(dReal val);

1181 16 set_param_bounce 0 4 1308 32 OdeSliderJoint::set_param_bounce 0 1 584 0
56
inline void OdeSliderJoint::set_param_bounce(dReal val);

1182 13 set_param_CFM 0 4 1308 29 OdeSliderJoint::set_param_CFM 0 1 585 0
53
inline void OdeSliderJoint::set_param_CFM(dReal val);

1183 18 set_param_stop_ERP 0 4 1308 34 OdeSliderJoint::set_param_stop_ERP 0 1 586 0
58
inline void OdeSliderJoint::set_param_stop_ERP(dReal val);

1184 18 set_param_stop_CFM 0 4 1308 34 OdeSliderJoint::set_param_stop_CFM 0 1 587 0
58
inline void OdeSliderJoint::set_param_stop_CFM(dReal val);

1185 17 get_param_lo_stop 0 4 1308 33 OdeSliderJoint::get_param_lo_stop 0 1 588 0
59
inline dReal OdeSliderJoint::get_param_lo_stop(void) const;

1186 17 get_param_hi_stop 0 4 1308 33 OdeSliderJoint::get_param_hi_stop 0 1 589 0
59
inline dReal OdeSliderJoint::get_param_hi_stop(void) const;

1187 13 get_param_vel 0 4 1308 29 OdeSliderJoint::get_param_vel 0 1 590 0
55
inline dReal OdeSliderJoint::get_param_vel(void) const;

1188 15 get_param_f_max 0 4 1308 31 OdeSliderJoint::get_param_f_max 0 1 591 0
57
inline dReal OdeSliderJoint::get_param_f_max(void) const;

1189 22 get_param_fudge_factor 0 4 1308 38 OdeSliderJoint::get_param_fudge_factor 0 1 592 0
64
inline dReal OdeSliderJoint::get_param_fudge_factor(void) const;

1190 16 get_param_bounce 0 4 1308 32 OdeSliderJoint::get_param_bounce 0 1 593 0
58
inline dReal OdeSliderJoint::get_param_bounce(void) const;

1191 13 get_param_CFM 0 4 1308 29 OdeSliderJoint::get_param_CFM 0 1 594 0
55
inline dReal OdeSliderJoint::get_param_CFM(void) const;

1192 18 get_param_stop_ERP 0 4 1308 34 OdeSliderJoint::get_param_stop_ERP 0 1 595 0
60
inline dReal OdeSliderJoint::get_param_stop_ERP(void) const;

1193 18 get_param_stop_CFM 0 4 1308 34 OdeSliderJoint::get_param_stop_CFM 0 1 596 0
60
inline dReal OdeSliderJoint::get_param_stop_CFM(void) const;

1194 14 get_class_type 0 4 1308 30 OdeSliderJoint::get_class_type 0 1 597 0
55
static TypeHandle OdeSliderJoint::get_class_type(void);

1195 13 OdeSphereGeom 0 4 1309 28 OdeSphereGeom::OdeSphereGeom 0 3 598 599 600 0
149
OdeSphereGeom::OdeSphereGeom(dReal radius);
OdeSphereGeom::OdeSphereGeom(OdeSpace &space, dReal radius);
OdeSphereGeom::OdeSphereGeom(OdeGeom &geom);

1196 10 set_radius 0 4 1309 25 OdeSphereGeom::set_radius 0 1 601 0
52
inline void OdeSphereGeom::set_radius(dReal radius);

1197 10 get_radius 0 4 1309 25 OdeSphereGeom::get_radius 0 1 602 0
51
inline dReal OdeSphereGeom::get_radius(void) const;

1198 15 get_point_depth 0 4 1309 30 OdeSphereGeom::get_point_depth 0 2 603 604 0
147
inline dReal OdeSphereGeom::get_point_depth(dReal x, dReal y, dReal z) const;
inline dReal OdeSphereGeom::get_point_depth(LPoint3f const &p) const;

1199 14 get_class_type 0 4 1309 29 OdeSphereGeom::get_class_type 0 1 605 0
54
static TypeHandle OdeSphereGeom::get_class_type(void);

1200 14 OdeTriMeshData 0 4 1310 30 OdeTriMeshData::OdeTriMeshData 0 1 606 63
// Private copy constructor, shouldn't be copying these objects
80
OdeTriMeshData::OdeTriMeshData(NodePath const &model, bool use_normals = false);

1201 7 destroy 0 4 1310 23 OdeTriMeshData::destroy 0 1 607 0
35
void OdeTriMeshData::destroy(void);

1202 5 write 0 6 1310 21 OdeTriMeshData::write 0 1 608 0
99
virtual void OdeTriMeshData::write(std::ostream &out = ::std::cout, unsigned int indent = 0) const;

1203 11 write_faces 0 4 1310 27 OdeTriMeshData::write_faces 0 1 609 0
58
void OdeTriMeshData::write_faces(std::ostream &out) const;

1204 14 get_class_type 0 4 1310 30 OdeTriMeshData::get_class_type 0 1 610 0
55
static TypeHandle OdeTriMeshData::get_class_type(void);

1205 14 OdeTriMeshGeom 0 4 1312 30 OdeTriMeshGeom::OdeTriMeshGeom 0 3 611 612 613 162
/* ODE_API dGeomID dCreateTriMesh(dSpaceID space, dTriMeshDataID Data, dTriCallback* Callback, dTriArrayCallback* ArrayCallback, dTriRayCallback* RayCallback); */
184
OdeTriMeshGeom::OdeTriMeshGeom(OdeTriMeshData &data);
OdeTriMeshGeom::OdeTriMeshGeom(OdeSpace &space, OdeTriMeshData &data);
OdeTriMeshGeom::OdeTriMeshGeom(OdeTriMeshGeom const &copy);

1206 7 destroy 0 4 1312 23 OdeTriMeshGeom::destroy 0 1 614 0
35
void OdeTriMeshGeom::destroy(void);

1207 17 set_tri_mesh_data 0 4 1312 33 OdeTriMeshGeom::set_tri_mesh_data 0 1 615 0
68
inline void OdeTriMeshGeom::set_tri_mesh_data(OdeTriMeshData &data);

1208 17 get_tri_mesh_data 0 4 1312 33 OdeTriMeshGeom::get_tri_mesh_data 0 1 616 0
81
inline PointerTo< OdeTriMeshData > OdeTriMeshGeom::get_tri_mesh_data(void) const;

1209 8 set_data 0 4 1312 24 OdeTriMeshGeom::set_data 0 1 617 0
59
inline void OdeTriMeshGeom::set_data(OdeTriMeshData &data);

1210 8 get_data 0 4 1312 24 OdeTriMeshGeom::get_data 0 1 618 0
72
inline PointerTo< OdeTriMeshData > OdeTriMeshGeom::get_data(void) const;

1211 9 enable_TC 0 4 1312 25 OdeTriMeshGeom::enable_TC 0 1 619 0
66
inline void OdeTriMeshGeom::enable_TC(int geom_class, int enable);

1212 13 is_TC_enabled 0 4 1312 29 OdeTriMeshGeom::is_TC_enabled 0 1 620 0
63
inline int OdeTriMeshGeom::is_TC_enabled(int geom_class) const;

1213 14 clear_TC_cache 0 4 1312 30 OdeTriMeshGeom::clear_TC_cache 0 1 621 0
64
inline void OdeTriMeshGeom::clear_TC_cache(OdeGeom const &geom);

1214 12 get_triangle 0 4 1312 28 OdeTriMeshGeom::get_triangle 0 1 622 0
105
inline void OdeTriMeshGeom::get_triangle(int face_index, LPoint3f &v0, LPoint3f &v1, LPoint3f &v2) const;

1215 9 get_point 0 4 1312 25 OdeTriMeshGeom::get_point 0 1 623 0
82
inline LPoint3f OdeTriMeshGeom::get_point(int face_index, dReal u, dReal v) const;

1216 17 get_num_triangles 0 4 1312 33 OdeTriMeshGeom::get_num_triangles 0 1 624 0
57
inline int OdeTriMeshGeom::get_num_triangles(void) const;

1217 14 get_class_type 0 4 1312 30 OdeTriMeshGeom::get_class_type 0 1 625 0
55
static TypeHandle OdeTriMeshGeom::get_class_type(void);

1218 17 OdeUniversalJoint 0 4 1313 36 OdeUniversalJoint::OdeUniversalJoint 0 2 626 627 0
137
OdeUniversalJoint::OdeUniversalJoint(OdeWorld &world);
OdeUniversalJoint::OdeUniversalJoint(OdeWorld &world, OdeJointGroup &joint_group);

1219 10 set_anchor 0 4 1313 29 OdeUniversalJoint::set_anchor 0 2 628 629 0
138
inline void OdeUniversalJoint::set_anchor(dReal x, dReal y, dReal z);
inline void OdeUniversalJoint::set_anchor(LVecBase3f const &anchor);

1220 9 set_axis1 0 4 1313 28 OdeUniversalJoint::set_axis1 0 2 630 631 0
134
inline void OdeUniversalJoint::set_axis1(dReal x, dReal y, dReal z);
inline void OdeUniversalJoint::set_axis1(LVecBase3f const &axis);

1221 9 set_axis2 0 4 1313 28 OdeUniversalJoint::set_axis2 0 2 632 633 0
134
inline void OdeUniversalJoint::set_axis2(dReal x, dReal y, dReal z);
inline void OdeUniversalJoint::set_axis2(LVecBase3f const &axis);

1222 11 add_torques 0 4 1313 30 OdeUniversalJoint::add_torques 0 1 634 0
73
inline void OdeUniversalJoint::add_torques(dReal torque1, dReal torque2);

1223 10 get_anchor 0 4 1313 29 OdeUniversalJoint::get_anchor 0 1 635 0
60
inline LVecBase3f OdeUniversalJoint::get_anchor(void) const;

1224 11 get_anchor2 0 4 1313 30 OdeUniversalJoint::get_anchor2 0 1 636 0
61
inline LVecBase3f OdeUniversalJoint::get_anchor2(void) const;

1225 9 get_axis1 0 4 1313 28 OdeUniversalJoint::get_axis1 0 1 637 0
59
inline LVecBase3f OdeUniversalJoint::get_axis1(void) const;

1226 9 get_axis2 0 4 1313 28 OdeUniversalJoint::get_axis2 0 1 638 0
59
inline LVecBase3f OdeUniversalJoint::get_axis2(void) const;

1227 10 get_angle1 0 4 1313 29 OdeUniversalJoint::get_angle1 0 1 639 0
55
inline dReal OdeUniversalJoint::get_angle1(void) const;

1228 10 get_angle2 0 4 1313 29 OdeUniversalJoint::get_angle2 0 1 640 0
55
inline dReal OdeUniversalJoint::get_angle2(void) const;

1229 15 get_angle1_rate 0 4 1313 34 OdeUniversalJoint::get_angle1_rate 0 1 641 0
60
inline dReal OdeUniversalJoint::get_angle1_rate(void) const;

1230 15 get_angle2_rate 0 4 1313 34 OdeUniversalJoint::get_angle2_rate 0 1 642 0
60
inline dReal OdeUniversalJoint::get_angle2_rate(void) const;

1231 17 set_param_lo_stop 0 4 1313 36 OdeUniversalJoint::set_param_lo_stop 0 1 643 0
70
inline void OdeUniversalJoint::set_param_lo_stop(int axis, dReal val);

1232 17 set_param_hi_stop 0 4 1313 36 OdeUniversalJoint::set_param_hi_stop 0 1 644 0
70
inline void OdeUniversalJoint::set_param_hi_stop(int axis, dReal val);

1233 13 set_param_vel 0 4 1313 32 OdeUniversalJoint::set_param_vel 0 1 645 0
66
inline void OdeUniversalJoint::set_param_vel(int axis, dReal val);

1234 15 set_param_f_max 0 4 1313 34 OdeUniversalJoint::set_param_f_max 0 1 646 0
68
inline void OdeUniversalJoint::set_param_f_max(int axis, dReal val);

1235 22 set_param_fudge_factor 0 4 1313 41 OdeUniversalJoint::set_param_fudge_factor 0 1 647 0
75
inline void OdeUniversalJoint::set_param_fudge_factor(int axis, dReal val);

1236 16 set_param_bounce 0 4 1313 35 OdeUniversalJoint::set_param_bounce 0 1 648 0
69
inline void OdeUniversalJoint::set_param_bounce(int axis, dReal val);

1237 13 set_param_CFM 0 4 1313 32 OdeUniversalJoint::set_param_CFM 0 1 649 0
66
inline void OdeUniversalJoint::set_param_CFM(int axis, dReal val);

1238 18 set_param_stop_ERP 0 4 1313 37 OdeUniversalJoint::set_param_stop_ERP 0 1 650 0
71
inline void OdeUniversalJoint::set_param_stop_ERP(int axis, dReal val);

1239 18 set_param_stop_CFM 0 4 1313 37 OdeUniversalJoint::set_param_stop_CFM 0 1 651 0
71
inline void OdeUniversalJoint::set_param_stop_CFM(int axis, dReal val);

1240 17 get_param_lo_stop 0 4 1313 36 OdeUniversalJoint::get_param_lo_stop 0 1 652 0
66
inline dReal OdeUniversalJoint::get_param_lo_stop(int axis) const;

1241 17 get_param_hi_stop 0 4 1313 36 OdeUniversalJoint::get_param_hi_stop 0 1 653 0
66
inline dReal OdeUniversalJoint::get_param_hi_stop(int axis) const;

1242 13 get_param_vel 0 4 1313 32 OdeUniversalJoint::get_param_vel 0 1 654 0
62
inline dReal OdeUniversalJoint::get_param_vel(int axis) const;

1243 15 get_param_f_max 0 4 1313 34 OdeUniversalJoint::get_param_f_max 0 1 655 0
64
inline dReal OdeUniversalJoint::get_param_f_max(int axis) const;

1244 22 get_param_fudge_factor 0 4 1313 41 OdeUniversalJoint::get_param_fudge_factor 0 1 656 0
71
inline dReal OdeUniversalJoint::get_param_fudge_factor(int axis) const;

1245 16 get_param_bounce 0 4 1313 35 OdeUniversalJoint::get_param_bounce 0 1 657 0
65
inline dReal OdeUniversalJoint::get_param_bounce(int axis) const;

1246 13 get_param_CFM 0 4 1313 32 OdeUniversalJoint::get_param_CFM 0 1 658 0
62
inline dReal OdeUniversalJoint::get_param_CFM(int axis) const;

1247 18 get_param_stop_ERP 0 4 1313 37 OdeUniversalJoint::get_param_stop_ERP 0 1 659 0
67
inline dReal OdeUniversalJoint::get_param_stop_ERP(int axis) const;

1248 18 get_param_stop_CFM 0 4 1313 37 OdeUniversalJoint::get_param_stop_CFM 0 1 660 0
67
inline dReal OdeUniversalJoint::get_param_stop_CFM(int axis) const;

1249 14 get_class_type 0 4 1313 33 OdeUniversalJoint::get_class_type 0 1 661 0
58
static TypeHandle OdeUniversalJoint::get_class_type(void);

1250 20 get_connecting_joint 0 4 1314 29 OdeUtil::get_connecting_joint 0 1 664 60
/**
 * Returns the joint that connects the given bodies.
 */
90
static OdeJoint OdeUtil::get_connecting_joint(OdeBody const &body1, OdeBody const &body2);

1251 25 get_connecting_joint_list 0 4 1314 34 OdeUtil::get_connecting_joint_list 0 1 665 74
/**
 * Returns a collection of joints connecting the specified bodies.
 */
105
static OdeJointCollection OdeUtil::get_connecting_joint_list(OdeBody const &body1, OdeBody const &body2);

1252 13 are_connected 0 4 1314 22 OdeUtil::are_connected 0 1 666 90
/**
 * Returns 1 if the given bodies are connected by a joint, returns 0
 * otherwise.
 */
78
static int OdeUtil::are_connected(OdeBody const &body1, OdeBody const &body2);

1253 23 are_connected_excluding 0 4 1314 32 OdeUtil::are_connected_excluding 0 1 667 404
/**
 * Returns 1 if the given bodies are connected by a joint that does not match
 * the given joint_type, returns 0 otherwise.  This is useful for deciding
 * whether to add contact joints between two bodies: if they are already
 * connected by non-contact joints then it may not be appropriate to add
 * contacts, however it is okay to add more contact between bodies that
 * already have contacts.
 */
110
static int OdeUtil::are_connected_excluding(OdeBody const &body1, OdeBody const &body2, int const joint_type);

1254 7 collide 0 4 1314 16 OdeUtil::collide 0 1 668 152
/**
 * Given two geometry objects that potentially touch (geom1 and geom2),
 * generate contact information for them.  Returns an OdeCollisionEntry.
 */
135
static PointerTo< OdeCollisionEntry > OdeUtil::collide(OdeGeom const &geom1, OdeGeom const &geom2, short int const max_contacts = 150);

1255 8 collide2 0 4 1314 17 OdeUtil::collide2 0 1 669 0
108
static int OdeUtil::collide2(OdeGeom const &geom1, OdeGeom const &geom2, PyObject *arg, PyObject *callback);

1256 13 space_to_geom 0 4 1314 22 OdeUtil::space_to_geom 0 1 670 0
61
static OdeGeom OdeUtil::space_to_geom(OdeSpace const &space);

1257 12 get_infinity 0 4 1314 21 OdeUtil::get_infinity 0 1 671 73
// RAU we can't access OC_infinity as constants are not exposed in python
41
static dReal OdeUtil::get_infinity(void);

1258 13 rand_get_seed 0 4 1314 22 OdeUtil::rand_get_seed 0 1 672 0
40
static int OdeUtil::rand_get_seed(void);

1259 13 rand_set_seed 0 4 1314 22 OdeUtil::rand_set_seed 0 1 673 0
42
static void OdeUtil::rand_set_seed(int s);

1260 7 OdeUtil 0 4 1314 16 OdeUtil::OdeUtil 0 2 662 663 0
92
inline OdeUtil::OdeUtil(void) = default;
inline OdeUtil::OdeUtil(OdeUtil const &) = default;

1261 8 ~OdeUtil 0 4 1314 17 OdeUtil::~OdeUtil 0 0 0
24
OdeUtil::~OdeUtil(void);

673
1 0 0 7 10 1315 0 0 0 0 
2 0 0 7 10 1315 0 0 0 1 4 copy 1 1316  
3 0 0 4 11 1318 0 0 0 1 4 this 3 1315  
4 0 0 6 12 1319 0 0 205 /**
 * Returns true if the ID is 0, meaning the OdeWorld does not point to a valid
 * world.  It is an error to call a method on an empty world.  Note that an
 * empty OdeWorld also evaluates to False.
 */ 1 4 this 3 1316  
5 0 0 6 13 1320 0 0 43 /**
 * Returns the underlying dWorldID.
 */ 1 4 this 3 1316  
6 0 0 4 14 1318 0 0 0 2 4 this 3 1315  3 vec 1 1322  
7 0 0 4 14 1318 0 0 0 4 4 this 3 1315  1 x 1 1325  1 y 1 1325  1 z 1 1325  
8 0 0 4 15 1318 0 0 0 2 4 this 3 1315  3 erp 1 1325  
9 0 0 4 16 1318 0 0 0 2 4 this 3 1315  3 cfm 1 1325  
10 0 0 4 17 1318 0 0 0 2 4 this 3 1315  3 num 1 1327  
11 0 0 4 18 1318 0 0 0 2 4 this 3 1315  15 over_relaxation 1 1325  
12 0 0 4 19 1318 0 0 0 2 4 this 3 1315  3 vel 1 1325  
13 0 0 4 20 1318 0 0 0 2 4 this 3 1315  5 depth 1 1325  
14 0 0 4 21 1318 0 0 0 2 4 this 3 1315  16 linear_threshold 1 1325  
15 0 0 4 22 1318 0 0 0 2 4 this 3 1315  17 angular_threshold 1 1325  
16 0 0 4 23 1318 0 0 0 2 4 this 3 1315  5 steps 1 1327  
17 0 0 4 24 1318 0 0 0 2 4 this 3 1315  4 time 1 1325  
18 0 0 4 25 1318 0 0 0 2 4 this 3 1315  15 do_auto_disable 1 1327  
19 0 0 7 26 1328 0 0 0 1 4 this 3 1316  
20 0 0 6 27 1325 0 0 0 1 4 this 3 1316  
21 0 0 6 28 1325 0 0 0 1 4 this 3 1316  
22 0 0 6 29 1327 0 0 0 1 4 this 3 1316  
23 0 0 6 30 1325 0 0 0 1 4 this 3 1316  
24 0 0 6 31 1325 0 0 0 1 4 this 3 1316  
25 0 0 6 32 1325 0 0 0 1 4 this 3 1316  
26 0 0 6 33 1325 0 0 0 1 4 this 3 1316  
27 0 0 6 34 1325 0 0 0 1 4 this 3 1316  
28 0 0 6 35 1327 0 0 0 1 4 this 3 1316  
29 0 0 6 36 1325 0 0 0 1 4 this 3 1316  
30 0 0 6 37 1327 0 0 0 1 4 this 3 1316  
31 0 0 7 38 1328 0 0 0 3 4 this 3 1315  8 stepsize 1 1325  7 impulse 1 1322  
32 0 0 7 38 1328 0 0 0 5 4 this 3 1315  8 stepsize 1 1325  2 ix 1 1325  2 iy 1 1325  2 iz 1 1325  
33 0 0 4 39 1318 0 0 0 2 4 this 3 1315  8 stepsize 1 1325  
34 0 0 4 40 1318 0 0 0 2 4 this 3 1315  8 stepsize 1 1325  
35 0 0 6 41 1327 0 0 0 2 4 this 3 1316  5 other 1 1316  
36 0 0 4 42 1318 0 0 0 2 4 this 3 1315  12 num_surfaces 1 1329  
37 0 0 4 43 1318 0 0 56 // void assign_surface_body(OdeBody& body, int surface); 3 4 this 3 1315  4 body 1 1331  7 surface 1 1327  
38 0 0 4 44 1318 0 0 0 10 4 this 3 1315  4 pos1 1 1329  4 pos2 1 1329  2 mu 1 1325  6 bounce 1 1325  10 bounce_vel 1 1325  8 soft_erp 1 1325  8 soft_cfm 1 1325  4 slip 1 1325  6 dampen 1 1325  
39 0 0 6 45 1326 0 0 0 3 4 this 3 1315  2 dt 1 1326  4 body 1 1331  
40 0 0 7 47 1333 0 0 0 0 
41 0 0 6 46 1319 0 0 0 1 4 this 3 1316  
42 0 0 7 49 1334 0 0 0 0 
43 0 0 4 50 1318 0 0 0 1 4 this 3 1334  
44 0 0 6 51 1337 0 0 0 1 4 this 3 1335  
45 0 0 4 52 1318 0 0 0 1 4 this 3 1335  
46 0 0 6 53 1327 0 0 0 2 4 this 3 1335  5 other 1 1335  
47 0 0 7 54 1333 0 0 0 0 
48 0 0 7 61 1339 723 0 0 0 
49 0 0 7 61 1339 723 0 0 1 6 param0 0 1340  
50 0 0 7 57 1344 0 0 0 1 4 this 3 1340  
51 0 0 7 58 1344 0 0 0 1 4 this 3 1340  
52 0 0 7 59 1344 0 0 0 1 4 this 3 1340  
53 0 0 7 60 1344 0 0 0 1 4 this 3 1340  
54 0 0 4 65 1318 0 0 0 1 4 this 3 1345  
55 0 0 6 66 1319 0 0 205 /**
 * Returns true if the ID is 0, meaning the OdeJoint does not point to a valid
 * joint.  It is an error to call a method on an empty joint.  Note that an
 * empty OdeJoint also evaluates to False.
 */ 1 4 this 3 1346  
56 0 0 6 67 1348 0 0 43 /**
 * Returns the underlying dJointID.
 */ 1 4 this 3 1346  
57 0 0 6 68 1327 0 0 30 /* INLINE void *get_data(); */ 1 4 this 3 1346  
58 0 0 7 69 1331 0 0 0 2 4 this 3 1346  5 index 1 1327  
59 0 0 4 70 1318 0 0 0 2 4 this 3 1345  6 param0 0 1339  
60 0 0 4 70 1318 0 0 0 2 4 this 3 1345  4 flag 1 1319  
61 0 0 6 71 1339 0 0 0 1 4 this 3 1345  
62 0 0 4 72 1318 0 0 0 3 4 this 3 1345  5 body1 1 1281  5 body2 1 1281  
63 0 0 4 73 1318 0 0 175 /**
 * Attaches two OdeBody objects to this joint.  Order is important.  Consider
 * using the OdeJoint::attach extension function if you're using the Python
 * interface.
 */ 3 4 this 3 1345  5 body1 1 1350  5 body2 1 1350  
64 0 0 4 74 1318 0 0 237 /**
 * Attaches a single OdeBody to this joint at the specified index (0 or 1).
 * The other index will be set to the environment (null). Consider using the
 * OdeJoint::attach extension function if you're using the Python interface.
 */ 3 4 this 3 1345  4 body 1 1350  5 index 1 1327  
65 0 0 4 75 1318 0 0 0 1 4 this 3 1345  
66 0 0 4 76 1318 0 0 0 3 4 this 3 1346  3 out 1 1352  6 indent 1 1354  
67 0 0 6 77 1327 0 0 0 2 4 this 3 1346  5 other 1 1346  
68 0 0 6 78 1319 0 0 0 2 4 this 3 1346  5 other 1 1346  
69 0 0 6 80 1281 0 0 0 1 4 this 3 1346  
70 0 0 7 81 1355 0 0 0 1 4 this 3 1346  
71 0 0 7 82 1356 0 0 0 1 4 this 3 1346  
72 0 0 7 83 1357 0 0 0 1 4 this 3 1346  
73 0 0 7 84 1358 0 0 0 1 4 this 3 1346  
74 0 0 7 85 1359 0 0 0 1 4 this 3 1346  
75 0 0 7 86 1360 0 0 0 1 4 this 3 1346  
76 0 0 7 87 1361 0 0 0 1 4 this 3 1346  
77 0 0 7 88 1362 0 0 0 1 4 this 3 1346  
78 0 0 7 89 1363 0 0 0 1 4 this 3 1346  
79 0 0 7 90 1364 0 0 0 1 4 this 3 1346  
80 0 0 7 91 1365 0 0 0 1 4 this 3 1346  
81 0 0 7 92 1333 0 0 0 0 
82 0 0 6 79 1319 0 0 0 1 4 this 3 1346  
83 0 0 7 94 1363 0 0 0 1 5 world 1 1315  
84 0 0 7 94 1363 0 0 0 2 5 world 1 1315  11 joint_group 1 1334  
85 0 0 4 95 1318 0 0 0 2 4 this 3 1363  3 num 1 1327  
86 0 0 4 96 1318 0 0 0 4 4 this 3 1363  4 anum 1 1327  3 rel 1 1327  4 axis 1 1322  
87 0 0 4 96 1318 0 0 0 6 4 this 3 1363  4 anum 1 1327  3 rel 1 1327  1 x 1 1325  1 y 1 1325  1 z 1 1325  
88 0 0 4 97 1318 0 0 0 3 4 this 3 1363  4 anum 1 1327  5 angle 1 1325  
89 0 0 4 98 1318 0 0 0 2 4 this 3 1363  4 mode 1 1327  
90 0 0 4 99 1318 0 0 0 4 4 this 3 1363  7 torque1 1 1325  7 torque2 1 1325  7 torque3 1 1325  
91 0 0 6 100 1327 0 0 0 1 4 this 3 1366  
92 0 0 7 101 1328 0 0 0 2 4 this 3 1366  4 anum 1 1327  
93 0 0 6 103 1327 0 0 0 2 4 this 3 1366  4 anum 1 1327  
94 0 0 6 104 1325 0 0 0 2 4 this 3 1366  4 anum 1 1327  
95 0 0 6 105 1325 0 0 0 2 4 this 3 1366  4 anum 1 1327  
96 0 0 6 106 1327 0 0 0 1 4 this 3 1366  
97 0 0 4 107 1318 0 0 0 3 4 this 3 1363  4 axis 1 1327  3 val 1 1325  
98 0 0 4 108 1318 0 0 0 3 4 this 3 1363  4 axis 1 1327  3 val 1 1325  
99 0 0 4 109 1318 0 0 0 3 4 this 3 1363  4 axis 1 1327  3 val 1 1325  
100 0 0 4 110 1318 0 0 0 3 4 this 3 1363  4 axis 1 1327  3 val 1 1325  
101 0 0 4 111 1318 0 0 0 3 4 this 3 1363  4 axis 1 1327  3 val 1 1325  
102 0 0 4 112 1318 0 0 0 3 4 this 3 1363  4 axis 1 1327  3 val 1 1325  
103 0 0 4 113 1318 0 0 0 3 4 this 3 1363  4 axis 1 1327  3 val 1 1325  
104 0 0 4 114 1318 0 0 0 3 4 this 3 1363  4 axis 1 1327  3 val 1 1325  
105 0 0 4 115 1318 0 0 0 3 4 this 3 1363  4 axis 1 1327  3 val 1 1325  
106 0 0 6 116 1325 0 0 0 2 4 this 3 1366  4 axis 1 1327  
107 0 0 6 117 1325 0 0 0 2 4 this 3 1366  4 axis 1 1327  
108 0 0 6 118 1325 0 0 0 2 4 this 3 1366  4 axis 1 1327  
109 0 0 6 119 1325 0 0 0 2 4 this 3 1366  4 axis 1 1327  
110 0 0 6 120 1325 0 0 0 2 4 this 3 1366  4 axis 1 1327  
111 0 0 6 121 1325 0 0 0 2 4 this 3 1366  4 axis 1 1327  
112 0 0 6 122 1325 0 0 0 2 4 this 3 1366  4 axis 1 1327  
113 0 0 6 123 1325 0 0 0 2 4 this 3 1366  4 axis 1 1327  
114 0 0 6 124 1325 0 0 0 2 4 this 3 1366  4 axis 1 1327  
115 0 0 7 125 1333 0 0 0 0 
116 0 0 7 127 1355 0 0 0 1 5 world 1 1315  
117 0 0 7 127 1355 0 0 0 2 5 world 1 1315  11 joint_group 1 1334  
118 0 0 4 128 1318 0 0 0 2 4 this 3 1355  6 anchor 1 1322  
119 0 0 4 128 1318 0 0 0 4 4 this 3 1355  1 x 1 1325  1 y 1 1325  1 z 1 1325  
120 0 0 4 129 1318 0 0 0 2 4 this 3 1355  6 anchor 1 1322  
121 0 0 4 129 1318 0 0 0 4 4 this 3 1355  1 x 1 1325  1 y 1 1325  1 z 1 1325  
122 0 0 7 130 1328 0 0 0 1 4 this 3 1368  
123 0 0 7 131 1328 0 0 0 1 4 this 3 1368  
124 0 0 7 132 1333 0 0 0 0 
125 0 0 7 135 1370 0 0 0 0 
126 0 0 7 135 1370 0 0 0 1 4 copy 1 1371  
127 0 0 6 136 1327 0 0 0 1 4 this 3 1370  
128 0 0 4 137 1318 0 0 0 1 4 this 3 1370  
129 0 0 4 138 1318 0 0 0 4 4 this 3 1370  7 themass 1 1325  6 center 1 1322  1 r 1 1373  
130 0 0 4 138 1318 0 0 0 11 4 this 3 1370  7 themass 1 1325  3 cgx 1 1325  3 cgy 1 1325  3 cgz 1 1325  3 I11 1 1325  3 I22 1 1325  3 I33 1 1325  3 I12 1 1325  3 I13 1 1325  3 I23 1 1325  
131 0 0 4 139 1318 0 0 0 3 4 this 3 1370  7 density 1 1325  6 radius 1 1325  
132 0 0 4 140 1318 0 0 0 3 4 this 3 1370  10 total_mass 1 1325  6 radius 1 1325  
133 0 0 4 141 1318 0 0 0 5 4 this 3 1370  7 density 1 1325  9 direction 1 1327  6 radius 1 1325  6 length 1 1325  
134 0 0 4 142 1318 0 0 0 5 4 this 3 1370  10 total_mass 1 1325  9 direction 1 1327  6 radius 1 1325  6 length 1 1325  
135 0 0 4 143 1318 0 0 0 5 4 this 3 1370  7 density 1 1325  9 direction 1 1327  6 radius 1 1325  6 length 1 1325  
136 0 0 4 144 1318 0 0 0 5 4 this 3 1370  10 total_mass 1 1325  9 direction 1 1327  6 radius 1 1325  6 length 1 1325  
137 0 0 4 145 1318 0 0 0 3 4 this 3 1370  7 density 1 1325  4 size 1 1322  
138 0 0 4 145 1318 0 0 0 5 4 this 3 1370  7 density 1 1325  2 lx 1 1325  2 ly 1 1325  2 lz 1 1325  
139 0 0 4 146 1318 0 0 0 3 4 this 3 1370  10 total_mass 1 1325  4 size 1 1322  
140 0 0 4 146 1318 0 0 0 5 4 this 3 1370  10 total_mass 1 1325  2 lx 1 1325  2 ly 1 1325  2 lz 1 1325  
141 0 0 4 147 1318 0 0 0 2 4 this 3 1370  7 newmass 1 1325  
142 0 0 4 148 1318 0 0 0 2 4 this 3 1370  3 pos 1 1322  
143 0 0 4 148 1318 0 0 0 4 4 this 3 1370  1 x 1 1325  1 y 1 1325  1 z 1 1325  
144 0 0 4 149 1318 0 0 0 2 4 this 3 1370  1 r 1 1373  
145 0 0 4 150 1318 0 0 0 2 4 this 3 1370  5 other 1 1370  
146 0 0 6 151 1325 0 0 0 1 4 this 3 1371  
147 0 0 7 152 1377 0 0 0 1 4 this 3 1371  
148 0 0 7 153 1378 0 0 0 1 4 this 3 1371  
149 0 0 4 154 1318 0 0 0 3 4 this 3 1371  3 out 1 1352  6 indent 1 1354  
150 0 0 7 155 1333 0 0 0 0 
151 0 0 7 157 1331 0 0 0 1 5 world 1 1315  
152 0 0 4 158 1318 0 0 0 1 4 this 3 1331  
153 0 0 6 159 1319 0 0 201 /**
 * Returns true if the ID is 0, meaning the OdeBody does not point to a valid
 * body.  It is an error to call a method on an empty body.  Note that an
 * empty OdeBody also evaluates to False.
 */ 1 4 this 3 1350  
154 0 0 6 160 1379 0 0 42 /**
 * Returns the underlying dBodyID.
 */ 1 4 this 3 1350  
155 0 0 4 161 1318 0 0 0 2 4 this 3 1331  16 linear_threshold 1 1325  
156 0 0 4 162 1318 0 0 0 2 4 this 3 1331  17 angular_threshold 1 1325  
157 0 0 4 163 1318 0 0 0 2 4 this 3 1331  5 steps 1 1327  
158 0 0 4 164 1318 0 0 0 2 4 this 3 1331  4 time 1 1325  
159 0 0 4 165 1318 0 0 0 2 4 this 3 1331  15 do_auto_disable 1 1327  
160 0 0 4 166 1318 0 0 0 1 4 this 3 1331  
161 0 0 4 167 1318 0 0 0 2 4 this 3 1331  4 data 1 1281  
162 0 0 4 168 1318 0 0 0 2 4 this 3 1331  3 pos 1 1322  
163 0 0 4 168 1318 0 0 0 4 4 this 3 1331  1 x 1 1325  1 y 1 1325  1 z 1 1325  
164 0 0 4 169 1318 0 0 0 2 4 this 3 1331  1 r 1 1373  
165 0 0 4 170 1318 0 0 0 2 4 this 3 1331  1 q 1 1381  
166 0 0 4 171 1318 0 0 0 2 4 this 3 1331  3 vel 1 1322  
167 0 0 4 171 1318 0 0 0 4 4 this 3 1331  1 x 1 1325  1 y 1 1325  1 z 1 1325  
168 0 0 4 172 1318 0 0 0 2 4 this 3 1331  3 vel 1 1322  
169 0 0 4 172 1318 0 0 0 4 4 this 3 1331  1 x 1 1325  1 y 1 1325  1 z 1 1325  
170 0 0 4 173 1318 0 0 0 2 4 this 3 1331  4 mass 1 1370  
171 0 0 6 174 1325 0 0 0 1 4 this 3 1350  
172 0 0 6 175 1325 0 0 0 1 4 this 3 1350  
173 0 0 6 176 1327 0 0 0 1 4 this 3 1350  
174 0 0 6 177 1325 0 0 0 1 4 this 3 1350  
175 0 0 6 178 1327 0 0 0 1 4 this 3 1350  
176 0 0 6 179 1281 0 0 0 1 4 this 3 1350  
177 0 0 7 180 1328 0 0 0 1 4 this 3 1350  
178 0 0 7 181 1378 0 0 0 1 4 this 3 1350  
179 0 0 7 182 1385 0 0 0 1 4 this 3 1350  
180 0 0 7 183 1328 0 0 0 1 4 this 3 1350  
181 0 0 7 184 1328 0 0 0 1 4 this 3 1350  
182 0 0 7 185 1370 0 0 0 1 4 this 3 1350  
183 0 0 4 186 1318 0 0 0 2 4 this 3 1331  1 f 1 1322  
184 0 0 4 186 1318 0 0 0 4 4 this 3 1331  2 fx 1 1325  2 fy 1 1325  2 fz 1 1325  
185 0 0 4 187 1318 0 0 0 2 4 this 3 1331  1 f 1 1322  
186 0 0 4 187 1318 0 0 0 4 4 this 3 1331  2 fx 1 1325  2 fy 1 1325  2 fz 1 1325  
187 0 0 4 188 1318 0 0 0 2 4 this 3 1331  1 f 1 1322  
188 0 0 4 188 1318 0 0 0 4 4 this 3 1331  2 fx 1 1325  2 fy 1 1325  2 fz 1 1325  
189 0 0 4 189 1318 0 0 0 2 4 this 3 1331  1 f 1 1322  
190 0 0 4 189 1318 0 0 0 4 4 this 3 1331  2 fx 1 1325  2 fy 1 1325  2 fz 1 1325  
191 0 0 4 190 1318 0 0 0 3 4 this 3 1331  1 f 1 1322  3 pos 1 1322  
192 0 0 4 190 1318 0 0 0 7 4 this 3 1331  2 fx 1 1325  2 fy 1 1325  2 fz 1 1325  2 px 1 1325  2 py 1 1325  2 pz 1 1325  
193 0 0 4 191 1318 0 0 0 3 4 this 3 1331  1 f 1 1322  3 pos 1 1322  
194 0 0 4 191 1318 0 0 0 7 4 this 3 1331  2 fx 1 1325  2 fy 1 1325  2 fz 1 1325  2 px 1 1325  2 py 1 1325  2 pz 1 1325  
195 0 0 4 192 1318 0 0 0 3 4 this 3 1331  1 f 1 1322  3 pos 1 1322  
196 0 0 4 192 1318 0 0 0 7 4 this 3 1331  2 fx 1 1325  2 fy 1 1325  2 fz 1 1325  2 px 1 1325  2 py 1 1325  2 pz 1 1325  
197 0 0 4 193 1318 0 0 0 3 4 this 3 1331  1 f 1 1322  3 pos 1 1322  
198 0 0 4 193 1318 0 0 0 7 4 this 3 1331  2 fx 1 1325  2 fy 1 1325  2 fz 1 1325  2 px 1 1325  2 py 1 1325  2 pz 1 1325  
199 0 0 4 194 1318 0 0 0 2 4 this 3 1331  1 f 1 1322  
200 0 0 4 194 1318 0 0 0 4 4 this 3 1331  1 x 1 1325  1 y 1 1325  1 z 1 1325  
201 0 0 4 195 1318 0 0 0 2 4 this 3 1331  1 f 1 1322  
202 0 0 4 195 1318 0 0 0 4 4 this 3 1331  1 x 1 1325  1 y 1 1325  1 z 1 1325  
203 0 0 7 196 1377 0 0 0 2 4 this 3 1350  3 pos 1 1322  
204 0 0 7 196 1377 0 0 0 4 4 this 3 1350  2 px 1 1325  2 py 1 1325  2 pz 1 1325  
205 0 0 7 197 1377 0 0 0 2 4 this 3 1350  3 pos 1 1322  
206 0 0 7 197 1377 0 0 0 4 4 this 3 1350  2 px 1 1325  2 py 1 1325  2 pz 1 1325  
207 0 0 7 198 1377 0 0 0 2 4 this 3 1350  3 pos 1 1322  
208 0 0 7 198 1377 0 0 0 4 4 this 3 1350  2 px 1 1325  2 py 1 1325  2 pz 1 1325  
209 0 0 7 199 1377 0 0 0 2 4 this 3 1350  3 pos 1 1322  
210 0 0 7 199 1377 0 0 0 4 4 this 3 1350  2 px 1 1325  2 py 1 1325  2 pz 1 1325  
211 0 0 7 200 1328 0 0 0 2 4 this 3 1350  3 pos 1 1322  
212 0 0 7 200 1328 0 0 0 4 4 this 3 1350  2 px 1 1325  2 py 1 1325  2 pz 1 1325  
213 0 0 7 201 1328 0 0 0 2 4 this 3 1350  3 pos 1 1322  
214 0 0 7 201 1328 0 0 0 4 4 this 3 1350  2 px 1 1325  2 py 1 1325  2 pz 1 1325  
215 0 0 4 202 1318 0 0 0 2 4 this 3 1331  4 mode 1 1327  
216 0 0 4 203 1318 0 0 0 2 4 this 3 1331  4 axis 1 1322  
217 0 0 4 203 1318 0 0 0 4 4 this 3 1331  1 x 1 1325  1 y 1 1325  1 z 1 1325  
218 0 0 6 204 1327 0 0 0 1 4 this 3 1350  
219 0 0 7 205 1328 0 0 0 1 4 this 3 1350  
220 0 0 6 206 1327 0 0 0 1 4 this 3 1350  
221 0 0 7 207 1345 0 0 0 2 4 this 3 1350  5 index 1 1327  
222 0 0 6 209 1281 0 0 0 2 4 this 3 1350  1 i 1 1327  
223 0 0 4 215 1318 0 0 0 1 4 this 3 1331  
224 0 0 4 216 1318 0 0 0 1 4 this 3 1331  
225 0 0 6 217 1327 0 0 0 1 4 this 3 1350  
226 0 0 4 218 1318 0 0 0 2 4 this 3 1331  4 mode 1 1327  
227 0 0 6 219 1327 0 0 0 1 4 this 3 1350  
228 0 0 4 220 1318 0 0 0 3 4 this 3 1350  3 out 1 1352  6 indent 1 1354  
229 0 0 6 222 1327 0 0 0 2 4 this 3 1350  5 other 1 1350  
230 0 0 7 223 1333 0 0 0 0 
231 0 0 6 221 1319 0 0 0 1 4 this 3 1350  
232 0 0 4 225 1318 0 0 0 1 4 this 3 1386  
233 0 0 6 226 1319 0 0 205 /**
 * Returns true if the ID is 0, meaning the OdeSpace does not point to a valid
 * space.  It is an error to call a method on an empty space.  Note that an
 * empty OdeSpace also evaluates to False.
 */ 1 4 this 3 1387  
234 0 0 4 227 1318 0 0 0 2 4 this 3 1386  4 mode 1 1327  
235 0 0 6 228 1327 0 0 0 1 4 this 3 1387  
236 0 0 6 229 1327 0 0 0 2 4 this 3 1387  4 geom 1 1389  
237 0 0 6 229 1327 0 0 0 2 4 this 3 1387  5 space 1 1387  
238 0 0 6 230 1327 0 0 0 1 4 this 3 1387  
239 0 0 4 231 1318 0 0 0 3 4 this 3 1387  3 min 1 1328  3 max 1 1328  
240 0 0 6 232 1281 0 0 0 1 4 this 3 1387  
241 0 0 6 233 1327 0 0 0 1 4 this 3 1386  
242 0 0 6 234 1327 0 0 0 1 4 this 3 1387  
243 0 0 4 235 1318 0 0 0 2 4 this 3 1386  4 bits 1 1391  
244 0 0 4 236 1318 0 0 0 2 4 this 3 1386  4 bits 1 1391  
245 0 0 7 237 1395 0 0 0 1 4 this 3 1386  
246 0 0 7 238 1395 0 0 0 1 4 this 3 1386  
247 0 0 4 239 1318 0 0 0 1 4 this 3 1386  
248 0 0 4 240 1318 0 0 0 1 4 this 3 1386  
249 0 0 6 241 1327 0 0 0 1 4 this 3 1386  
250 0 0 4 242 1318 0 0 0 2 4 this 3 1386  6 param0 0 1315  
251 0 0 4 243 1318 0 0 0 2 4 this 3 1386  6 param0 0 1334  
252 0 0 4 244 1318 0 0 0 2 4 this 3 1386  4 geom 1 1396  
253 0 0 4 244 1318 0 0 0 2 4 this 3 1386  5 space 1 1386  
254 0 0 4 245 1318 0 0 0 2 4 this 3 1386  4 geom 1 1396  
255 0 0 4 245 1318 0 0 0 2 4 this 3 1386  5 space 1 1386  
256 0 0 4 246 1318 0 0 0 1 4 this 3 1386  
257 0 0 7 247 1396 0 0 0 2 4 this 3 1386  1 i 1 1327  
258 0 0 7 248 1386 0 0 0 1 4 this 3 1387  
259 0 0 4 249 1318 0 0 0 3 4 this 3 1387  3 out 1 1352  6 indent 1 1354  
260 0 0 7 251 1397 0 0 0 1 4 this 3 1387  
261 0 0 7 252 1398 0 0 0 1 4 this 3 1387  
262 0 0 7 253 1399 0 0 0 1 4 this 3 1387  
263 0 0 6 254 1281 0 0 0 1 4 this 3 1387  
264 0 0 6 255 1281 0 0 0 2 4 this 3 1387  1 i 1 1327  
265 0 0 6 256 1281 0 0 0 1 4 this 3 1387  
266 0 0 4 257 1318 0 0 0 1 4 this 3 1386  
267 0 0 6 258 1327 0 0 0 3 4 this 3 1386  3 arg 1 1281  13 near_callback 1 1281  
268 0 0 6 259 1327 0 0 0 3 4 this 3 1386  4 geom 1 1396  10 collide_id 1 1327  
269 0 0 6 259 1327 0 0 0 3 4 this 3 1386  10 collide_id 1 1327  2 id 1 1400  
270 0 0 4 260 1318 0 0 0 3 4 this 3 1386  4 geom 1 1396  12 surface_type 1 1327  
271 0 0 4 260 1318 0 0 0 3 4 this 3 1386  12 surface_type 1 1327  2 id 1 1400  
272 0 0 6 261 1327 0 0 0 2 4 this 3 1386  4 geom 1 1396  
273 0 0 6 261 1327 0 0 0 2 4 this 3 1386  2 o1 1 1400  
274 0 0 6 262 1327 0 0 0 2 4 this 3 1386  4 geom 1 1396  
275 0 0 6 262 1327 0 0 0 2 4 this 3 1386  2 o1 1 1400  
276 0 0 4 263 1318 0 0 0 2 4 this 3 1386  10 event_name 1 1402  
277 0 0 6 264 1402 0 0 0 1 4 this 3 1386  
278 0 0 7 265 1333 0 0 0 0 
279 0 0 6 250 1319 0 0 0 1 4 this 3 1387  
280 0 0 4 268 1318 0 0 0 1 4 this 3 1396  
281 0 0 6 269 1319 0 0 201 /**
 * Returns true if the ID is 0, meaning the OdeGeom does not point to a valid
 * geom.  It is an error to call a method on an empty geom.  Note that an
 * empty OdeGeom also evaluates to False.
 */ 1 4 this 3 1389  
282 0 0 6 270 1400 0 0 42 /**
 * Returns the underlying dGeomID.
 */ 1 4 this 3 1389  
283 0 0 4 271 1318 0 0 36 // INLINE void set_data(void* data); 2 4 this 3 1396  4 body 1 1331  
284 0 0 6 272 1319 0 0 0 1 4 this 3 1389  
285 0 0 7 273 1331 0 0 0 1 4 this 3 1389  
286 0 0 4 274 1318 0 0 0 2 4 this 3 1396  3 pos 1 1322  
287 0 0 4 274 1318 0 0 0 4 4 this 3 1396  1 x 1 1325  1 y 1 1325  1 z 1 1325  
288 0 0 4 275 1318 0 0 0 2 4 this 3 1396  1 r 1 1373  
289 0 0 4 276 1318 0 0 0 2 4 this 3 1396  1 q 1 1381  
290 0 0 7 277 1377 0 0 0 1 4 this 3 1389  
291 0 0 7 278 1378 0 0 0 1 4 this 3 1389  
292 0 0 7 279 1403 0 0 0 1 4 this 3 1389  
293 0 0 4 280 1318 0 0 0 3 4 this 3 1389  3 min 1 1328  3 max 1 1328  
294 0 0 6 281 1281 0 0 0 1 4 this 3 1389  
295 0 0 6 282 1327 0 0 0 1 4 this 3 1396  
296 0 0 6 283 1327 0 0 0 1 4 this 3 1389  
297 0 0 4 284 1318 0 0 0 2 4 this 3 1396  4 bits 1 1391  
298 0 0 4 285 1318 0 0 0 2 4 this 3 1396  4 bits 1 1391  
299 0 0 7 286 1395 0 0 0 1 4 this 3 1396  
300 0 0 7 287 1395 0 0 0 1 4 this 3 1396  
301 0 0 4 288 1318 0 0 0 1 4 this 3 1396  
302 0 0 4 289 1318 0 0 0 1 4 this 3 1396  
303 0 0 6 290 1327 0 0 0 1 4 this 3 1396  
304 0 0 4 291 1318 0 0 0 2 4 this 3 1396  3 pos 1 1322  
305 0 0 4 291 1318 0 0 0 4 4 this 3 1396  1 x 1 1325  1 y 1 1325  1 z 1 1325  
306 0 0 4 292 1318 0 0 0 2 4 this 3 1396  1 r 1 1373  
307 0 0 4 293 1318 0 0 0 2 4 this 3 1396  1 q 1 1381  
308 0 0 4 294 1318 0 0 0 2 4 this 3 1396  3 pos 1 1322  
309 0 0 4 294 1318 0 0 0 4 4 this 3 1396  1 x 1 1325  1 y 1 1325  1 z 1 1325  
310 0 0 4 295 1318 0 0 0 2 4 this 3 1396  1 r 1 1373  
311 0 0 4 296 1318 0 0 0 2 4 this 3 1396  1 q 1 1381  
312 0 0 4 297 1318 0 0 0 1 4 this 3 1396  
313 0 0 6 298 1327 0 0 0 1 4 this 3 1396  
314 0 0 7 299 1377 0 0 0 1 4 this 3 1389  
315 0 0 7 300 1378 0 0 0 1 4 this 3 1389  
316 0 0 7 301 1403 0 0 0 1 4 this 3 1389  
317 0 0 7 302 1386 0 0 0 1 4 this 3 1389  
318 0 0 6 303 1281 0 0 0 1 4 this 3 1389  
319 0 0 4 304 1318 0 0 0 3 4 this 3 1389  3 out 1 1352  6 indent 1 1354  
320 0 0 6 306 1327 0 0 0 2 4 this 3 1389  5 other 1 1389  
321 0 0 6 307 1281 0 0 0 1 4 this 3 1389  
322 0 0 7 308 1404 0 0 0 1 4 this 3 1389  
323 0 0 7 309 1405 0 0 0 1 4 this 3 1389  
324 0 0 7 310 1406 0 0 43 // OdeConvexGeom convert_to_convex() const; 1 4 this 3 1389  
325 0 0 7 311 1407 0 0 53 // OdeHeightfieldGeom convert_to_heightfield() const; 1 4 this 3 1389  
326 0 0 7 312 1408 0 0 0 1 4 this 3 1389  
327 0 0 7 313 1409 0 0 0 1 4 this 3 1389  
328 0 0 7 314 1410 0 0 0 1 4 this 3 1389  
329 0 0 7 315 1397 0 0 0 1 4 this 3 1389  
330 0 0 7 316 1398 0 0 0 1 4 this 3 1389  
331 0 0 7 317 1399 0 0 0 1 4 this 3 1389  
332 0 0 7 318 1333 0 0 0 0 
333 0 0 6 305 1319 0 0 0 1 4 this 3 1389  
334 0 0 7 320 1404 0 0 0 2 5 space 1 1386  4 size 1 1322  
335 0 0 7 320 1404 0 0 0 4 5 space 1 1386  2 lx 1 1325  2 ly 1 1325  2 lz 1 1325  
336 0 0 7 320 1404 0 0 0 3 2 lx 1 1325  2 ly 1 1325  2 lz 1 1325  
337 0 0 4 321 1318 0 0 0 2 4 this 3 1404  4 size 1 1322  
338 0 0 4 321 1318 0 0 0 4 4 this 3 1404  2 lx 1 1325  2 ly 1 1325  2 lz 1 1325  
339 0 0 7 322 1328 0 0 0 1 4 this 3 1404  
340 0 0 6 323 1325 0 0 0 2 4 this 3 1404  1 p 1 1411  
341 0 0 6 323 1325 0 0 0 4 4 this 3 1404  1 x 1 1325  1 y 1 1325  1 z 1 1325  
342 0 0 7 324 1333 0 0 0 0 
343 0 0 7 326 1405 0 0 0 3 5 space 1 1386  6 radius 1 1325  6 length 1 1325  
344 0 0 7 326 1405 0 0 0 2 6 radius 1 1325  6 length 1 1325  
345 0 0 4 327 1318 0 0 0 3 4 this 3 1405  6 radius 1 1325  6 length 1 1325  
346 0 0 6 329 1325 0 0 0 1 4 this 3 1413  
347 0 0 6 330 1325 0 0 0 1 4 this 3 1413  
348 0 0 6 331 1325 0 0 0 2 4 this 3 1413  1 p 1 1411  
349 0 0 6 331 1325 0 0 0 4 4 this 3 1413  1 x 1 1325  1 y 1 1325  1 z 1 1325  
350 0 0 7 332 1333 0 0 0 0 
351 0 0 7 334 1415 0 0 0 0 
352 0 0 7 334 1415 0 0 0 1 4 copy 1 1416  
353 0 0 7 335 1328 0 0 0 1 4 this 3 1416  
354 0 0 7 336 1328 0 0 0 1 4 this 3 1416  
355 0 0 6 337 1325 0 0 0 1 4 this 3 1416  
356 0 0 7 338 1396 0 0 0 1 4 this 3 1416  
357 0 0 7 339 1396 0 0 0 1 4 this 3 1416  
358 0 0 6 340 1327 0 0 0 1 4 this 3 1416  
359 0 0 6 341 1327 0 0 0 1 4 this 3 1416  
360 0 0 4 342 1318 0 0 0 2 4 this 3 1415  3 pos 1 1322  
361 0 0 4 343 1318 0 0 0 2 4 this 3 1415  6 normal 1 1322  
362 0 0 4 344 1318 0 0 0 2 4 this 3 1415  5 depth 1 1418  
363 0 0 4 345 1318 0 0 0 2 4 this 3 1415  4 geom 1 1389  
364 0 0 4 346 1318 0 0 0 2 4 this 3 1415  4 geom 1 1389  
365 0 0 7 347 1333 0 0 0 0 
366 0 0 7 362 1421 0 0 0 1 6 param0 0 1419  
367 0 0 7 349 1396 0 0 51 /**
 * Returns the first geom in the collision.
 */ 1 4 this 3 1419  
368 0 0 7 350 1396 0 0 52 /**
 * Returns the second geom in the collision.
 */ 1 4 this 3 1419  
369 0 0 7 351 1331 0 0 51 /**
 * Returns the first body in the collision.
 */ 1 4 this 3 1419  
370 0 0 7 352 1331 0 0 52 /**
 * Returns the second body in the collision.
 */ 1 4 this 3 1419  
371 0 0 6 353 1422 0 0 59 /**
 * Returns the number of contacts in the collision.
 */ 1 4 this 3 1419  
372 0 0 7 354 1377 0 0 123 /**
 * Returns the nth contact point in the collision.  This does exactly the same
 * as get_contact_geom(n).get_pos().
 */ 2 4 this 3 1419  1 n 1 1422  
373 0 0 7 355 1415 0 0 57 /**
 * Returns the nth contact geom in the collision.
 */ 2 4 this 3 1419  1 n 1 1422  
374 0 0 7 356 1415 0 0 0 2 4 this 3 1419  1 n 1 1422  
375 0 0 6 360 1319 0 0 55 /**
 * Returns true if the entry holds no contacts.
 */ 1 4 this 3 1419  
376 0 0 7 361 1333 0 0 0 0 
377 0 0 6 359 1319 0 0 0 1 4 this 3 1419  
378 0 0 7 365 1424 0 0 0 2 4 mode 1 1327  2 mu 1 1325  
379 0 0 4 366 1318 0 0 0 2 4 this 3 1424  4 mode 1 1327  
380 0 0 4 367 1318 0 0 0 2 4 this 3 1424  2 mu 1 1325  
381 0 0 4 368 1318 0 0 0 2 4 this 3 1424  3 mu2 1 1325  
382 0 0 4 369 1318 0 0 0 2 4 this 3 1424  6 bounce 1 1325  
383 0 0 4 370 1318 0 0 0 2 4 this 3 1424  10 bounce_vel 1 1325  
384 0 0 4 371 1318 0 0 0 2 4 this 3 1424  8 soft_erp 1 1325  
385 0 0 4 372 1318 0 0 0 2 4 this 3 1424  8 soft_cfm 1 1325  
386 0 0 4 373 1318 0 0 0 2 4 this 3 1424  6 motion 1 1325  
387 0 0 4 374 1318 0 0 0 2 4 this 3 1424  6 motion 1 1325  
388 0 0 4 375 1318 0 0 0 2 4 this 3 1424  4 slip 1 1325  
389 0 0 4 376 1318 0 0 0 2 4 this 3 1424  4 slip 1 1325  
390 0 0 6 377 1327 0 0 0 1 4 this 3 1425  
391 0 0 6 378 1325 0 0 0 1 4 this 3 1425  
392 0 0 6 379 1325 0 0 0 1 4 this 3 1425  
393 0 0 6 380 1325 0 0 0 1 4 this 3 1425  
394 0 0 6 381 1325 0 0 0 1 4 this 3 1425  
395 0 0 6 382 1325 0 0 0 1 4 this 3 1425  
396 0 0 6 383 1325 0 0 0 1 4 this 3 1425  
397 0 0 6 384 1325 0 0 0 1 4 this 3 1425  
398 0 0 6 385 1325 0 0 0 1 4 this 3 1425  
399 0 0 6 386 1325 0 0 0 1 4 this 3 1425  
400 0 0 6 387 1325 0 0 0 1 4 this 3 1425  
401 0 0 7 388 1333 0 0 0 0 
402 0 0 7 390 1427 0 0 0 0 
403 0 0 7 390 1427 0 0 38 // OdeContact(const OdeContact &copy); 1 7 contact 1 1428  
404 0 0 7 391 1424 0 0 0 1 4 this 3 1431  
405 0 0 7 392 1415 0 0 0 1 4 this 3 1427  
406 0 0 7 393 1328 0 0 0 1 4 this 3 1431  
407 0 0 4 394 1318 0 0 0 2 4 this 3 1427  18 surface_parameters 1 1425  
408 0 0 4 395 1318 0 0 0 2 4 this 3 1427  12 contact_geom 1 1416  
409 0 0 4 396 1318 0 0 0 2 4 this 3 1427  5 fdir1 1 1322  
410 0 0 7 397 1333 0 0 0 0 
411 0 0 7 399 1358 0 0 0 2 5 world 1 1315  7 contact 1 1431  
412 0 0 7 399 1358 0 0 0 3 5 world 1 1315  11 joint_group 1 1334  7 contact 1 1431  
413 0 0 7 400 1333 0 0 0 0 
414 0 0 7 402 1406 0 0 0 3 5 space 1 1386  6 radius 1 1325  6 length 1 1325  
415 0 0 7 402 1406 0 0 0 2 6 radius 1 1325  6 length 1 1325  
416 0 0 4 403 1318 0 0 0 3 4 this 3 1406  6 radius 1 1325  6 length 1 1325  
417 0 0 6 405 1325 0 0 0 1 4 this 3 1433  
418 0 0 6 406 1325 0 0 0 1 4 this 3 1433  
419 0 0 7 407 1333 0 0 0 0 
420 0 0 7 409 1361 0 0 0 1 5 world 1 1315  
421 0 0 7 409 1361 0 0 0 2 5 world 1 1315  11 joint_group 1 1334  
422 0 0 4 410 1318 0 0 0 1 4 this 3 1361  
423 0 0 7 411 1333 0 0 0 0 
424 0 0 7 413 1398 0 0 0 0 
425 0 0 7 413 1398 0 0 0 1 5 space 1 1386  
426 0 0 4 414 1318 0 0 0 3 4 this 3 1398  8 minlevel 1 1327  8 maxlevel 1 1327  
427 0 0 6 415 1327 0 0 0 1 4 this 3 1435  
428 0 0 6 416 1327 0 0 0 1 4 this 3 1435  
429 0 0 7 417 1333 0 0 0 0 
430 0 0 7 419 1360 0 0 0 1 5 world 1 1315  
431 0 0 7 419 1360 0 0 0 2 5 world 1 1315  11 joint_group 1 1334  
432 0 0 4 420 1318 0 0 0 2 4 this 3 1360  6 anchor 1 1322  
433 0 0 4 420 1318 0 0 0 4 4 this 3 1360  1 x 1 1325  1 y 1 1325  1 z 1 1325  
434 0 0 4 421 1318 0 0 0 2 4 this 3 1360  4 axis 1 1322  
435 0 0 4 421 1318 0 0 0 4 4 this 3 1360  1 x 1 1325  1 y 1 1325  1 z 1 1325  
436 0 0 4 422 1318 0 0 0 2 4 this 3 1360  4 axis 1 1322  
437 0 0 4 422 1318 0 0 0 4 4 this 3 1360  1 x 1 1325  1 y 1 1325  1 z 1 1325  
438 0 0 4 423 1318 0 0 0 3 4 this 3 1360  7 torque1 1 1325  7 torque2 1 1325  
439 0 0 7 424 1328 0 0 0 1 4 this 3 1437  
440 0 0 7 425 1328 0 0 0 1 4 this 3 1437  
441 0 0 7 426 1328 0 0 0 1 4 this 3 1437  
442 0 0 7 427 1328 0 0 0 1 4 this 3 1437  
443 0 0 6 428 1325 0 0 0 1 4 this 3 1437  
444 0 0 6 429 1325 0 0 0 1 4 this 3 1437  
445 0 0 6 430 1325 0 0 0 1 4 this 3 1437  
446 0 0 4 431 1318 0 0 0 3 4 this 3 1360  4 axis 1 1327  3 val 1 1325  
447 0 0 4 432 1318 0 0 0 3 4 this 3 1360  4 axis 1 1327  3 val 1 1325  
448 0 0 4 433 1318 0 0 0 3 4 this 3 1360  4 axis 1 1327  3 val 1 1325  
449 0 0 4 434 1318 0 0 0 3 4 this 3 1360  4 axis 1 1327  3 val 1 1325  
450 0 0 4 435 1318 0 0 0 3 4 this 3 1360  4 axis 1 1327  3 val 1 1325  
451 0 0 4 436 1318 0 0 0 3 4 this 3 1360  4 axis 1 1327  3 val 1 1325  
452 0 0 4 437 1318 0 0 0 3 4 this 3 1360  4 axis 1 1327  3 val 1 1325  
453 0 0 4 438 1318 0 0 0 3 4 this 3 1360  4 axis 1 1327  3 val 1 1325  
454 0 0 4 439 1318 0 0 0 3 4 this 3 1360  4 axis 1 1327  3 val 1 1325  
455 0 0 4 440 1318 0 0 0 3 4 this 3 1360  4 axis 1 1327  3 val 1 1325  
456 0 0 4 441 1318 0 0 0 3 4 this 3 1360  4 axis 1 1327  3 val 1 1325  
457 0 0 6 442 1325 0 0 0 2 4 this 3 1437  4 axis 1 1327  
458 0 0 6 443 1325 0 0 0 2 4 this 3 1437  4 axis 1 1327  
459 0 0 6 444 1325 0 0 0 2 4 this 3 1437  4 axis 1 1327  
460 0 0 6 445 1325 0 0 0 2 4 this 3 1437  4 axis 1 1327  
461 0 0 6 446 1325 0 0 0 2 4 this 3 1437  4 axis 1 1327  
462 0 0 6 447 1325 0 0 0 2 4 this 3 1437  4 axis 1 1327  
463 0 0 6 448 1325 0 0 0 2 4 this 3 1437  4 axis 1 1327  
464 0 0 6 449 1325 0 0 0 2 4 this 3 1437  4 axis 1 1327  
465 0 0 6 450 1325 0 0 0 2 4 this 3 1437  4 axis 1 1327  
466 0 0 6 451 1325 0 0 0 2 4 this 3 1437  4 axis 1 1327  
467 0 0 6 452 1325 0 0 0 2 4 this 3 1437  4 axis 1 1327  
468 0 0 7 453 1333 0 0 0 0 
469 0 0 7 455 1356 0 0 0 1 5 world 1 1315  
470 0 0 7 455 1356 0 0 0 2 5 world 1 1315  11 joint_group 1 1334  
471 0 0 4 456 1318 0 0 0 2 4 this 3 1356  6 anchor 1 1322  
472 0 0 4 456 1318 0 0 0 4 4 this 3 1356  1 x 1 1325  1 y 1 1325  1 z 1 1325  
473 0 0 4 457 1318 0 0 0 3 4 this 3 1356  6 anchor 1 1322  3 vec 1 1322  
474 0 0 4 457 1318 0 0 0 7 4 this 3 1356  1 x 1 1325  1 y 1 1325  1 z 1 1325  2 ax 1 1325  2 ay 1 1325  2 az 1 1325  
475 0 0 4 458 1318 0 0 0 2 4 this 3 1356  4 axis 1 1322  
476 0 0 4 458 1318 0 0 0 4 4 this 3 1356  1 x 1 1325  1 y 1 1325  1 z 1 1325  
477 0 0 4 459 1318 0 0 0 2 4 this 3 1356  6 torque 1 1325  
478 0 0 7 460 1328 0 0 0 1 4 this 3 1439  
479 0 0 7 461 1328 0 0 0 1 4 this 3 1439  
480 0 0 7 462 1328 0 0 0 1 4 this 3 1439  
481 0 0 6 463 1325 0 0 0 1 4 this 3 1439  
482 0 0 6 464 1325 0 0 0 1 4 this 3 1439  
483 0 0 4 465 1318 0 0 0 2 4 this 3 1356  3 val 1 1325  
484 0 0 4 466 1318 0 0 0 2 4 this 3 1356  3 val 1 1325  
485 0 0 4 467 1318 0 0 0 2 4 this 3 1356  3 val 1 1325  
486 0 0 4 468 1318 0 0 0 2 4 this 3 1356  3 val 1 1325  
487 0 0 4 469 1318 0 0 0 2 4 this 3 1356  3 val 1 1325  
488 0 0 4 470 1318 0 0 0 2 4 this 3 1356  3 val 1 1325  
489 0 0 4 471 1318 0 0 0 2 4 this 3 1356  3 val 1 1325  
490 0 0 4 472 1318 0 0 0 2 4 this 3 1356  3 val 1 1325  
491 0 0 4 473 1318 0 0 0 2 4 this 3 1356  3 val 1 1325  
492 0 0 6 474 1325 0 0 0 1 4 this 3 1439  
493 0 0 6 475 1325 0 0 0 1 4 this 3 1439  
494 0 0 6 476 1325 0 0 0 1 4 this 3 1439  
495 0 0 6 477 1325 0 0 0 1 4 this 3 1439  
496 0 0 6 478 1325 0 0 0 1 4 this 3 1439  
497 0 0 6 479 1325 0 0 0 1 4 this 3 1439  
498 0 0 6 480 1325 0 0 0 1 4 this 3 1439  
499 0 0 6 481 1325 0 0 0 1 4 this 3 1439  
500 0 0 6 482 1325 0 0 0 1 4 this 3 1439  
501 0 0 7 483 1333 0 0 0 0 
502 0 0 7 485 1441 1116 0 0 0 
503 0 0 7 485 1441 1116 0 0 1 4 copy 1 1442  
504 0 0 6 486 1441 0 0 0 2 4 this 3 1441  4 copy 1 1442  
505 0 0 4 488 1318 0 0 0 2 4 this 3 1441  5 joint 1 1346  
506 0 0 6 489 1319 0 0 0 2 4 this 3 1441  5 joint 1 1346  
507 0 0 4 490 1318 0 0 0 2 4 this 3 1441  5 other 1 1442  
508 0 0 4 491 1318 0 0 0 2 4 this 3 1441  5 other 1 1442  
509 0 0 4 492 1318 0 0 0 1 4 this 3 1441  
510 0 0 6 493 1319 0 0 0 2 4 this 3 1442  5 joint 1 1346  
511 0 0 4 494 1318 0 0 0 1 4 this 3 1441  
512 0 0 6 495 1319 0 0 0 1 4 this 3 1442  
513 0 0 6 496 1327 0 0 0 1 4 this 3 1442  
514 0 0 7 497 1345 0 0 0 2 4 this 3 1442  5 index 1 1327  
515 0 0 7 499 1345 0 0 0 2 4 this 3 1442  5 index 1 1327  
516 0 0 6 500 1327 0 0 106 /**
 * Returns the number of joints in the collection.  This is the same thing as
 * get_num_joints().
 */ 1 4 this 3 1442  
517 0 0 6 501 1441 0 0 0 2 4 this 3 1441  5 other 1 1442  
518 0 0 7 502 1441 1116 0 0 2 4 this 3 1442  5 other 1 1442  
519 0 0 7 504 1364 0 0 0 1 5 world 1 1315  
520 0 0 7 504 1364 0 0 0 2 5 world 1 1315  11 joint_group 1 1334  
521 0 0 4 505 1318 0 0 0 2 4 this 3 1364  3 num 1 1327  
522 0 0 4 506 1318 0 0 0 4 4 this 3 1364  4 anum 1 1327  3 rel 1 1327  4 axis 1 1322  
523 0 0 4 506 1318 0 0 0 6 4 this 3 1364  4 anum 1 1327  3 rel 1 1327  1 x 1 1325  1 y 1 1325  1 z 1 1325  
524 0 0 4 507 1318 0 0 0 3 4 this 3 1364  9 parameter 1 1327  5 value 1 1325  
525 0 0 6 508 1327 0 0 0 1 4 this 3 1444  
526 0 0 7 509 1328 0 0 0 2 4 this 3 1444  4 anum 1 1327  
527 0 0 6 511 1325 0 0 0 2 4 this 3 1444  9 parameter 1 1327  
528 0 0 7 512 1333 0 0 0 0 
529 0 0 7 514 1362 0 0 0 1 5 world 1 1315  
530 0 0 7 514 1362 0 0 0 2 5 world 1 1315  11 joint_group 1 1334  
531 0 0 7 515 1333 0 0 0 0 
532 0 0 7 517 1365 0 0 0 1 5 world 1 1315  
533 0 0 7 517 1365 0 0 0 2 5 world 1 1315  11 joint_group 1 1334  
534 0 0 4 518 1318 0 0 0 3 4 this 3 1365  9 parameter 1 1327  5 value 1 1325  
535 0 0 4 519 1318 0 0 0 3 4 this 3 1365  9 parameter 1 1327  5 value 1 1325  
536 0 0 4 520 1318 0 0 0 3 4 this 3 1365  9 parameter 1 1327  5 value 1 1325  
537 0 0 7 521 1333 0 0 0 0 
538 0 0 7 523 1407 0 0 0 1 6 params 1 1446  
539 0 0 7 523 1407 0 0 0 2 5 space 1 1386  6 params 1 1446  
540 0 0 7 523 1407 0 0 0 5 5 space 1 1386  1 a 1 1325  1 b 1 1325  1 c 1 1325  1 d 1 1325  
541 0 0 7 523 1407 0 0 0 4 1 a 1 1325  1 b 1 1325  1 c 1 1325  1 d 1 1325  
542 0 0 4 524 1318 0 0 0 2 4 this 3 1407  6 params 1 1446  
543 0 0 4 524 1318 0 0 0 5 4 this 3 1407  1 a 1 1325  1 b 1 1325  1 c 1 1325  1 d 1 1325  
544 0 0 7 525 1385 0 0 0 1 4 this 3 1448  
545 0 0 6 526 1325 0 0 0 2 4 this 3 1448  1 p 1 1411  
546 0 0 6 526 1325 0 0 0 4 4 this 3 1448  1 x 1 1325  1 y 1 1325  1 z 1 1325  
547 0 0 7 527 1333 0 0 0 0 
548 0 0 7 529 1399 0 0 0 3 6 center 1 1411  7 extents 1 1322  5 depth 1 1450  
549 0 0 7 529 1399 0 0 0 4 5 space 1 1386  6 center 1 1411  7 extents 1 1322  5 depth 1 1450  
550 0 0 7 530 1333 0 0 0 0 
551 0 0 7 532 1408 0 0 0 2 5 space 1 1386  6 length 1 1325  
552 0 0 7 532 1408 0 0 0 1 6 length 1 1325  
553 0 0 4 533 1318 0 0 0 2 4 this 3 1408  6 length 1 1325  
554 0 0 6 534 1325 0 0 0 1 4 this 3 1408  
555 0 0 4 535 1318 0 0 0 3 4 this 3 1408  5 start 1 1322  3 dir 1 1322  
556 0 0 4 535 1318 0 0 0 7 4 this 3 1408  2 px 1 1325  2 py 1 1325  2 pz 1 1325  2 dx 1 1325  2 dy 1 1325  2 dz 1 1325  
557 0 0 4 536 1318 0 0 0 3 4 this 3 1451  5 start 1 1328  3 dir 1 1328  
558 0 0 7 537 1328 0 0 0 1 4 this 3 1451  
559 0 0 7 538 1328 0 0 0 1 4 this 3 1451  
560 0 0 4 539 1318 0 0 0 3 4 this 3 1408  13 first_contact 1 1327  13 backface_cull 1 1327  
561 0 0 6 541 1327 0 0 0 1 4 this 3 1451  
562 0 0 6 542 1327 0 0 0 1 4 this 3 1451  
563 0 0 4 543 1318 0 0 0 2 4 this 3 1408  11 closest_hit 1 1327  
564 0 0 6 544 1327 0 0 0 1 4 this 3 1408  
565 0 0 7 545 1333 0 0 0 0 
566 0 0 7 547 1397 0 0 0 0 
567 0 0 7 547 1397 0 0 0 1 5 space 1 1386  
568 0 0 7 548 1333 0 0 0 0 
569 0 0 7 550 1357 0 0 0 1 5 world 1 1315  
570 0 0 7 550 1357 0 0 0 2 5 world 1 1315  11 joint_group 1 1334  
571 0 0 4 551 1318 0 0 0 2 4 this 3 1357  4 axis 1 1322  
572 0 0 4 551 1318 0 0 0 4 4 this 3 1357  1 x 1 1325  1 y 1 1325  1 z 1 1325  
573 0 0 4 552 1318 0 0 0 3 4 this 3 1357  4 axis 1 1322  3 vec 1 1322  
574 0 0 4 552 1318 0 0 0 7 4 this 3 1357  1 x 1 1325  1 y 1 1325  1 z 1 1325  2 ax 1 1325  2 ay 1 1325  2 az 1 1325  
575 0 0 4 553 1318 0 0 0 2 4 this 3 1357  5 force 1 1325  
576 0 0 6 554 1325 0 0 0 1 4 this 3 1453  
577 0 0 6 555 1325 0 0 0 1 4 this 3 1453  
578 0 0 7 556 1328 0 0 0 1 4 this 3 1453  
579 0 0 4 557 1318 0 0 0 2 4 this 3 1357  3 val 1 1325  
580 0 0 4 558 1318 0 0 0 2 4 this 3 1357  3 val 1 1325  
581 0 0 4 559 1318 0 0 0 2 4 this 3 1357  3 val 1 1325  
582 0 0 4 560 1318 0 0 0 2 4 this 3 1357  3 val 1 1325  
583 0 0 4 561 1318 0 0 0 2 4 this 3 1357  3 val 1 1325  
584 0 0 4 562 1318 0 0 0 2 4 this 3 1357  3 val 1 1325  
585 0 0 4 563 1318 0 0 0 2 4 this 3 1357  3 val 1 1325  
586 0 0 4 564 1318 0 0 0 2 4 this 3 1357  3 val 1 1325  
587 0 0 4 565 1318 0 0 0 2 4 this 3 1357  3 val 1 1325  
588 0 0 6 566 1325 0 0 0 1 4 this 3 1453  
589 0 0 6 567 1325 0 0 0 1 4 this 3 1453  
590 0 0 6 568 1325 0 0 0 1 4 this 3 1453  
591 0 0 6 569 1325 0 0 0 1 4 this 3 1453  
592 0 0 6 570 1325 0 0 0 1 4 this 3 1453  
593 0 0 6 571 1325 0 0 0 1 4 this 3 1453  
594 0 0 6 572 1325 0 0 0 1 4 this 3 1453  
595 0 0 6 573 1325 0 0 0 1 4 this 3 1453  
596 0 0 6 574 1325 0 0 0 1 4 this 3 1453  
597 0 0 7 575 1333 0 0 0 0 
598 0 0 7 577 1409 0 0 0 1 4 geom 1 1396  
599 0 0 7 577 1409 0 0 0 2 5 space 1 1386  6 radius 1 1325  
600 0 0 7 577 1409 0 0 0 1 6 radius 1 1325  
601 0 0 4 578 1318 0 0 0 2 4 this 3 1409  6 radius 1 1325  
602 0 0 6 579 1325 0 0 0 1 4 this 3 1455  
603 0 0 6 580 1325 0 0 0 2 4 this 3 1455  1 p 1 1411  
604 0 0 6 580 1325 0 0 0 4 4 this 3 1455  1 x 1 1325  1 y 1 1325  1 z 1 1325  
605 0 0 7 581 1333 0 0 0 0 
606 0 0 7 584 1460 0 0 0 2 5 model 1 1457  11 use_normals 1 1319  
607 0 0 4 585 1318 0 0 0 1 4 this 3 1460  
608 0 0 4 586 1318 0 0 0 3 4 this 3 1461  3 out 1 1352  6 indent 1 1354  
609 0 0 4 587 1318 0 0 0 2 4 this 3 1461  3 out 1 1352  
610 0 0 7 588 1333 0 0 0 0 
611 0 0 7 590 1410 0 0 0 2 5 space 1 1386  4 data 1 1460  
612 0 0 7 590 1410 0 0 162 /* ODE_API dGeomID dCreateTriMesh(dSpaceID space, dTriMeshDataID Data, dTriCallback* Callback, dTriArrayCallback* ArrayCallback, dTriRayCallback* RayCallback); */ 1 4 data 1 1460  
613 0 0 7 590 1410 0 0 0 1 4 copy 1 1463  
614 0 0 4 591 1318 0 0 0 1 4 this 3 1410  
615 0 0 4 592 1318 0 0 0 2 4 this 3 1410  4 data 1 1460  
616 0 0 7 593 1460 0 0 0 1 4 this 3 1463  
617 0 0 4 594 1318 0 0 0 2 4 this 3 1410  4 data 1 1460  
618 0 0 7 595 1460 0 0 0 1 4 this 3 1463  
619 0 0 4 596 1318 0 0 0 3 4 this 3 1410  10 geom_class 1 1327  6 enable 1 1327  
620 0 0 6 597 1327 0 0 0 2 4 this 3 1463  10 geom_class 1 1327  
621 0 0 4 598 1318 0 0 0 2 4 this 3 1410  4 geom 1 1389  
622 0 0 4 599 1318 0 0 0 5 4 this 3 1463  10 face_index 1 1327  2 v0 1 1377  2 v1 1 1377  2 v2 1 1377  
623 0 0 7 600 1377 0 0 0 4 4 this 3 1463  10 face_index 1 1327  1 u 1 1325  1 v 1 1325  
624 0 0 6 601 1327 0 0 0 1 4 this 3 1463  
625 0 0 7 602 1333 0 0 0 0 
626 0 0 7 604 1359 0 0 0 1 5 world 1 1315  
627 0 0 7 604 1359 0 0 0 2 5 world 1 1315  11 joint_group 1 1334  
628 0 0 4 605 1318 0 0 0 2 4 this 3 1359  6 anchor 1 1322  
629 0 0 4 605 1318 0 0 0 4 4 this 3 1359  1 x 1 1325  1 y 1 1325  1 z 1 1325  
630 0 0 4 606 1318 0 0 0 2 4 this 3 1359  4 axis 1 1322  
631 0 0 4 606 1318 0 0 0 4 4 this 3 1359  1 x 1 1325  1 y 1 1325  1 z 1 1325  
632 0 0 4 607 1318 0 0 0 2 4 this 3 1359  4 axis 1 1322  
633 0 0 4 607 1318 0 0 0 4 4 this 3 1359  1 x 1 1325  1 y 1 1325  1 z 1 1325  
634 0 0 4 608 1318 0 0 0 3 4 this 3 1359  7 torque1 1 1325  7 torque2 1 1325  
635 0 0 7 609 1328 0 0 0 1 4 this 3 1465  
636 0 0 7 610 1328 0 0 0 1 4 this 3 1465  
637 0 0 7 611 1328 0 0 0 1 4 this 3 1465  
638 0 0 7 612 1328 0 0 0 1 4 this 3 1465  
639 0 0 6 613 1325 0 0 0 1 4 this 3 1465  
640 0 0 6 614 1325 0 0 0 1 4 this 3 1465  
641 0 0 6 615 1325 0 0 0 1 4 this 3 1465  
642 0 0 6 616 1325 0 0 0 1 4 this 3 1465  
643 0 0 4 617 1318 0 0 0 3 4 this 3 1359  4 axis 1 1327  3 val 1 1325  
644 0 0 4 618 1318 0 0 0 3 4 this 3 1359  4 axis 1 1327  3 val 1 1325  
645 0 0 4 619 1318 0 0 0 3 4 this 3 1359  4 axis 1 1327  3 val 1 1325  
646 0 0 4 620 1318 0 0 0 3 4 this 3 1359  4 axis 1 1327  3 val 1 1325  
647 0 0 4 621 1318 0 0 0 3 4 this 3 1359  4 axis 1 1327  3 val 1 1325  
648 0 0 4 622 1318 0 0 0 3 4 this 3 1359  4 axis 1 1327  3 val 1 1325  
649 0 0 4 623 1318 0 0 0 3 4 this 3 1359  4 axis 1 1327  3 val 1 1325  
650 0 0 4 624 1318 0 0 0 3 4 this 3 1359  4 axis 1 1327  3 val 1 1325  
651 0 0 4 625 1318 0 0 0 3 4 this 3 1359  4 axis 1 1327  3 val 1 1325  
652 0 0 6 626 1325 0 0 0 2 4 this 3 1465  4 axis 1 1327  
653 0 0 6 627 1325 0 0 0 2 4 this 3 1465  4 axis 1 1327  
654 0 0 6 628 1325 0 0 0 2 4 this 3 1465  4 axis 1 1327  
655 0 0 6 629 1325 0 0 0 2 4 this 3 1465  4 axis 1 1327  
656 0 0 6 630 1325 0 0 0 2 4 this 3 1465  4 axis 1 1327  
657 0 0 6 631 1325 0 0 0 2 4 this 3 1465  4 axis 1 1327  
658 0 0 6 632 1325 0 0 0 2 4 this 3 1465  4 axis 1 1327  
659 0 0 6 633 1325 0 0 0 2 4 this 3 1465  4 axis 1 1327  
660 0 0 6 634 1325 0 0 0 2 4 this 3 1465  4 axis 1 1327  
661 0 0 7 635 1333 0 0 0 0 
662 0 0 7 647 1467 1261 0 0 0 
663 0 0 7 647 1467 1261 0 0 1 6 param0 0 1468  
664 0 0 7 637 1345 0 0 60 /**
 * Returns the joint that connects the given bodies.
 */ 2 5 body1 1 1350  5 body2 1 1350  
665 0 0 7 638 1441 1116 0 74 /**
 * Returns a collection of joints connecting the specified bodies.
 */ 2 5 body1 1 1350  5 body2 1 1350  
666 0 0 6 639 1327 0 0 90 /**
 * Returns 1 if the given bodies are connected by a joint, returns 0
 * otherwise.
 */ 2 5 body1 1 1350  5 body2 1 1350  
667 0 0 6 640 1327 0 0 404 /**
 * Returns 1 if the given bodies are connected by a joint that does not match
 * the given joint_type, returns 0 otherwise.  This is useful for deciding
 * whether to add contact joints between two bodies: if they are already
 * connected by non-contact joints then it may not be appropriate to add
 * contacts, however it is okay to add more contact between bodies that
 * already have contacts.
 */ 3 5 body1 1 1350  5 body2 1 1350  10 joint_type 1 1450  
668 0 0 7 641 1421 0 0 152 /**
 * Given two geometry objects that potentially touch (geom1 and geom2),
 * generate contact information for them.  Returns an OdeCollisionEntry.
 */ 3 5 geom1 1 1389  5 geom2 1 1389  12 max_contacts 1 1470  
669 0 0 6 642 1327 0 0 0 4 5 geom1 1 1389  5 geom2 1 1389  3 arg 1 1281  8 callback 1 1281  
670 0 0 7 643 1396 0 0 0 1 5 space 1 1387  
671 0 0 6 644 1325 0 0 73 // RAU we can't access OC_infinity as constants are not exposed in python 0 
672 0 0 6 645 1327 0 0 0 0 
673 0 0 4 646 1318 0 0 0 1 1 s 1 1327  
210
1262 6 dxBody 0 1025 6 dxBody 6 dxBody 0 0 0 0 0 0 0 0 0 0 0 0 0

1263 6 dxGeom 0 1025 6 dxGeom 6 dxGeom 0 0 0 0 0 0 0 0 0 0 0 0 0

1264 7 dxJoint 0 1025 7 dxJoint 7 dxJoint 0 0 0 0 0 0 0 0 0 0 0 0 0

1265 12 dxJointGroup 0 1025 12 dxJointGroup 12 dxJointGroup 0 0 0 0 0 0 0 0 0 0 0 0 0

1266 7 dxSpace 0 1025 7 dxSpace 7 dxSpace 0 0 0 0 0 0 0 0 0 0 0 0 0

1267 13 dxTriMeshData 0 1025 13 dxTriMeshData 13 dxTriMeshData 0 0 0 0 0 0 0 0 0 0 0 0 0

1268 7 dxWorld 0 1025 7 dxWorld 7 dxWorld 0 0 0 0 0 0 0 0 0 0 0 0 0

1269 8 OdeWorld 0 75777 8 OdeWorld 8 OdeWorld 0 0 0 1 674 0 0 36 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 711 0 1 710 1 0 1270 0 0 0 0 10
/**
 *
 */

1270 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1271 13 OdeJointGroup 0 75777 13 OdeJointGroup 13 OdeJointGroup 0 0 0 1 712 0 0 5 713 714 715 716 717 0 0 1 0 1270 0 0 0 0 10
/**
 *
 */

1272 16 OdeJointFeedback 0 141313 16 OdeJointFeedback 16 OdeJointFeedback 0 0 0 1 722 723 0 4 718 719 720 721 0 0 1 0 1273 0 0 0 0 0

1273 14 dJointFeedback 0 1024 14 dJointFeedback 14 dJointFeedback 0 0 0 0 0 0 0 0 0 0 0 0 0

1274 8 OdeJoint 0 75777 8 OdeJoint 8 OdeJoint 0 0 0 0 0 0 27 724 725 726 727 728 729 730 731 732 733 734 735 736 737 739 740 741 742 743 744 745 746 747 748 749 750 751 0 1 738 1 0 1270 0 0 0 1 1275 10
/**
 *
 */

1275 9 JointType 0 794624 19 OdeJoint::JointType 19 OdeJoint::JointType 1274 0 0 0 0 0 0 0 0 0 12 7 JT_none 17 OdeJoint::JT_none 18
/* or "unknown" */
0 7 JT_ball 17 OdeJoint::JT_ball 0
1 8 JT_hinge 18 OdeJoint::JT_hinge 0
2 9 JT_slider 19 OdeJoint::JT_slider 0
3 10 JT_contact 20 OdeJoint::JT_contact 0
4 12 JT_universal 22 OdeJoint::JT_universal 0
5 9 JT_hinge2 19 OdeJoint::JT_hinge2 0
6 8 JT_fixed 18 OdeJoint::JT_fixed 0
7 7 JT_null 17 OdeJoint::JT_null 0
8 10 JT_a_motor 20 OdeJoint::JT_a_motor 0
9 10 JT_l_motor 20 OdeJoint::JT_l_motor 0
10 10 JT_plane2d 20 OdeJoint::JT_plane2d 0
11 0 18
/* or "unknown" */

1276 14 OdeAMotorJoint 0 75777 14 OdeAMotorJoint 14 OdeAMotorJoint 0 0 0 1 752 0 0 30 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 1 1473 0 1 0 1274 0 0 0 0 10
/**
 *
 */

1277 12 OdeBallJoint 0 75777 12 OdeBallJoint 12 OdeBallJoint 0 0 0 1 783 0 0 5 784 785 786 787 788 0 0 1 0 1274 0 0 0 0 10
/**
 *
 */

1278 7 OdeMass 0 75777 7 OdeMass 7 OdeMass 0 0 0 1 789 0 0 20 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 0 0 1 0 1279 0 0 0 0 10
/**
 *
 */

1279 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1280 7 OdeBody 0 75777 7 OdeBody 7 OdeBody 0 0 0 1 810 0 1 1472 59 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 863 864 865 866 867 868 870 871 1 1474 1 869 1 0 1270 0 0 0 0 10
/**
 *
 */

1281 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1282 0 0 0 0 0 0 0 0 0 0

1282 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1283 0 0 0 0 0 0 0 0 0 0

1283 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1284 8 OdeSpace 0 75777 8 OdeSpace 8 OdeSpace 0 0 0 0 0 0 40 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 0 1 897 1 0 1270 0 0 0 0 10
/**
 *
 */

1285 7 OdeGeom 0 75777 7 OdeGeom 7 OdeGeom 0 0 0 0 0 0 50 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 951 952 953 954 955 956 957 958 959 960 961 962 963 0 1 950 1 0 1270 0 0 0 1 1286 10
/**
 *
 */

1286 9 GeomClass 0 794624 18 OdeGeom::GeomClass 18 OdeGeom::GeomClass 1285 0 0 0 0 0 0 0 0 0 10 9 GC_sphere 18 OdeGeom::GC_sphere 0
0 6 GC_box 15 OdeGeom::GC_box 0
1 18 GC_capped_cylinder 27 OdeGeom::GC_capped_cylinder 0
2 11 GC_cylinder 20 OdeGeom::GC_cylinder 0
3 8 GC_plane 17 OdeGeom::GC_plane 0
4 6 GC_ray 15 OdeGeom::GC_ray 0
5 11 GC_tri_mesh 20 OdeGeom::GC_tri_mesh 32
// GC_convex, GC_geom_transform,
8 15 GC_simple_space 24 OdeGeom::GC_simple_space 0
10 13 GC_hash_space 22 OdeGeom::GC_hash_space 0
11 18 GC_quad_tree_space 27 OdeGeom::GC_quad_tree_space 0
12 0 0

1287 10 OdeBoxGeom 0 75777 10 OdeBoxGeom 10 OdeBoxGeom 0 0 0 1 964 0 0 4 965 966 967 968 0 0 1 0 1285 0 0 0 0 10
/**
 *
 */

1288 21 OdeCappedCylinderGeom 0 75777 21 OdeCappedCylinderGeom 21 OdeCappedCylinderGeom 0 0 0 1 969 0 0 6 970 971 972 973 974 975 0 0 1 0 1285 0 0 0 0 10
/**
 *
 */

1289 14 OdeContactGeom 0 75777 14 OdeContactGeom 14 OdeContactGeom 0 0 0 1 976 0 0 13 977 978 979 980 981 982 983 984 985 986 987 988 989 0 0 1 0 1279 0 0 0 0 10
/**
 *
 */

1290 17 OdeCollisionEntry 0 75777 17 OdeCollisionEntry 17 OdeCollisionEntry 0 0 0 1 1001 0 0 10 990 991 992 993 994 995 996 997 999 1000 2 1475 1476 1 998 1 0 1279 0 0 0 0 80
/**
 * A class used to hold information about a collision that has occurred.
 */

1291 20 OdeSurfaceParameters 0 75777 20 OdeSurfaceParameters 20 OdeSurfaceParameters 0 0 0 1 1002 0 0 23 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 0 0 1 0 1270 0 0 0 1 1292 10
/**
 *
 */

1292 9 ModeFlags 0 794624 31 OdeSurfaceParameters::ModeFlags 31 OdeSurfaceParameters::ModeFlags 1291 0 0 0 0 0 0 0 0 0 13 14 MF_contact_mu2 36 OdeSurfaceParameters::MF_contact_mu2 0
1 15 MF_contactFDir1 37 OdeSurfaceParameters::MF_contactFDir1 0
2 16 MF_contactBounce 38 OdeSurfaceParameters::MF_contactBounce 0
4 17 MF_contactSoftERP 39 OdeSurfaceParameters::MF_contactSoftERP 0
8 17 MF_contactSoftCFM 39 OdeSurfaceParameters::MF_contactSoftCFM 0
16 17 MF_contactMotion1 39 OdeSurfaceParameters::MF_contactMotion1 0
32 17 MF_contactMotion2 39 OdeSurfaceParameters::MF_contactMotion2 0
64 15 MF_contactSlip1 37 OdeSurfaceParameters::MF_contactSlip1 0
128 15 MF_contactSlip2 37 OdeSurfaceParameters::MF_contactSlip2 0
256 17 MF_contactApprox0 39 OdeSurfaceParameters::MF_contactApprox0 0
0 19 MF_contactApprox1_1 41 OdeSurfaceParameters::MF_contactApprox1_1 0
4096 19 MF_contactApprox1_2 41 OdeSurfaceParameters::MF_contactApprox1_2 0
8192 17 MF_contactApprox1 39 OdeSurfaceParameters::MF_contactApprox1 0
12288 0 0

1293 10 OdeContact 0 75777 10 OdeContact 10 OdeContact 0 0 0 1 1026 0 0 7 1027 1028 1029 1030 1031 1032 1033 0 0 1 0 1279 0 0 0 0 10
/**
 *
 */

1294 15 OdeContactJoint 0 75777 15 OdeContactJoint 15 OdeContactJoint 0 0 0 1 1034 0 0 1 1035 0 0 1 0 1274 0 0 0 0 10
/**
 *
 */

1295 15 OdeCylinderGeom 0 75777 15 OdeCylinderGeom 15 OdeCylinderGeom 0 0 0 1 1036 0 0 5 1037 1038 1039 1040 1041 0 0 1 0 1285 0 0 0 0 10
/**
 *
 */

1296 13 OdeFixedJoint 0 75777 13 OdeFixedJoint 13 OdeFixedJoint 0 0 0 1 1042 0 0 2 1043 1044 0 0 1 0 1274 0 0 0 0 10
/**
 *
 */

1297 12 OdeHashSpace 0 75777 12 OdeHashSpace 12 OdeHashSpace 0 0 0 1 1045 0 0 4 1046 1047 1048 1049 0 0 1 0 1284 0 0 0 0 10
/**
 *
 */

1298 14 OdeHinge2Joint 0 75777 14 OdeHinge2Joint 14 OdeHinge2Joint 0 0 0 1 1050 0 0 34 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 0 0 1 0 1274 0 0 0 0 10
/**
 *
 */

1299 13 OdeHingeJoint 0 75777 13 OdeHingeJoint 13 OdeHingeJoint 0 0 0 1 1085 0 0 28 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 0 0 1 0 1274 0 0 0 0 10
/**
 *
 */

1300 18 OdeJointCollection 0 26625 18 OdeJointCollection 18 OdeJointCollection 0 0 0 1 1114 1116 0 15 1115 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1 1477 0 0 0 0 10
/**
 *
 */

1301 14 OdeLMotorJoint 0 75777 14 OdeLMotorJoint 14 OdeLMotorJoint 0 0 0 1 1131 0 0 7 1132 1133 1134 1135 1136 1137 1138 1 1478 0 1 0 1274 0 0 0 0 10
/**
 *
 */

1302 12 OdeNullJoint 0 75777 12 OdeNullJoint 12 OdeNullJoint 0 0 0 1 1139 0 0 1 1140 0 0 1 0 1274 0 0 0 0 10
/**
 *
 */

1303 15 OdePlane2dJoint 0 75777 15 OdePlane2dJoint 15 OdePlane2dJoint 0 0 0 1 1141 0 0 4 1142 1143 1144 1145 0 0 1 0 1274 0 0 0 0 10
/**
 *
 */

1304 12 OdePlaneGeom 0 75777 12 OdePlaneGeom 12 OdePlaneGeom 0 0 0 1 1146 0 0 4 1147 1148 1149 1150 0 0 1 0 1285 0 0 0 0 10
/**
 *
 */

1305 16 OdeQuadTreeSpace 0 75777 16 OdeQuadTreeSpace 16 OdeQuadTreeSpace 0 0 0 1 1151 0 0 1 1152 0 0 1 0 1284 0 0 0 0 10
/**
 *
 */

1306 10 OdeRayGeom 0 75777 10 OdeRayGeom 10 OdeRayGeom 0 0 0 1 1153 0 0 13 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 0 0 1 0 1285 0 0 0 0 10
/**
 *
 */

1307 14 OdeSimpleSpace 0 75777 14 OdeSimpleSpace 14 OdeSimpleSpace 0 0 0 1 1167 0 0 1 1168 0 0 1 0 1284 0 0 0 0 10
/**
 *
 */

1308 14 OdeSliderJoint 0 75777 14 OdeSliderJoint 14 OdeSliderJoint 0 0 0 1 1169 0 0 25 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 0 0 1 0 1274 0 0 0 0 10
/**
 *
 */

1309 13 OdeSphereGeom 0 75777 13 OdeSphereGeom 13 OdeSphereGeom 0 0 0 1 1195 0 0 4 1196 1197 1198 1199 0 0 1 0 1285 0 0 0 0 10
/**
 *
 */

1310 14 OdeTriMeshData 0 75777 14 OdeTriMeshData 14 OdeTriMeshData 0 0 0 1 1200 0 0 4 1201 1202 1203 1204 0 0 1 0 1279 0 0 0 1 1311 10
/**
 *
 */

1311 8 DataType 0 794624 24 OdeTriMeshData::DataType 24 OdeTriMeshData::DataType 1310 0 0 0 0 0 0 0 0 0 2 15 DT_face_normals 31 OdeTriMeshData::DT_face_normals 0
0 22 DT_last_transformation 38 OdeTriMeshData::DT_last_transformation 0
1 0 0

1312 14 OdeTriMeshGeom 0 75777 14 OdeTriMeshGeom 14 OdeTriMeshGeom 0 0 0 1 1205 0 0 12 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 0 0 1 0 1285 0 0 0 0 10
/**
 *
 */

1313 17 OdeUniversalJoint 0 75777 17 OdeUniversalJoint 17 OdeUniversalJoint 0 0 0 1 1218 0 0 31 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 0 0 1 0 1274 0 0 0 0 10
/**
 *
 */

1314 7 OdeUtil 0 141313 7 OdeUtil 7 OdeUtil 0 0 0 1 1260 1261 0 10 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 0 0 0 0 0 10
/**
 *
 */

1315 10 OdeWorld * 0 8576 10 OdeWorld * 10 OdeWorld * 0 0 1269 0 0 0 0 0 0 0 0 0 0

1316 16 OdeWorld const * 0 8576 16 OdeWorld const * 16 OdeWorld const * 0 0 1317 0 0 0 0 0 0 0 0 0 0

1317 14 OdeWorld const 0 8832 14 OdeWorld const 14 OdeWorld const 0 0 1269 0 0 0 0 0 0 0 0 0 0

1318 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1319 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1320 8 dWorldID 0 2105344 8 dWorldID 8 dWorldID 0 0 1321 0 0 0 0 0 0 0 0 0 0

1321 9 dxWorld * 0 8576 9 dxWorld * 9 dxWorld * 0 0 1268 0 0 0 0 0 0 0 0 0 0

1322 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1323 0 0 0 0 0 0 0 0 0 0

1323 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1324 0 0 0 0 0 0 0 0 0 0

1324 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1325 5 dReal 0 2105344 5 dReal 5 dReal 0 0 1326 0 0 0 0 0 0 0 0 0 0

1326 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1327 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1328 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 1324 0 0 0 0 0 0 0 0 0 0

1329 7 uint8_t 0 2105344 7 uint8_t 7 uint8_t 0 0 1330 0 0 0 0 0 0 0 0 0 0

1330 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

1331 9 OdeBody * 0 8576 9 OdeBody * 9 OdeBody * 0 0 1280 0 0 0 0 0 0 0 0 0 0

1332 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1333 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1332 0 0 0 0 0 0 0 0 0 0

1334 15 OdeJointGroup * 0 8576 15 OdeJointGroup * 15 OdeJointGroup * 0 0 1271 0 0 0 0 0 0 0 0 0 0

1335 21 OdeJointGroup const * 0 8576 21 OdeJointGroup const * 21 OdeJointGroup const * 0 0 1336 0 0 0 0 0 0 0 0 0 0

1336 19 OdeJointGroup const 0 8832 19 OdeJointGroup const 19 OdeJointGroup const 0 0 1271 0 0 0 0 0 0 0 0 0 0

1337 13 dJointGroupID 0 2105344 13 dJointGroupID 13 dJointGroupID 0 0 1338 0 0 0 0 0 0 0 0 0 0

1338 14 dxJointGroup * 0 8576 14 dxJointGroup * 14 dxJointGroup * 0 0 1265 0 0 0 0 0 0 0 0 0 0

1339 18 OdeJointFeedback * 0 8576 18 OdeJointFeedback * 18 OdeJointFeedback * 0 0 1272 0 0 0 0 0 0 0 0 0 0

1340 24 OdeJointFeedback const * 0 8576 24 OdeJointFeedback const * 24 OdeJointFeedback const * 0 0 1341 0 0 0 0 0 0 0 0 0 0

1341 22 OdeJointFeedback const 0 8832 22 OdeJointFeedback const 22 OdeJointFeedback const 0 0 1272 0 0 0 0 0 0 0 0 0 0

1342 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1343 0 0 0 0 0 0 0 0 0 0

1343 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1344 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1342 0 0 0 0 0 0 0 0 0 0

1345 10 OdeJoint * 0 8576 10 OdeJoint * 10 OdeJoint * 0 0 1274 0 0 0 0 0 0 0 0 0 0

1346 16 OdeJoint const * 0 8576 16 OdeJoint const * 16 OdeJoint const * 0 0 1347 0 0 0 0 0 0 0 0 0 0

1347 14 OdeJoint const 0 8832 14 OdeJoint const 14 OdeJoint const 0 0 1274 0 0 0 0 0 0 0 0 0 0

1348 8 dJointID 0 2105344 8 dJointID 8 dJointID 0 0 1349 0 0 0 0 0 0 0 0 0 0

1349 9 dxJoint * 0 8576 9 dxJoint * 9 dxJoint * 0 0 1264 0 0 0 0 0 0 0 0 0 0

1350 15 OdeBody const * 0 8576 15 OdeBody const * 15 OdeBody const * 0 0 1351 0 0 0 0 0 0 0 0 0 0

1351 13 OdeBody const 0 8832 13 OdeBody const 13 OdeBody const 0 0 1280 0 0 0 0 0 0 0 0 0 0

1352 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 1353 0 0 0 0 0 0 0 0 0 0

1353 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1354 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1355 14 OdeBallJoint * 0 8576 14 OdeBallJoint * 14 OdeBallJoint * 0 0 1277 0 0 0 0 0 0 0 0 0 0

1356 15 OdeHingeJoint * 0 8576 15 OdeHingeJoint * 15 OdeHingeJoint * 0 0 1299 0 0 0 0 0 0 0 0 0 0

1357 16 OdeSliderJoint * 0 8576 16 OdeSliderJoint * 16 OdeSliderJoint * 0 0 1308 0 0 0 0 0 0 0 0 0 0

1358 17 OdeContactJoint * 0 8576 17 OdeContactJoint * 17 OdeContactJoint * 0 0 1294 0 0 0 0 0 0 0 0 0 0

1359 19 OdeUniversalJoint * 0 8576 19 OdeUniversalJoint * 19 OdeUniversalJoint * 0 0 1313 0 0 0 0 0 0 0 0 0 0

1360 16 OdeHinge2Joint * 0 8576 16 OdeHinge2Joint * 16 OdeHinge2Joint * 0 0 1298 0 0 0 0 0 0 0 0 0 0

1361 15 OdeFixedJoint * 0 8576 15 OdeFixedJoint * 15 OdeFixedJoint * 0 0 1296 0 0 0 0 0 0 0 0 0 0

1362 14 OdeNullJoint * 0 8576 14 OdeNullJoint * 14 OdeNullJoint * 0 0 1302 0 0 0 0 0 0 0 0 0 0

1363 16 OdeAMotorJoint * 0 8576 16 OdeAMotorJoint * 16 OdeAMotorJoint * 0 0 1276 0 0 0 0 0 0 0 0 0 0

1364 16 OdeLMotorJoint * 0 8576 16 OdeLMotorJoint * 16 OdeLMotorJoint * 0 0 1301 0 0 0 0 0 0 0 0 0 0

1365 17 OdePlane2dJoint * 0 8576 17 OdePlane2dJoint * 17 OdePlane2dJoint * 0 0 1303 0 0 0 0 0 0 0 0 0 0

1366 22 OdeAMotorJoint const * 0 8576 22 OdeAMotorJoint const * 22 OdeAMotorJoint const * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1367 20 OdeAMotorJoint const 0 8832 20 OdeAMotorJoint const 20 OdeAMotorJoint const 0 0 1276 0 0 0 0 0 0 0 0 0 0

1368 20 OdeBallJoint const * 0 8576 20 OdeBallJoint const * 20 OdeBallJoint const * 0 0 1369 0 0 0 0 0 0 0 0 0 0

1369 18 OdeBallJoint const 0 8832 18 OdeBallJoint const 18 OdeBallJoint const 0 0 1277 0 0 0 0 0 0 0 0 0 0

1370 9 OdeMass * 0 8576 9 OdeMass * 9 OdeMass * 0 0 1278 0 0 0 0 0 0 0 0 0 0

1371 15 OdeMass const * 0 8576 15 OdeMass const * 15 OdeMass const * 0 0 1372 0 0 0 0 0 0 0 0 0 0

1372 13 OdeMass const 0 8832 13 OdeMass const 13 OdeMass const 0 0 1278 0 0 0 0 0 0 0 0 0 0

1373 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1374 0 0 0 0 0 0 0 0 0 0

1374 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1375 0 0 0 0 0 0 0 0 0 0

1375 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1376 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1377 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1378 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1375 0 0 0 0 0 0 0 0 0 0

1379 7 dBodyID 0 2105344 7 dBodyID 7 dBodyID 0 0 1380 0 0 0 0 0 0 0 0 0 0

1380 8 dxBody * 0 8576 8 dxBody * 8 dxBody * 0 0 1262 0 0 0 0 0 0 0 0 0 0

1381 20 LQuaternionf const * 0 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 1382 0 0 0 0 0 0 0 0 0 0

1382 18 LQuaternionf const 0 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 1383 0 0 0 0 0 0 0 0 0 0

1383 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1384 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1385 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 1384 0 0 0 0 0 0 0 0 0 0

1386 10 OdeSpace * 0 8576 10 OdeSpace * 10 OdeSpace * 0 0 1284 0 0 0 0 0 0 0 0 0 0

1387 16 OdeSpace const * 0 8576 16 OdeSpace const * 16 OdeSpace const * 0 0 1388 0 0 0 0 0 0 0 0 0 0

1388 14 OdeSpace const 0 8832 14 OdeSpace const 14 OdeSpace const 0 0 1284 0 0 0 0 0 0 0 0 0 0

1389 15 OdeGeom const * 0 8576 15 OdeGeom const * 15 OdeGeom const * 0 0 1390 0 0 0 0 0 0 0 0 0 0

1390 13 OdeGeom const 0 8832 13 OdeGeom const 13 OdeGeom const 0 0 1285 0 0 0 0 0 0 0 0 0 0

1391 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 1392 0 0 0 0 0 0 0 0 0 0

1392 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 1393 0 0 0 0 0 0 0 0 0 0

1393 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 1394 0 0 0 0 0 0 0 0 0 0

1394 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1395 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 1393 0 0 0 0 0 0 0 0 0 0

1396 9 OdeGeom * 0 8576 9 OdeGeom * 9 OdeGeom * 0 0 1285 0 0 0 0 0 0 0 0 0 0

1397 16 OdeSimpleSpace * 0 8576 16 OdeSimpleSpace * 16 OdeSimpleSpace * 0 0 1307 0 0 0 0 0 0 0 0 0 0

1398 14 OdeHashSpace * 0 8576 14 OdeHashSpace * 14 OdeHashSpace * 0 0 1297 0 0 0 0 0 0 0 0 0 0

1399 18 OdeQuadTreeSpace * 0 8576 18 OdeQuadTreeSpace * 18 OdeQuadTreeSpace * 0 0 1305 0 0 0 0 0 0 0 0 0 0

1400 7 dGeomID 0 2105344 7 dGeomID 7 dGeomID 0 0 1401 0 0 0 0 0 0 0 0 0 0

1401 8 dxGeom * 0 8576 8 dxGeom * 8 dxGeom * 0 0 1263 0 0 0 0 0 0 0 0 0 0

1402 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1403 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1383 0 0 0 0 0 0 0 0 0 0

1404 12 OdeBoxGeom * 0 8576 12 OdeBoxGeom * 12 OdeBoxGeom * 0 0 1287 0 0 0 0 0 0 0 0 0 0

1405 23 OdeCappedCylinderGeom * 0 8576 23 OdeCappedCylinderGeom * 23 OdeCappedCylinderGeom * 0 0 1288 0 0 0 0 0 0 0 0 0 0

1406 17 OdeCylinderGeom * 0 8576 17 OdeCylinderGeom * 17 OdeCylinderGeom * 0 0 1295 0 0 0 0 0 0 0 0 0 0

1407 14 OdePlaneGeom * 0 8576 14 OdePlaneGeom * 14 OdePlaneGeom * 0 0 1304 0 0 0 0 0 0 0 0 0 0

1408 12 OdeRayGeom * 0 8576 12 OdeRayGeom * 12 OdeRayGeom * 0 0 1306 0 0 0 0 0 0 0 0 0 0

1409 15 OdeSphereGeom * 0 8576 15 OdeSphereGeom * 15 OdeSphereGeom * 0 0 1309 0 0 0 0 0 0 0 0 0 0

1410 16 OdeTriMeshGeom * 0 8576 16 OdeTriMeshGeom * 16 OdeTriMeshGeom * 0 0 1312 0 0 0 0 0 0 0 0 0 0

1411 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1412 0 0 0 0 0 0 0 0 0 0

1412 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1376 0 0 0 0 0 0 0 0 0 0

1413 29 OdeCappedCylinderGeom const * 0 8576 29 OdeCappedCylinderGeom const * 29 OdeCappedCylinderGeom const * 0 0 1414 0 0 0 0 0 0 0 0 0 0

1414 27 OdeCappedCylinderGeom const 0 8832 27 OdeCappedCylinderGeom const 27 OdeCappedCylinderGeom const 0 0 1288 0 0 0 0 0 0 0 0 0 0

1415 16 OdeContactGeom * 0 8576 16 OdeContactGeom * 16 OdeContactGeom * 0 0 1289 0 0 0 0 0 0 0 0 0 0

1416 22 OdeContactGeom const * 0 8576 22 OdeContactGeom const * 22 OdeContactGeom const * 0 0 1417 0 0 0 0 0 0 0 0 0 0

1417 20 OdeContactGeom const 0 8832 20 OdeContactGeom const 20 OdeContactGeom const 0 0 1289 0 0 0 0 0 0 0 0 0 0

1418 11 dReal const 0 8832 11 dReal const 11 dReal const 0 0 1325 0 0 0 0 0 0 0 0 0 0

1419 25 OdeCollisionEntry const * 0 8576 25 OdeCollisionEntry const * 25 OdeCollisionEntry const * 0 0 1420 0 0 0 0 0 0 0 0 0 0

1420 23 OdeCollisionEntry const 0 8832 23 OdeCollisionEntry const 23 OdeCollisionEntry const 0 0 1290 0 0 0 0 0 0 0 0 0 0

1421 19 OdeCollisionEntry * 0 8576 19 OdeCollisionEntry * 19 OdeCollisionEntry * 0 0 1290 0 0 0 0 0 0 0 0 0 0

1422 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1423 0 0 0 0 0 0 0 0 0 0

1423 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1424 22 OdeSurfaceParameters * 0 8576 22 OdeSurfaceParameters * 22 OdeSurfaceParameters * 0 0 1291 0 0 0 0 0 0 0 0 0 0

1425 28 OdeSurfaceParameters const * 0 8576 28 OdeSurfaceParameters const * 28 OdeSurfaceParameters const * 0 0 1426 0 0 0 0 0 0 0 0 0 0

1426 26 OdeSurfaceParameters const 0 8832 26 OdeSurfaceParameters const 26 OdeSurfaceParameters const 0 0 1291 0 0 0 0 0 0 0 0 0 0

1427 12 OdeContact * 0 8576 12 OdeContact * 12 OdeContact * 0 0 1293 0 0 0 0 0 0 0 0 0 0

1428 16 dContact const * 0 8576 16 dContact const * 16 dContact const * 0 0 1429 0 0 0 0 0 0 0 0 0 0

1429 14 dContact const 0 8832 14 dContact const 14 dContact const 0 0 1430 0 0 0 0 0 0 0 0 0 0

1430 8 dContact 0 1024 8 dContact 8 dContact 0 0 0 0 0 0 0 0 0 0 0 0 0

1431 18 OdeContact const * 0 8576 18 OdeContact const * 18 OdeContact const * 0 0 1432 0 0 0 0 0 0 0 0 0 0

1432 16 OdeContact const 0 8832 16 OdeContact const 16 OdeContact const 0 0 1293 0 0 0 0 0 0 0 0 0 0

1433 23 OdeCylinderGeom const * 0 8576 23 OdeCylinderGeom const * 23 OdeCylinderGeom const * 0 0 1434 0 0 0 0 0 0 0 0 0 0

1434 21 OdeCylinderGeom const 0 8832 21 OdeCylinderGeom const 21 OdeCylinderGeom const 0 0 1295 0 0 0 0 0 0 0 0 0 0

1435 20 OdeHashSpace const * 0 8576 20 OdeHashSpace const * 20 OdeHashSpace const * 0 0 1436 0 0 0 0 0 0 0 0 0 0

1436 18 OdeHashSpace const 0 8832 18 OdeHashSpace const 18 OdeHashSpace const 0 0 1297 0 0 0 0 0 0 0 0 0 0

1437 22 OdeHinge2Joint const * 0 8576 22 OdeHinge2Joint const * 22 OdeHinge2Joint const * 0 0 1438 0 0 0 0 0 0 0 0 0 0

1438 20 OdeHinge2Joint const 0 8832 20 OdeHinge2Joint const 20 OdeHinge2Joint const 0 0 1298 0 0 0 0 0 0 0 0 0 0

1439 21 OdeHingeJoint const * 0 8576 21 OdeHingeJoint const * 21 OdeHingeJoint const * 0 0 1440 0 0 0 0 0 0 0 0 0 0

1440 19 OdeHingeJoint const 0 8832 19 OdeHingeJoint const 19 OdeHingeJoint const 0 0 1299 0 0 0 0 0 0 0 0 0 0

1441 20 OdeJointCollection * 0 8576 20 OdeJointCollection * 20 OdeJointCollection * 0 0 1300 0 0 0 0 0 0 0 0 0 0

1442 26 OdeJointCollection const * 0 8576 26 OdeJointCollection const * 26 OdeJointCollection const * 0 0 1443 0 0 0 0 0 0 0 0 0 0

1443 24 OdeJointCollection const 0 8832 24 OdeJointCollection const 24 OdeJointCollection const 0 0 1300 0 0 0 0 0 0 0 0 0 0

1444 22 OdeLMotorJoint const * 0 8576 22 OdeLMotorJoint const * 22 OdeLMotorJoint const * 0 0 1445 0 0 0 0 0 0 0 0 0 0

1445 20 OdeLMotorJoint const 0 8832 20 OdeLMotorJoint const 20 OdeLMotorJoint const 0 0 1301 0 0 0 0 0 0 0 0 0 0

1446 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1447 0 0 0 0 0 0 0 0 0 0

1447 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1384 0 0 0 0 0 0 0 0 0 0

1448 20 OdePlaneGeom const * 0 8576 20 OdePlaneGeom const * 20 OdePlaneGeom const * 0 0 1449 0 0 0 0 0 0 0 0 0 0

1449 18 OdePlaneGeom const 0 8832 18 OdePlaneGeom const 18 OdePlaneGeom const 0 0 1304 0 0 0 0 0 0 0 0 0 0

1450 9 int const 0 8832 9 int const 9 int const 0 0 1327 0 0 0 0 0 0 0 0 0 0

1451 18 OdeRayGeom const * 0 8576 18 OdeRayGeom const * 18 OdeRayGeom const * 0 0 1452 0 0 0 0 0 0 0 0 0 0

1452 16 OdeRayGeom const 0 8832 16 OdeRayGeom const 16 OdeRayGeom const 0 0 1306 0 0 0 0 0 0 0 0 0 0

1453 22 OdeSliderJoint const * 0 8576 22 OdeSliderJoint const * 22 OdeSliderJoint const * 0 0 1454 0 0 0 0 0 0 0 0 0 0

1454 20 OdeSliderJoint const 0 8832 20 OdeSliderJoint const 20 OdeSliderJoint const 0 0 1308 0 0 0 0 0 0 0 0 0 0

1455 21 OdeSphereGeom const * 0 8576 21 OdeSphereGeom const * 21 OdeSphereGeom const * 0 0 1456 0 0 0 0 0 0 0 0 0 0

1456 19 OdeSphereGeom const 0 8832 19 OdeSphereGeom const 19 OdeSphereGeom const 0 0 1309 0 0 0 0 0 0 0 0 0 0

1457 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 1458 0 0 0 0 0 0 0 0 0 0

1458 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 1459 0 0 0 0 0 0 0 0 0 0

1459 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

1460 16 OdeTriMeshData * 0 8576 16 OdeTriMeshData * 16 OdeTriMeshData * 0 0 1310 0 0 0 0 0 0 0 0 0 0

1461 22 OdeTriMeshData const * 0 8576 22 OdeTriMeshData const * 22 OdeTriMeshData const * 0 0 1462 0 0 0 0 0 0 0 0 0 0

1462 20 OdeTriMeshData const 0 8832 20 OdeTriMeshData const 20 OdeTriMeshData const 0 0 1310 0 0 0 0 0 0 0 0 0 0

1463 22 OdeTriMeshGeom const * 0 8576 22 OdeTriMeshGeom const * 22 OdeTriMeshGeom const * 0 0 1464 0 0 0 0 0 0 0 0 0 0

1464 20 OdeTriMeshGeom const 0 8832 20 OdeTriMeshGeom const 20 OdeTriMeshGeom const 0 0 1312 0 0 0 0 0 0 0 0 0 0

1465 25 OdeUniversalJoint const * 0 8576 25 OdeUniversalJoint const * 25 OdeUniversalJoint const * 0 0 1466 0 0 0 0 0 0 0 0 0 0

1466 23 OdeUniversalJoint const 0 8832 23 OdeUniversalJoint const 23 OdeUniversalJoint const 0 0 1313 0 0 0 0 0 0 0 0 0 0

1467 9 OdeUtil * 0 8576 9 OdeUtil * 9 OdeUtil * 0 0 1314 0 0 0 0 0 0 0 0 0 0

1468 15 OdeUtil const * 0 8576 15 OdeUtil const * 15 OdeUtil const * 0 0 1469 0 0 0 0 0 0 0 0 0 0

1469 13 OdeUtil const 0 8832 13 OdeUtil const 13 OdeUtil const 0 0 1314 0 0 0 0 0 0 0 0 0 0

1470 15 short int const 0 8832 15 short int const 15 short int const 0 0 1471 0 0 0 0 0 0 0 0 0 0

1471 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

0
1
1472 6 joints 0 66 1281 862 0 0 0 0 859 0 0 15 OdeBody::joints 0

6
1473 8 get_axes 0 758 759 24 OdeAMotorJoint::get_axes 0

1474 10 get_joints 0 859 860 19 OdeBody::get_joints 0

1475 18 get_contact_points 0 994 995 37 OdeCollisionEntry::get_contact_points 0

1476 17 get_contact_geoms 0 994 996 36 OdeCollisionEntry::get_contact_geoms 0

1477 10 get_joints 0 1125 1126 30 OdeJointCollection::get_joints 0

1478 8 get_axes 0 1135 1136 24 OdeLMotorJoint::get_axes 0

