1565844124
3 3
13 libp3mathutil 4 LL_p 12 panda3d.core 
712
753 5 clear 0 4 1467 59 PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear 0 1 14 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear(void);

754 6 output 0 4 1467 60 PointerToBase< ReferenceCountedVector< LMatrix3d > >::output 0 1 15 0
91
void PointerToBase< ReferenceCountedVector< LMatrix3d > >::output(std::ostream &out) const;

755 19 ~PointerToArrayBase 0 4 1466 52 PointerToArrayBase< LMatrix3d >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3d >::~PointerToArrayBase(void);

756 19 ConstPointerToArray 0 4 1465 53 ConstPointerToArray< LMatrix3d >::ConstPointerToArray 0 2 1 2 0
210
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PointerToArray< LMatrix3d > const &copy);
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(ConstPointerToArray< LMatrix3d > const &copy);

757 5 clear 0 4 1465 39 ConstPointerToArray< LMatrix3d >::clear 0 1 3 0
58
inline void ConstPointerToArray< LMatrix3d >::clear(void);

758 4 size 0 4 1465 38 ConstPointerToArray< LMatrix3d >::size 0 1 4 0
81
inline unsigned long long int ConstPointerToArray< LMatrix3d >::size(void) const;

759 11 get_element 0 4 1465 45 ConstPointerToArray< LMatrix3d >::get_element 0 1 5 0
102
inline LMatrix3d const &ConstPointerToArray< LMatrix3d >::get_element(unsigned long long int n) const;

760 11 __getitem__ 0 4 1465 45 ConstPointerToArray< LMatrix3d >::__getitem__ 0 1 6 0
95
LMatrix3d const &ConstPointerToArray< LMatrix3d >::__getitem__(unsigned long long int n) const;

761 8 get_data 0 4 1465 42 ConstPointerToArray< LMatrix3d >::get_data 0 1 7 0
65
PyObject *ConstPointerToArray< LMatrix3d >::get_data(void) const;

762 11 get_subdata 0 4 1465 45 ConstPointerToArray< LMatrix3d >::get_subdata 0 1 8 0
118
PyObject *ConstPointerToArray< LMatrix3d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

763 13 get_ref_count 0 4 1465 47 ConstPointerToArray< LMatrix3d >::get_ref_count 0 1 9 0
71
inline int ConstPointerToArray< LMatrix3d >::get_ref_count(void) const;

764 18 get_node_ref_count 0 4 1465 52 ConstPointerToArray< LMatrix3d >::get_node_ref_count 0 1 10 0
76
inline int ConstPointerToArray< LMatrix3d >::get_node_ref_count(void) const;

765 5 count 0 4 1465 39 ConstPointerToArray< LMatrix3d >::count 0 1 11 0
95
inline unsigned long long int ConstPointerToArray< LMatrix3d >::count(LMatrix3d const &) const;

766 13 __getbuffer__ 0 4 1465 47 ConstPointerToArray< LMatrix3d >::__getbuffer__ 0 1 12 0
102
int ConstPointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

767 17 __releasebuffer__ 0 4 1465 51 ConstPointerToArray< LMatrix3d >::__releasebuffer__ 0 1 13 0
96
void ConstPointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

768 20 ~ConstPointerToArray 0 4 1465 54 ConstPointerToArray< LMatrix3d >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3d >::~ConstPointerToArray(void);

769 5 clear 0 4 1471 59 PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear 0 1 29 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear(void);

770 6 output 0 4 1471 60 PointerToBase< ReferenceCountedVector< LMatrix3f > >::output 0 1 30 0
91
void PointerToBase< ReferenceCountedVector< LMatrix3f > >::output(std::ostream &out) const;

771 19 ~PointerToArrayBase 0 4 1470 52 PointerToArrayBase< LMatrix3f >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3f >::~PointerToArrayBase(void);

772 19 ConstPointerToArray 0 4 1469 53 ConstPointerToArray< LMatrix3f >::ConstPointerToArray 0 2 16 17 0
210
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PointerToArray< LMatrix3f > const &copy);
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(ConstPointerToArray< LMatrix3f > const &copy);

773 5 clear 0 4 1469 39 ConstPointerToArray< LMatrix3f >::clear 0 1 18 0
58
inline void ConstPointerToArray< LMatrix3f >::clear(void);

774 4 size 0 4 1469 38 ConstPointerToArray< LMatrix3f >::size 0 1 19 0
81
inline unsigned long long int ConstPointerToArray< LMatrix3f >::size(void) const;

775 11 get_element 0 4 1469 45 ConstPointerToArray< LMatrix3f >::get_element 0 1 20 0
102
inline LMatrix3f const &ConstPointerToArray< LMatrix3f >::get_element(unsigned long long int n) const;

776 11 __getitem__ 0 4 1469 45 ConstPointerToArray< LMatrix3f >::__getitem__ 0 1 21 0
95
LMatrix3f const &ConstPointerToArray< LMatrix3f >::__getitem__(unsigned long long int n) const;

777 8 get_data 0 4 1469 42 ConstPointerToArray< LMatrix3f >::get_data 0 1 22 0
65
PyObject *ConstPointerToArray< LMatrix3f >::get_data(void) const;

778 11 get_subdata 0 4 1469 45 ConstPointerToArray< LMatrix3f >::get_subdata 0 1 23 0
118
PyObject *ConstPointerToArray< LMatrix3f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

779 13 get_ref_count 0 4 1469 47 ConstPointerToArray< LMatrix3f >::get_ref_count 0 1 24 0
71
inline int ConstPointerToArray< LMatrix3f >::get_ref_count(void) const;

780 18 get_node_ref_count 0 4 1469 52 ConstPointerToArray< LMatrix3f >::get_node_ref_count 0 1 25 0
76
inline int ConstPointerToArray< LMatrix3f >::get_node_ref_count(void) const;

781 5 count 0 4 1469 39 ConstPointerToArray< LMatrix3f >::count 0 1 26 0
95
inline unsigned long long int ConstPointerToArray< LMatrix3f >::count(LMatrix3f const &) const;

782 13 __getbuffer__ 0 4 1469 47 ConstPointerToArray< LMatrix3f >::__getbuffer__ 0 1 27 0
102
int ConstPointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

783 17 __releasebuffer__ 0 4 1469 51 ConstPointerToArray< LMatrix3f >::__releasebuffer__ 0 1 28 0
96
void ConstPointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

784 20 ~ConstPointerToArray 0 4 1469 54 ConstPointerToArray< LMatrix3f >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3f >::~ConstPointerToArray(void);

785 5 clear 0 4 1474 60 PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear 0 1 44 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear(void);

786 6 output 0 4 1474 61 PointerToBase< ReferenceCountedVector< LVecBase2d > >::output 0 1 45 0
92
void PointerToBase< ReferenceCountedVector< LVecBase2d > >::output(std::ostream &out) const;

787 19 ~PointerToArrayBase 0 4 1473 53 PointerToArrayBase< LVecBase2d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2d >::~PointerToArrayBase(void);

788 19 ConstPointerToArray 0 4 1472 54 ConstPointerToArray< LVecBase2d >::ConstPointerToArray 0 2 31 32 0
214
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PointerToArray< LVecBase2d > const &copy);
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(ConstPointerToArray< LVecBase2d > const &copy);

789 5 clear 0 4 1472 40 ConstPointerToArray< LVecBase2d >::clear 0 1 33 0
59
inline void ConstPointerToArray< LVecBase2d >::clear(void);

790 4 size 0 4 1472 39 ConstPointerToArray< LVecBase2d >::size 0 1 34 0
82
inline unsigned long long int ConstPointerToArray< LVecBase2d >::size(void) const;

791 11 get_element 0 4 1472 46 ConstPointerToArray< LVecBase2d >::get_element 0 1 35 0
104
inline LVecBase2d const &ConstPointerToArray< LVecBase2d >::get_element(unsigned long long int n) const;

792 11 __getitem__ 0 4 1472 46 ConstPointerToArray< LVecBase2d >::__getitem__ 0 1 36 0
97
LVecBase2d const &ConstPointerToArray< LVecBase2d >::__getitem__(unsigned long long int n) const;

793 8 get_data 0 4 1472 43 ConstPointerToArray< LVecBase2d >::get_data 0 1 37 0
66
PyObject *ConstPointerToArray< LVecBase2d >::get_data(void) const;

794 11 get_subdata 0 4 1472 46 ConstPointerToArray< LVecBase2d >::get_subdata 0 1 38 0
119
PyObject *ConstPointerToArray< LVecBase2d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

795 13 get_ref_count 0 4 1472 48 ConstPointerToArray< LVecBase2d >::get_ref_count 0 1 39 0
72
inline int ConstPointerToArray< LVecBase2d >::get_ref_count(void) const;

796 18 get_node_ref_count 0 4 1472 53 ConstPointerToArray< LVecBase2d >::get_node_ref_count 0 1 40 0
77
inline int ConstPointerToArray< LVecBase2d >::get_node_ref_count(void) const;

797 5 count 0 4 1472 40 ConstPointerToArray< LVecBase2d >::count 0 1 41 0
97
inline unsigned long long int ConstPointerToArray< LVecBase2d >::count(LVecBase2d const &) const;

798 13 __getbuffer__ 0 4 1472 48 ConstPointerToArray< LVecBase2d >::__getbuffer__ 0 1 42 0
103
int ConstPointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

799 17 __releasebuffer__ 0 4 1472 52 ConstPointerToArray< LVecBase2d >::__releasebuffer__ 0 1 43 0
97
void ConstPointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

800 20 ~ConstPointerToArray 0 4 1472 55 ConstPointerToArray< LVecBase2d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2d >::~ConstPointerToArray(void);

801 5 clear 0 4 1477 60 PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear 0 1 59 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear(void);

802 6 output 0 4 1477 61 PointerToBase< ReferenceCountedVector< LVecBase2f > >::output 0 1 60 0
92
void PointerToBase< ReferenceCountedVector< LVecBase2f > >::output(std::ostream &out) const;

803 19 ~PointerToArrayBase 0 4 1476 53 PointerToArrayBase< LVecBase2f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2f >::~PointerToArrayBase(void);

804 19 ConstPointerToArray 0 4 1475 54 ConstPointerToArray< LVecBase2f >::ConstPointerToArray 0 2 46 47 0
214
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PointerToArray< LVecBase2f > const &copy);
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(ConstPointerToArray< LVecBase2f > const &copy);

805 5 clear 0 4 1475 40 ConstPointerToArray< LVecBase2f >::clear 0 1 48 0
59
inline void ConstPointerToArray< LVecBase2f >::clear(void);

806 4 size 0 4 1475 39 ConstPointerToArray< LVecBase2f >::size 0 1 49 0
82
inline unsigned long long int ConstPointerToArray< LVecBase2f >::size(void) const;

807 11 get_element 0 4 1475 46 ConstPointerToArray< LVecBase2f >::get_element 0 1 50 0
104
inline LVecBase2f const &ConstPointerToArray< LVecBase2f >::get_element(unsigned long long int n) const;

808 11 __getitem__ 0 4 1475 46 ConstPointerToArray< LVecBase2f >::__getitem__ 0 1 51 0
97
LVecBase2f const &ConstPointerToArray< LVecBase2f >::__getitem__(unsigned long long int n) const;

809 8 get_data 0 4 1475 43 ConstPointerToArray< LVecBase2f >::get_data 0 1 52 0
66
PyObject *ConstPointerToArray< LVecBase2f >::get_data(void) const;

810 11 get_subdata 0 4 1475 46 ConstPointerToArray< LVecBase2f >::get_subdata 0 1 53 0
119
PyObject *ConstPointerToArray< LVecBase2f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

811 13 get_ref_count 0 4 1475 48 ConstPointerToArray< LVecBase2f >::get_ref_count 0 1 54 0
72
inline int ConstPointerToArray< LVecBase2f >::get_ref_count(void) const;

812 18 get_node_ref_count 0 4 1475 53 ConstPointerToArray< LVecBase2f >::get_node_ref_count 0 1 55 0
77
inline int ConstPointerToArray< LVecBase2f >::get_node_ref_count(void) const;

813 5 count 0 4 1475 40 ConstPointerToArray< LVecBase2f >::count 0 1 56 0
97
inline unsigned long long int ConstPointerToArray< LVecBase2f >::count(LVecBase2f const &) const;

814 13 __getbuffer__ 0 4 1475 48 ConstPointerToArray< LVecBase2f >::__getbuffer__ 0 1 57 0
103
int ConstPointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

815 17 __releasebuffer__ 0 4 1475 52 ConstPointerToArray< LVecBase2f >::__releasebuffer__ 0 1 58 0
97
void ConstPointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

816 20 ~ConstPointerToArray 0 4 1475 55 ConstPointerToArray< LVecBase2f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2f >::~ConstPointerToArray(void);

817 5 clear 0 4 1480 60 PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear 0 1 74 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear(void);

818 6 output 0 4 1480 61 PointerToBase< ReferenceCountedVector< LVecBase2i > >::output 0 1 75 0
92
void PointerToBase< ReferenceCountedVector< LVecBase2i > >::output(std::ostream &out) const;

819 19 ~PointerToArrayBase 0 4 1479 53 PointerToArrayBase< LVecBase2i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2i >::~PointerToArrayBase(void);

820 19 ConstPointerToArray 0 4 1478 54 ConstPointerToArray< LVecBase2i >::ConstPointerToArray 0 2 61 62 0
214
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(PointerToArray< LVecBase2i > const &copy);
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(ConstPointerToArray< LVecBase2i > const &copy);

821 5 clear 0 4 1478 40 ConstPointerToArray< LVecBase2i >::clear 0 1 63 0
59
inline void ConstPointerToArray< LVecBase2i >::clear(void);

822 4 size 0 4 1478 39 ConstPointerToArray< LVecBase2i >::size 0 1 64 0
82
inline unsigned long long int ConstPointerToArray< LVecBase2i >::size(void) const;

823 11 get_element 0 4 1478 46 ConstPointerToArray< LVecBase2i >::get_element 0 1 65 0
104
inline LVecBase2i const &ConstPointerToArray< LVecBase2i >::get_element(unsigned long long int n) const;

824 11 __getitem__ 0 4 1478 46 ConstPointerToArray< LVecBase2i >::__getitem__ 0 1 66 0
97
LVecBase2i const &ConstPointerToArray< LVecBase2i >::__getitem__(unsigned long long int n) const;

825 8 get_data 0 4 1478 43 ConstPointerToArray< LVecBase2i >::get_data 0 1 67 0
66
PyObject *ConstPointerToArray< LVecBase2i >::get_data(void) const;

826 11 get_subdata 0 4 1478 46 ConstPointerToArray< LVecBase2i >::get_subdata 0 1 68 0
119
PyObject *ConstPointerToArray< LVecBase2i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

827 13 get_ref_count 0 4 1478 48 ConstPointerToArray< LVecBase2i >::get_ref_count 0 1 69 0
72
inline int ConstPointerToArray< LVecBase2i >::get_ref_count(void) const;

828 18 get_node_ref_count 0 4 1478 53 ConstPointerToArray< LVecBase2i >::get_node_ref_count 0 1 70 0
77
inline int ConstPointerToArray< LVecBase2i >::get_node_ref_count(void) const;

829 5 count 0 4 1478 40 ConstPointerToArray< LVecBase2i >::count 0 1 71 0
97
inline unsigned long long int ConstPointerToArray< LVecBase2i >::count(LVecBase2i const &) const;

830 13 __getbuffer__ 0 4 1478 48 ConstPointerToArray< LVecBase2i >::__getbuffer__ 0 1 72 0
103
int ConstPointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

831 17 __releasebuffer__ 0 4 1478 52 ConstPointerToArray< LVecBase2i >::__releasebuffer__ 0 1 73 0
97
void ConstPointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

832 20 ~ConstPointerToArray 0 4 1478 55 ConstPointerToArray< LVecBase2i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2i >::~ConstPointerToArray(void);

833 5 clear 0 4 1483 60 PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear 0 1 89 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear(void);

834 6 output 0 4 1483 61 PointerToBase< ReferenceCountedVector< LVecBase3d > >::output 0 1 90 0
92
void PointerToBase< ReferenceCountedVector< LVecBase3d > >::output(std::ostream &out) const;

835 19 ~PointerToArrayBase 0 4 1482 53 PointerToArrayBase< LVecBase3d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3d >::~PointerToArrayBase(void);

836 19 ConstPointerToArray 0 4 1481 54 ConstPointerToArray< LVecBase3d >::ConstPointerToArray 0 2 76 77 0
214
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PointerToArray< LVecBase3d > const &copy);
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(ConstPointerToArray< LVecBase3d > const &copy);

837 5 clear 0 4 1481 40 ConstPointerToArray< LVecBase3d >::clear 0 1 78 0
59
inline void ConstPointerToArray< LVecBase3d >::clear(void);

838 4 size 0 4 1481 39 ConstPointerToArray< LVecBase3d >::size 0 1 79 0
82
inline unsigned long long int ConstPointerToArray< LVecBase3d >::size(void) const;

839 11 get_element 0 4 1481 46 ConstPointerToArray< LVecBase3d >::get_element 0 1 80 0
104
inline LVecBase3d const &ConstPointerToArray< LVecBase3d >::get_element(unsigned long long int n) const;

840 11 __getitem__ 0 4 1481 46 ConstPointerToArray< LVecBase3d >::__getitem__ 0 1 81 0
97
LVecBase3d const &ConstPointerToArray< LVecBase3d >::__getitem__(unsigned long long int n) const;

841 8 get_data 0 4 1481 43 ConstPointerToArray< LVecBase3d >::get_data 0 1 82 0
66
PyObject *ConstPointerToArray< LVecBase3d >::get_data(void) const;

842 11 get_subdata 0 4 1481 46 ConstPointerToArray< LVecBase3d >::get_subdata 0 1 83 0
119
PyObject *ConstPointerToArray< LVecBase3d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

843 13 get_ref_count 0 4 1481 48 ConstPointerToArray< LVecBase3d >::get_ref_count 0 1 84 0
72
inline int ConstPointerToArray< LVecBase3d >::get_ref_count(void) const;

844 18 get_node_ref_count 0 4 1481 53 ConstPointerToArray< LVecBase3d >::get_node_ref_count 0 1 85 0
77
inline int ConstPointerToArray< LVecBase3d >::get_node_ref_count(void) const;

845 5 count 0 4 1481 40 ConstPointerToArray< LVecBase3d >::count 0 1 86 0
97
inline unsigned long long int ConstPointerToArray< LVecBase3d >::count(LVecBase3d const &) const;

846 13 __getbuffer__ 0 4 1481 48 ConstPointerToArray< LVecBase3d >::__getbuffer__ 0 1 87 0
103
int ConstPointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

847 17 __releasebuffer__ 0 4 1481 52 ConstPointerToArray< LVecBase3d >::__releasebuffer__ 0 1 88 0
97
void ConstPointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

848 20 ~ConstPointerToArray 0 4 1481 55 ConstPointerToArray< LVecBase3d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3d >::~ConstPointerToArray(void);

849 5 clear 0 4 1486 60 PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear 0 1 104 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear(void);

850 6 output 0 4 1486 61 PointerToBase< ReferenceCountedVector< LVecBase3f > >::output 0 1 105 0
92
void PointerToBase< ReferenceCountedVector< LVecBase3f > >::output(std::ostream &out) const;

851 19 ~PointerToArrayBase 0 4 1485 53 PointerToArrayBase< LVecBase3f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3f >::~PointerToArrayBase(void);

852 19 ConstPointerToArray 0 4 1484 54 ConstPointerToArray< LVecBase3f >::ConstPointerToArray 0 2 91 92 0
214
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PointerToArray< LVecBase3f > const &copy);
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(ConstPointerToArray< LVecBase3f > const &copy);

853 5 clear 0 4 1484 40 ConstPointerToArray< LVecBase3f >::clear 0 1 93 0
59
inline void ConstPointerToArray< LVecBase3f >::clear(void);

854 4 size 0 4 1484 39 ConstPointerToArray< LVecBase3f >::size 0 1 94 0
82
inline unsigned long long int ConstPointerToArray< LVecBase3f >::size(void) const;

855 11 get_element 0 4 1484 46 ConstPointerToArray< LVecBase3f >::get_element 0 1 95 0
104
inline LVecBase3f const &ConstPointerToArray< LVecBase3f >::get_element(unsigned long long int n) const;

856 11 __getitem__ 0 4 1484 46 ConstPointerToArray< LVecBase3f >::__getitem__ 0 1 96 0
97
LVecBase3f const &ConstPointerToArray< LVecBase3f >::__getitem__(unsigned long long int n) const;

857 8 get_data 0 4 1484 43 ConstPointerToArray< LVecBase3f >::get_data 0 1 97 0
66
PyObject *ConstPointerToArray< LVecBase3f >::get_data(void) const;

858 11 get_subdata 0 4 1484 46 ConstPointerToArray< LVecBase3f >::get_subdata 0 1 98 0
119
PyObject *ConstPointerToArray< LVecBase3f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

859 13 get_ref_count 0 4 1484 48 ConstPointerToArray< LVecBase3f >::get_ref_count 0 1 99 0
72
inline int ConstPointerToArray< LVecBase3f >::get_ref_count(void) const;

860 18 get_node_ref_count 0 4 1484 53 ConstPointerToArray< LVecBase3f >::get_node_ref_count 0 1 100 0
77
inline int ConstPointerToArray< LVecBase3f >::get_node_ref_count(void) const;

861 5 count 0 4 1484 40 ConstPointerToArray< LVecBase3f >::count 0 1 101 0
97
inline unsigned long long int ConstPointerToArray< LVecBase3f >::count(LVecBase3f const &) const;

862 13 __getbuffer__ 0 4 1484 48 ConstPointerToArray< LVecBase3f >::__getbuffer__ 0 1 102 0
103
int ConstPointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

863 17 __releasebuffer__ 0 4 1484 52 ConstPointerToArray< LVecBase3f >::__releasebuffer__ 0 1 103 0
97
void ConstPointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

864 20 ~ConstPointerToArray 0 4 1484 55 ConstPointerToArray< LVecBase3f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3f >::~ConstPointerToArray(void);

865 5 clear 0 4 1489 60 PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear 0 1 119 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear(void);

866 6 output 0 4 1489 61 PointerToBase< ReferenceCountedVector< LVecBase3i > >::output 0 1 120 0
92
void PointerToBase< ReferenceCountedVector< LVecBase3i > >::output(std::ostream &out) const;

867 19 ~PointerToArrayBase 0 4 1488 53 PointerToArrayBase< LVecBase3i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3i >::~PointerToArrayBase(void);

868 19 ConstPointerToArray 0 4 1487 54 ConstPointerToArray< LVecBase3i >::ConstPointerToArray 0 2 106 107 0
214
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(PointerToArray< LVecBase3i > const &copy);
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(ConstPointerToArray< LVecBase3i > const &copy);

869 5 clear 0 4 1487 40 ConstPointerToArray< LVecBase3i >::clear 0 1 108 0
59
inline void ConstPointerToArray< LVecBase3i >::clear(void);

870 4 size 0 4 1487 39 ConstPointerToArray< LVecBase3i >::size 0 1 109 0
82
inline unsigned long long int ConstPointerToArray< LVecBase3i >::size(void) const;

871 11 get_element 0 4 1487 46 ConstPointerToArray< LVecBase3i >::get_element 0 1 110 0
104
inline LVecBase3i const &ConstPointerToArray< LVecBase3i >::get_element(unsigned long long int n) const;

872 11 __getitem__ 0 4 1487 46 ConstPointerToArray< LVecBase3i >::__getitem__ 0 1 111 0
97
LVecBase3i const &ConstPointerToArray< LVecBase3i >::__getitem__(unsigned long long int n) const;

873 8 get_data 0 4 1487 43 ConstPointerToArray< LVecBase3i >::get_data 0 1 112 0
66
PyObject *ConstPointerToArray< LVecBase3i >::get_data(void) const;

874 11 get_subdata 0 4 1487 46 ConstPointerToArray< LVecBase3i >::get_subdata 0 1 113 0
119
PyObject *ConstPointerToArray< LVecBase3i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

875 13 get_ref_count 0 4 1487 48 ConstPointerToArray< LVecBase3i >::get_ref_count 0 1 114 0
72
inline int ConstPointerToArray< LVecBase3i >::get_ref_count(void) const;

876 18 get_node_ref_count 0 4 1487 53 ConstPointerToArray< LVecBase3i >::get_node_ref_count 0 1 115 0
77
inline int ConstPointerToArray< LVecBase3i >::get_node_ref_count(void) const;

877 5 count 0 4 1487 40 ConstPointerToArray< LVecBase3i >::count 0 1 116 0
97
inline unsigned long long int ConstPointerToArray< LVecBase3i >::count(LVecBase3i const &) const;

878 13 __getbuffer__ 0 4 1487 48 ConstPointerToArray< LVecBase3i >::__getbuffer__ 0 1 117 0
103
int ConstPointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

879 17 __releasebuffer__ 0 4 1487 52 ConstPointerToArray< LVecBase3i >::__releasebuffer__ 0 1 118 0
97
void ConstPointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

880 20 ~ConstPointerToArray 0 4 1487 55 ConstPointerToArray< LVecBase3i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3i >::~ConstPointerToArray(void);

881 5 clear 0 4 1492 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear 0 1 134 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear(void);

882 6 output 0 4 1492 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output 0 1 135 0
100
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output(std::ostream &out) const;

883 19 ~PointerToArrayBase 0 4 1491 61 PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase(void);

884 19 ConstPointerToArray 0 4 1490 62 ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray 0 2 121 122 0
246
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4d > const &copy);

885 5 clear 0 4 1490 48 ConstPointerToArray< UnalignedLMatrix4d >::clear 0 1 123 0
67
inline void ConstPointerToArray< UnalignedLMatrix4d >::clear(void);

886 4 size 0 4 1490 47 ConstPointerToArray< UnalignedLMatrix4d >::size 0 1 124 0
90
inline unsigned long long int ConstPointerToArray< UnalignedLMatrix4d >::size(void) const;

887 11 get_element 0 4 1490 54 ConstPointerToArray< UnalignedLMatrix4d >::get_element 0 1 125 0
120
inline UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::get_element(unsigned long long int n) const;

888 11 __getitem__ 0 4 1490 54 ConstPointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 126 0
113
UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned long long int n) const;

889 8 get_data 0 4 1490 51 ConstPointerToArray< UnalignedLMatrix4d >::get_data 0 1 127 0
74
PyObject *ConstPointerToArray< UnalignedLMatrix4d >::get_data(void) const;

890 11 get_subdata 0 4 1490 54 ConstPointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 128 0
127
PyObject *ConstPointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

891 13 get_ref_count 0 4 1490 56 ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 129 0
80
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

892 18 get_node_ref_count 0 4 1490 61 ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 130 0
85
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

893 5 count 0 4 1490 48 ConstPointerToArray< UnalignedLMatrix4d >::count 0 1 131 0
113
inline unsigned long long int ConstPointerToArray< UnalignedLMatrix4d >::count(UnalignedLMatrix4d const &) const;

894 13 __getbuffer__ 0 4 1490 56 ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 132 0
111
int ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

895 17 __releasebuffer__ 0 4 1490 60 ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 133 0
105
void ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

896 20 ~ConstPointerToArray 0 4 1490 63 ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray(void);

897 5 clear 0 4 1495 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear 0 1 149 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear(void);

898 6 output 0 4 1495 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output 0 1 150 0
100
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output(std::ostream &out) const;

899 19 ~PointerToArrayBase 0 4 1494 61 PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase(void);

900 19 ConstPointerToArray 0 4 1493 62 ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray 0 2 136 137 0
246
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4f > const &copy);

901 5 clear 0 4 1493 48 ConstPointerToArray< UnalignedLMatrix4f >::clear 0 1 138 0
67
inline void ConstPointerToArray< UnalignedLMatrix4f >::clear(void);

902 4 size 0 4 1493 47 ConstPointerToArray< UnalignedLMatrix4f >::size 0 1 139 0
90
inline unsigned long long int ConstPointerToArray< UnalignedLMatrix4f >::size(void) const;

903 11 get_element 0 4 1493 54 ConstPointerToArray< UnalignedLMatrix4f >::get_element 0 1 140 0
120
inline UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::get_element(unsigned long long int n) const;

904 11 __getitem__ 0 4 1493 54 ConstPointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 141 0
113
UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned long long int n) const;

905 8 get_data 0 4 1493 51 ConstPointerToArray< UnalignedLMatrix4f >::get_data 0 1 142 0
74
PyObject *ConstPointerToArray< UnalignedLMatrix4f >::get_data(void) const;

906 11 get_subdata 0 4 1493 54 ConstPointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 143 0
127
PyObject *ConstPointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

907 13 get_ref_count 0 4 1493 56 ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 144 0
80
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

908 18 get_node_ref_count 0 4 1493 61 ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 145 0
85
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

909 5 count 0 4 1493 48 ConstPointerToArray< UnalignedLMatrix4f >::count 0 1 146 0
113
inline unsigned long long int ConstPointerToArray< UnalignedLMatrix4f >::count(UnalignedLMatrix4f const &) const;

910 13 __getbuffer__ 0 4 1493 56 ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 147 0
111
int ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

911 17 __releasebuffer__ 0 4 1493 60 ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 148 0
105
void ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

912 20 ~ConstPointerToArray 0 4 1493 63 ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray(void);

913 5 clear 0 4 1498 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear 0 1 164 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear(void);

914 6 output 0 4 1498 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output 0 1 165 0
101
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output(std::ostream &out) const;

915 19 ~PointerToArrayBase 0 4 1497 62 PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase(void);

916 19 ConstPointerToArray 0 4 1496 63 ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray 0 2 151 152 0
250
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4d > const &copy);

917 5 clear 0 4 1496 49 ConstPointerToArray< UnalignedLVecBase4d >::clear 0 1 153 0
68
inline void ConstPointerToArray< UnalignedLVecBase4d >::clear(void);

918 4 size 0 4 1496 48 ConstPointerToArray< UnalignedLVecBase4d >::size 0 1 154 0
91
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4d >::size(void) const;

919 11 get_element 0 4 1496 55 ConstPointerToArray< UnalignedLVecBase4d >::get_element 0 1 155 0
122
inline UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::get_element(unsigned long long int n) const;

920 11 __getitem__ 0 4 1496 55 ConstPointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 156 0
115
UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned long long int n) const;

921 8 get_data 0 4 1496 52 ConstPointerToArray< UnalignedLVecBase4d >::get_data 0 1 157 0
75
PyObject *ConstPointerToArray< UnalignedLVecBase4d >::get_data(void) const;

922 11 get_subdata 0 4 1496 55 ConstPointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 158 0
128
PyObject *ConstPointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

923 13 get_ref_count 0 4 1496 57 ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 159 0
81
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

924 18 get_node_ref_count 0 4 1496 62 ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 160 0
86
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

925 5 count 0 4 1496 49 ConstPointerToArray< UnalignedLVecBase4d >::count 0 1 161 0
115
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4d >::count(UnalignedLVecBase4d const &) const;

926 13 __getbuffer__ 0 4 1496 57 ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 162 0
112
int ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

927 17 __releasebuffer__ 0 4 1496 61 ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 163 0
106
void ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

928 20 ~ConstPointerToArray 0 4 1496 64 ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray(void);

929 5 clear 0 4 1501 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear 0 1 179 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear(void);

930 6 output 0 4 1501 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output 0 1 180 0
101
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output(std::ostream &out) const;

931 19 ~PointerToArrayBase 0 4 1500 62 PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase(void);

932 19 ConstPointerToArray 0 4 1499 63 ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray 0 2 166 167 0
250
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4f > const &copy);

933 5 clear 0 4 1499 49 ConstPointerToArray< UnalignedLVecBase4f >::clear 0 1 168 0
68
inline void ConstPointerToArray< UnalignedLVecBase4f >::clear(void);

934 4 size 0 4 1499 48 ConstPointerToArray< UnalignedLVecBase4f >::size 0 1 169 0
91
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4f >::size(void) const;

935 11 get_element 0 4 1499 55 ConstPointerToArray< UnalignedLVecBase4f >::get_element 0 1 170 0
122
inline UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::get_element(unsigned long long int n) const;

936 11 __getitem__ 0 4 1499 55 ConstPointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 171 0
115
UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned long long int n) const;

937 8 get_data 0 4 1499 52 ConstPointerToArray< UnalignedLVecBase4f >::get_data 0 1 172 0
75
PyObject *ConstPointerToArray< UnalignedLVecBase4f >::get_data(void) const;

938 11 get_subdata 0 4 1499 55 ConstPointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 173 0
128
PyObject *ConstPointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

939 13 get_ref_count 0 4 1499 57 ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 174 0
81
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

940 18 get_node_ref_count 0 4 1499 62 ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 175 0
86
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

941 5 count 0 4 1499 49 ConstPointerToArray< UnalignedLVecBase4f >::count 0 1 176 0
115
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4f >::count(UnalignedLVecBase4f const &) const;

942 13 __getbuffer__ 0 4 1499 57 ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 177 0
112
int ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

943 17 __releasebuffer__ 0 4 1499 61 ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 178 0
106
void ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

944 20 ~ConstPointerToArray 0 4 1499 64 ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray(void);

945 5 clear 0 4 1504 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear 0 1 194 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear(void);

946 6 output 0 4 1504 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output 0 1 195 0
101
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output(std::ostream &out) const;

947 19 ~PointerToArrayBase 0 4 1503 62 PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase(void);

948 19 ConstPointerToArray 0 4 1502 63 ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray 0 2 181 182 0
250
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4i > const &copy);

949 5 clear 0 4 1502 49 ConstPointerToArray< UnalignedLVecBase4i >::clear 0 1 183 0
68
inline void ConstPointerToArray< UnalignedLVecBase4i >::clear(void);

950 4 size 0 4 1502 48 ConstPointerToArray< UnalignedLVecBase4i >::size 0 1 184 0
91
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4i >::size(void) const;

951 11 get_element 0 4 1502 55 ConstPointerToArray< UnalignedLVecBase4i >::get_element 0 1 185 0
122
inline UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::get_element(unsigned long long int n) const;

952 11 __getitem__ 0 4 1502 55 ConstPointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 186 0
115
UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned long long int n) const;

953 8 get_data 0 4 1502 52 ConstPointerToArray< UnalignedLVecBase4i >::get_data 0 1 187 0
75
PyObject *ConstPointerToArray< UnalignedLVecBase4i >::get_data(void) const;

954 11 get_subdata 0 4 1502 55 ConstPointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 188 0
128
PyObject *ConstPointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

955 13 get_ref_count 0 4 1502 57 ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 189 0
81
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

956 18 get_node_ref_count 0 4 1502 62 ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 190 0
86
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

957 5 count 0 4 1502 49 ConstPointerToArray< UnalignedLVecBase4i >::count 0 1 191 0
115
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4i >::count(UnalignedLVecBase4i const &) const;

958 13 __getbuffer__ 0 4 1502 57 ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 192 0
112
int ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

959 17 __releasebuffer__ 0 4 1502 61 ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 193 0
106
void ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

960 20 ~ConstPointerToArray 0 4 1502 64 ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray(void);

961 14 PointerToArray 0 4 1505 43 PointerToArray< LMatrix3d >::PointerToArray 0 3 196 197 198 0
294
inline PointerToArray< LMatrix3d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LMatrix3d const *)(0))));
inline PointerToArray< LMatrix3d >::PointerToArray(PointerToArray< LMatrix3d > const &copy);
PointerToArray< LMatrix3d >::PointerToArray(PyObject *self, PyObject *source);

962 11 empty_array 0 4 1505 40 PointerToArray< LMatrix3d >::empty_array 0 1 199 0
180
static inline PointerToArray< LMatrix3d > PointerToArray< LMatrix3d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LMatrix3d const *)(0))));

963 5 clear 0 4 1505 34 PointerToArray< LMatrix3d >::clear 0 1 200 0
53
inline void PointerToArray< LMatrix3d >::clear(void);

964 4 size 0 4 1505 33 PointerToArray< LMatrix3d >::size 0 1 201 0
76
inline unsigned long long int PointerToArray< LMatrix3d >::size(void) const;

965 9 push_back 0 4 1505 38 PointerToArray< LMatrix3d >::push_back 0 1 202 0
71
inline void PointerToArray< LMatrix3d >::push_back(LMatrix3d const &x);

966 8 pop_back 0 4 1505 37 PointerToArray< LMatrix3d >::pop_back 0 1 203 0
56
inline void PointerToArray< LMatrix3d >::pop_back(void);

967 11 get_element 0 4 1505 40 PointerToArray< LMatrix3d >::get_element 0 1 204 0
97
inline LMatrix3d const &PointerToArray< LMatrix3d >::get_element(unsigned long long int n) const;

968 11 set_element 0 4 1505 40 PointerToArray< LMatrix3d >::set_element 0 1 205 0
103
inline void PointerToArray< LMatrix3d >::set_element(unsigned long long int n, LMatrix3d const &value);

969 11 __getitem__ 0 4 1505 40 PointerToArray< LMatrix3d >::__getitem__ 0 1 206 0
90
LMatrix3d const &PointerToArray< LMatrix3d >::__getitem__(unsigned long long int n) const;

970 11 __setitem__ 0 4 1505 40 PointerToArray< LMatrix3d >::__setitem__ 0 1 207 0
96
void PointerToArray< LMatrix3d >::__setitem__(unsigned long long int n, LMatrix3d const &value);

971 8 get_data 0 4 1505 37 PointerToArray< LMatrix3d >::get_data 0 1 208 0
60
PyObject *PointerToArray< LMatrix3d >::get_data(void) const;

972 8 set_data 0 4 1505 37 PointerToArray< LMatrix3d >::set_data 0 1 209 0
59
void PointerToArray< LMatrix3d >::set_data(PyObject *data);

973 11 get_subdata 0 4 1505 40 PointerToArray< LMatrix3d >::get_subdata 0 1 210 0
113
PyObject *PointerToArray< LMatrix3d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

974 11 set_subdata 0 4 1505 40 PointerToArray< LMatrix3d >::set_subdata 0 1 211 0
148
inline void PointerToArray< LMatrix3d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

975 13 get_ref_count 0 4 1505 42 PointerToArray< LMatrix3d >::get_ref_count 0 1 212 0
66
inline int PointerToArray< LMatrix3d >::get_ref_count(void) const;

976 18 get_node_ref_count 0 4 1505 47 PointerToArray< LMatrix3d >::get_node_ref_count 0 1 213 0
71
inline int PointerToArray< LMatrix3d >::get_node_ref_count(void) const;

977 5 count 0 4 1505 34 PointerToArray< LMatrix3d >::count 0 1 214 0
90
inline unsigned long long int PointerToArray< LMatrix3d >::count(LMatrix3d const &) const;

978 13 __getbuffer__ 0 4 1505 42 PointerToArray< LMatrix3d >::__getbuffer__ 0 1 215 0
91
int PointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

979 17 __releasebuffer__ 0 4 1505 46 PointerToArray< LMatrix3d >::__releasebuffer__ 0 1 216 0
91
void PointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

980 15 ~PointerToArray 0 4 1505 44 PointerToArray< LMatrix3d >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3d >::~PointerToArray(void);

981 14 PointerToArray 0 4 1506 43 PointerToArray< LMatrix3f >::PointerToArray 0 3 217 218 219 0
294
inline PointerToArray< LMatrix3f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LMatrix3f const *)(0))));
inline PointerToArray< LMatrix3f >::PointerToArray(PointerToArray< LMatrix3f > const &copy);
PointerToArray< LMatrix3f >::PointerToArray(PyObject *self, PyObject *source);

982 11 empty_array 0 4 1506 40 PointerToArray< LMatrix3f >::empty_array 0 1 220 0
180
static inline PointerToArray< LMatrix3f > PointerToArray< LMatrix3f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LMatrix3f const *)(0))));

983 5 clear 0 4 1506 34 PointerToArray< LMatrix3f >::clear 0 1 221 0
53
inline void PointerToArray< LMatrix3f >::clear(void);

984 4 size 0 4 1506 33 PointerToArray< LMatrix3f >::size 0 1 222 0
76
inline unsigned long long int PointerToArray< LMatrix3f >::size(void) const;

985 9 push_back 0 4 1506 38 PointerToArray< LMatrix3f >::push_back 0 1 223 0
71
inline void PointerToArray< LMatrix3f >::push_back(LMatrix3f const &x);

986 8 pop_back 0 4 1506 37 PointerToArray< LMatrix3f >::pop_back 0 1 224 0
56
inline void PointerToArray< LMatrix3f >::pop_back(void);

987 11 get_element 0 4 1506 40 PointerToArray< LMatrix3f >::get_element 0 1 225 0
97
inline LMatrix3f const &PointerToArray< LMatrix3f >::get_element(unsigned long long int n) const;

988 11 set_element 0 4 1506 40 PointerToArray< LMatrix3f >::set_element 0 1 226 0
103
inline void PointerToArray< LMatrix3f >::set_element(unsigned long long int n, LMatrix3f const &value);

989 11 __getitem__ 0 4 1506 40 PointerToArray< LMatrix3f >::__getitem__ 0 1 227 0
90
LMatrix3f const &PointerToArray< LMatrix3f >::__getitem__(unsigned long long int n) const;

990 11 __setitem__ 0 4 1506 40 PointerToArray< LMatrix3f >::__setitem__ 0 1 228 0
96
void PointerToArray< LMatrix3f >::__setitem__(unsigned long long int n, LMatrix3f const &value);

991 8 get_data 0 4 1506 37 PointerToArray< LMatrix3f >::get_data 0 1 229 0
60
PyObject *PointerToArray< LMatrix3f >::get_data(void) const;

992 8 set_data 0 4 1506 37 PointerToArray< LMatrix3f >::set_data 0 1 230 0
59
void PointerToArray< LMatrix3f >::set_data(PyObject *data);

993 11 get_subdata 0 4 1506 40 PointerToArray< LMatrix3f >::get_subdata 0 1 231 0
113
PyObject *PointerToArray< LMatrix3f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

994 11 set_subdata 0 4 1506 40 PointerToArray< LMatrix3f >::set_subdata 0 1 232 0
148
inline void PointerToArray< LMatrix3f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

995 13 get_ref_count 0 4 1506 42 PointerToArray< LMatrix3f >::get_ref_count 0 1 233 0
66
inline int PointerToArray< LMatrix3f >::get_ref_count(void) const;

996 18 get_node_ref_count 0 4 1506 47 PointerToArray< LMatrix3f >::get_node_ref_count 0 1 234 0
71
inline int PointerToArray< LMatrix3f >::get_node_ref_count(void) const;

997 5 count 0 4 1506 34 PointerToArray< LMatrix3f >::count 0 1 235 0
90
inline unsigned long long int PointerToArray< LMatrix3f >::count(LMatrix3f const &) const;

998 13 __getbuffer__ 0 4 1506 42 PointerToArray< LMatrix3f >::__getbuffer__ 0 1 236 0
91
int PointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

999 17 __releasebuffer__ 0 4 1506 46 PointerToArray< LMatrix3f >::__releasebuffer__ 0 1 237 0
91
void PointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1000 15 ~PointerToArray 0 4 1506 44 PointerToArray< LMatrix3f >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3f >::~PointerToArray(void);

1001 14 PointerToArray 0 4 1507 44 PointerToArray< LVecBase2d >::PointerToArray 0 3 238 239 240 0
299
inline PointerToArray< LVecBase2d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase2d const *)(0))));
inline PointerToArray< LVecBase2d >::PointerToArray(PointerToArray< LVecBase2d > const &copy);
PointerToArray< LVecBase2d >::PointerToArray(PyObject *self, PyObject *source);

1002 11 empty_array 0 4 1507 41 PointerToArray< LVecBase2d >::empty_array 0 1 241 0
183
static inline PointerToArray< LVecBase2d > PointerToArray< LVecBase2d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase2d const *)(0))));

1003 5 clear 0 4 1507 35 PointerToArray< LVecBase2d >::clear 0 1 242 0
54
inline void PointerToArray< LVecBase2d >::clear(void);

1004 4 size 0 4 1507 34 PointerToArray< LVecBase2d >::size 0 1 243 0
77
inline unsigned long long int PointerToArray< LVecBase2d >::size(void) const;

1005 9 push_back 0 4 1507 39 PointerToArray< LVecBase2d >::push_back 0 1 244 0
73
inline void PointerToArray< LVecBase2d >::push_back(LVecBase2d const &x);

1006 8 pop_back 0 4 1507 38 PointerToArray< LVecBase2d >::pop_back 0 1 245 0
57
inline void PointerToArray< LVecBase2d >::pop_back(void);

1007 11 get_element 0 4 1507 41 PointerToArray< LVecBase2d >::get_element 0 1 246 0
99
inline LVecBase2d const &PointerToArray< LVecBase2d >::get_element(unsigned long long int n) const;

1008 11 set_element 0 4 1507 41 PointerToArray< LVecBase2d >::set_element 0 1 247 0
105
inline void PointerToArray< LVecBase2d >::set_element(unsigned long long int n, LVecBase2d const &value);

1009 11 __getitem__ 0 4 1507 41 PointerToArray< LVecBase2d >::__getitem__ 0 1 248 0
92
LVecBase2d const &PointerToArray< LVecBase2d >::__getitem__(unsigned long long int n) const;

1010 11 __setitem__ 0 4 1507 41 PointerToArray< LVecBase2d >::__setitem__ 0 1 249 0
98
void PointerToArray< LVecBase2d >::__setitem__(unsigned long long int n, LVecBase2d const &value);

1011 8 get_data 0 4 1507 38 PointerToArray< LVecBase2d >::get_data 0 1 250 0
61
PyObject *PointerToArray< LVecBase2d >::get_data(void) const;

1012 8 set_data 0 4 1507 38 PointerToArray< LVecBase2d >::set_data 0 1 251 0
60
void PointerToArray< LVecBase2d >::set_data(PyObject *data);

1013 11 get_subdata 0 4 1507 41 PointerToArray< LVecBase2d >::get_subdata 0 1 252 0
114
PyObject *PointerToArray< LVecBase2d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1014 11 set_subdata 0 4 1507 41 PointerToArray< LVecBase2d >::set_subdata 0 1 253 0
149
inline void PointerToArray< LVecBase2d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1015 13 get_ref_count 0 4 1507 43 PointerToArray< LVecBase2d >::get_ref_count 0 1 254 0
67
inline int PointerToArray< LVecBase2d >::get_ref_count(void) const;

1016 18 get_node_ref_count 0 4 1507 48 PointerToArray< LVecBase2d >::get_node_ref_count 0 1 255 0
72
inline int PointerToArray< LVecBase2d >::get_node_ref_count(void) const;

1017 5 count 0 4 1507 35 PointerToArray< LVecBase2d >::count 0 1 256 0
92
inline unsigned long long int PointerToArray< LVecBase2d >::count(LVecBase2d const &) const;

1018 13 __getbuffer__ 0 4 1507 43 PointerToArray< LVecBase2d >::__getbuffer__ 0 1 257 0
92
int PointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1019 17 __releasebuffer__ 0 4 1507 47 PointerToArray< LVecBase2d >::__releasebuffer__ 0 1 258 0
92
void PointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1020 15 ~PointerToArray 0 4 1507 45 PointerToArray< LVecBase2d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2d >::~PointerToArray(void);

1021 14 PointerToArray 0 4 1508 44 PointerToArray< LVecBase2f >::PointerToArray 0 3 259 260 261 0
299
inline PointerToArray< LVecBase2f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase2f const *)(0))));
inline PointerToArray< LVecBase2f >::PointerToArray(PointerToArray< LVecBase2f > const &copy);
PointerToArray< LVecBase2f >::PointerToArray(PyObject *self, PyObject *source);

1022 11 empty_array 0 4 1508 41 PointerToArray< LVecBase2f >::empty_array 0 1 262 0
183
static inline PointerToArray< LVecBase2f > PointerToArray< LVecBase2f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase2f const *)(0))));

1023 5 clear 0 4 1508 35 PointerToArray< LVecBase2f >::clear 0 1 263 0
54
inline void PointerToArray< LVecBase2f >::clear(void);

1024 4 size 0 4 1508 34 PointerToArray< LVecBase2f >::size 0 1 264 0
77
inline unsigned long long int PointerToArray< LVecBase2f >::size(void) const;

1025 9 push_back 0 4 1508 39 PointerToArray< LVecBase2f >::push_back 0 1 265 0
73
inline void PointerToArray< LVecBase2f >::push_back(LVecBase2f const &x);

1026 8 pop_back 0 4 1508 38 PointerToArray< LVecBase2f >::pop_back 0 1 266 0
57
inline void PointerToArray< LVecBase2f >::pop_back(void);

1027 11 get_element 0 4 1508 41 PointerToArray< LVecBase2f >::get_element 0 1 267 0
99
inline LVecBase2f const &PointerToArray< LVecBase2f >::get_element(unsigned long long int n) const;

1028 11 set_element 0 4 1508 41 PointerToArray< LVecBase2f >::set_element 0 1 268 0
105
inline void PointerToArray< LVecBase2f >::set_element(unsigned long long int n, LVecBase2f const &value);

1029 11 __getitem__ 0 4 1508 41 PointerToArray< LVecBase2f >::__getitem__ 0 1 269 0
92
LVecBase2f const &PointerToArray< LVecBase2f >::__getitem__(unsigned long long int n) const;

1030 11 __setitem__ 0 4 1508 41 PointerToArray< LVecBase2f >::__setitem__ 0 1 270 0
98
void PointerToArray< LVecBase2f >::__setitem__(unsigned long long int n, LVecBase2f const &value);

1031 8 get_data 0 4 1508 38 PointerToArray< LVecBase2f >::get_data 0 1 271 0
61
PyObject *PointerToArray< LVecBase2f >::get_data(void) const;

1032 8 set_data 0 4 1508 38 PointerToArray< LVecBase2f >::set_data 0 1 272 0
60
void PointerToArray< LVecBase2f >::set_data(PyObject *data);

1033 11 get_subdata 0 4 1508 41 PointerToArray< LVecBase2f >::get_subdata 0 1 273 0
114
PyObject *PointerToArray< LVecBase2f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1034 11 set_subdata 0 4 1508 41 PointerToArray< LVecBase2f >::set_subdata 0 1 274 0
149
inline void PointerToArray< LVecBase2f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1035 13 get_ref_count 0 4 1508 43 PointerToArray< LVecBase2f >::get_ref_count 0 1 275 0
67
inline int PointerToArray< LVecBase2f >::get_ref_count(void) const;

1036 18 get_node_ref_count 0 4 1508 48 PointerToArray< LVecBase2f >::get_node_ref_count 0 1 276 0
72
inline int PointerToArray< LVecBase2f >::get_node_ref_count(void) const;

1037 5 count 0 4 1508 35 PointerToArray< LVecBase2f >::count 0 1 277 0
92
inline unsigned long long int PointerToArray< LVecBase2f >::count(LVecBase2f const &) const;

1038 13 __getbuffer__ 0 4 1508 43 PointerToArray< LVecBase2f >::__getbuffer__ 0 1 278 0
92
int PointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1039 17 __releasebuffer__ 0 4 1508 47 PointerToArray< LVecBase2f >::__releasebuffer__ 0 1 279 0
92
void PointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1040 15 ~PointerToArray 0 4 1508 45 PointerToArray< LVecBase2f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2f >::~PointerToArray(void);

1041 14 PointerToArray 0 4 1509 44 PointerToArray< LVecBase2i >::PointerToArray 0 3 280 281 282 0
299
inline PointerToArray< LVecBase2i >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase2i const *)(0))));
inline PointerToArray< LVecBase2i >::PointerToArray(PointerToArray< LVecBase2i > const &copy);
PointerToArray< LVecBase2i >::PointerToArray(PyObject *self, PyObject *source);

1042 11 empty_array 0 4 1509 41 PointerToArray< LVecBase2i >::empty_array 0 1 283 0
183
static inline PointerToArray< LVecBase2i > PointerToArray< LVecBase2i >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase2i const *)(0))));

1043 5 clear 0 4 1509 35 PointerToArray< LVecBase2i >::clear 0 1 284 0
54
inline void PointerToArray< LVecBase2i >::clear(void);

1044 4 size 0 4 1509 34 PointerToArray< LVecBase2i >::size 0 1 285 0
77
inline unsigned long long int PointerToArray< LVecBase2i >::size(void) const;

1045 9 push_back 0 4 1509 39 PointerToArray< LVecBase2i >::push_back 0 1 286 0
73
inline void PointerToArray< LVecBase2i >::push_back(LVecBase2i const &x);

1046 8 pop_back 0 4 1509 38 PointerToArray< LVecBase2i >::pop_back 0 1 287 0
57
inline void PointerToArray< LVecBase2i >::pop_back(void);

1047 11 get_element 0 4 1509 41 PointerToArray< LVecBase2i >::get_element 0 1 288 0
99
inline LVecBase2i const &PointerToArray< LVecBase2i >::get_element(unsigned long long int n) const;

1048 11 set_element 0 4 1509 41 PointerToArray< LVecBase2i >::set_element 0 1 289 0
105
inline void PointerToArray< LVecBase2i >::set_element(unsigned long long int n, LVecBase2i const &value);

1049 11 __getitem__ 0 4 1509 41 PointerToArray< LVecBase2i >::__getitem__ 0 1 290 0
92
LVecBase2i const &PointerToArray< LVecBase2i >::__getitem__(unsigned long long int n) const;

1050 11 __setitem__ 0 4 1509 41 PointerToArray< LVecBase2i >::__setitem__ 0 1 291 0
98
void PointerToArray< LVecBase2i >::__setitem__(unsigned long long int n, LVecBase2i const &value);

1051 8 get_data 0 4 1509 38 PointerToArray< LVecBase2i >::get_data 0 1 292 0
61
PyObject *PointerToArray< LVecBase2i >::get_data(void) const;

1052 8 set_data 0 4 1509 38 PointerToArray< LVecBase2i >::set_data 0 1 293 0
60
void PointerToArray< LVecBase2i >::set_data(PyObject *data);

1053 11 get_subdata 0 4 1509 41 PointerToArray< LVecBase2i >::get_subdata 0 1 294 0
114
PyObject *PointerToArray< LVecBase2i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1054 11 set_subdata 0 4 1509 41 PointerToArray< LVecBase2i >::set_subdata 0 1 295 0
149
inline void PointerToArray< LVecBase2i >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1055 13 get_ref_count 0 4 1509 43 PointerToArray< LVecBase2i >::get_ref_count 0 1 296 0
67
inline int PointerToArray< LVecBase2i >::get_ref_count(void) const;

1056 18 get_node_ref_count 0 4 1509 48 PointerToArray< LVecBase2i >::get_node_ref_count 0 1 297 0
72
inline int PointerToArray< LVecBase2i >::get_node_ref_count(void) const;

1057 5 count 0 4 1509 35 PointerToArray< LVecBase2i >::count 0 1 298 0
92
inline unsigned long long int PointerToArray< LVecBase2i >::count(LVecBase2i const &) const;

1058 13 __getbuffer__ 0 4 1509 43 PointerToArray< LVecBase2i >::__getbuffer__ 0 1 299 0
92
int PointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1059 17 __releasebuffer__ 0 4 1509 47 PointerToArray< LVecBase2i >::__releasebuffer__ 0 1 300 0
92
void PointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1060 15 ~PointerToArray 0 4 1509 45 PointerToArray< LVecBase2i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2i >::~PointerToArray(void);

1061 14 PointerToArray 0 4 1510 44 PointerToArray< LVecBase3d >::PointerToArray 0 3 301 302 303 0
299
inline PointerToArray< LVecBase3d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase3d const *)(0))));
inline PointerToArray< LVecBase3d >::PointerToArray(PointerToArray< LVecBase3d > const &copy);
PointerToArray< LVecBase3d >::PointerToArray(PyObject *self, PyObject *source);

1062 11 empty_array 0 4 1510 41 PointerToArray< LVecBase3d >::empty_array 0 1 304 0
183
static inline PointerToArray< LVecBase3d > PointerToArray< LVecBase3d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase3d const *)(0))));

1063 5 clear 0 4 1510 35 PointerToArray< LVecBase3d >::clear 0 1 305 0
54
inline void PointerToArray< LVecBase3d >::clear(void);

1064 4 size 0 4 1510 34 PointerToArray< LVecBase3d >::size 0 1 306 0
77
inline unsigned long long int PointerToArray< LVecBase3d >::size(void) const;

1065 9 push_back 0 4 1510 39 PointerToArray< LVecBase3d >::push_back 0 1 307 0
73
inline void PointerToArray< LVecBase3d >::push_back(LVecBase3d const &x);

1066 8 pop_back 0 4 1510 38 PointerToArray< LVecBase3d >::pop_back 0 1 308 0
57
inline void PointerToArray< LVecBase3d >::pop_back(void);

1067 11 get_element 0 4 1510 41 PointerToArray< LVecBase3d >::get_element 0 1 309 0
99
inline LVecBase3d const &PointerToArray< LVecBase3d >::get_element(unsigned long long int n) const;

1068 11 set_element 0 4 1510 41 PointerToArray< LVecBase3d >::set_element 0 1 310 0
105
inline void PointerToArray< LVecBase3d >::set_element(unsigned long long int n, LVecBase3d const &value);

1069 11 __getitem__ 0 4 1510 41 PointerToArray< LVecBase3d >::__getitem__ 0 1 311 0
92
LVecBase3d const &PointerToArray< LVecBase3d >::__getitem__(unsigned long long int n) const;

1070 11 __setitem__ 0 4 1510 41 PointerToArray< LVecBase3d >::__setitem__ 0 1 312 0
98
void PointerToArray< LVecBase3d >::__setitem__(unsigned long long int n, LVecBase3d const &value);

1071 8 get_data 0 4 1510 38 PointerToArray< LVecBase3d >::get_data 0 1 313 0
61
PyObject *PointerToArray< LVecBase3d >::get_data(void) const;

1072 8 set_data 0 4 1510 38 PointerToArray< LVecBase3d >::set_data 0 1 314 0
60
void PointerToArray< LVecBase3d >::set_data(PyObject *data);

1073 11 get_subdata 0 4 1510 41 PointerToArray< LVecBase3d >::get_subdata 0 1 315 0
114
PyObject *PointerToArray< LVecBase3d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1074 11 set_subdata 0 4 1510 41 PointerToArray< LVecBase3d >::set_subdata 0 1 316 0
149
inline void PointerToArray< LVecBase3d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1075 13 get_ref_count 0 4 1510 43 PointerToArray< LVecBase3d >::get_ref_count 0 1 317 0
67
inline int PointerToArray< LVecBase3d >::get_ref_count(void) const;

1076 18 get_node_ref_count 0 4 1510 48 PointerToArray< LVecBase3d >::get_node_ref_count 0 1 318 0
72
inline int PointerToArray< LVecBase3d >::get_node_ref_count(void) const;

1077 5 count 0 4 1510 35 PointerToArray< LVecBase3d >::count 0 1 319 0
92
inline unsigned long long int PointerToArray< LVecBase3d >::count(LVecBase3d const &) const;

1078 13 __getbuffer__ 0 4 1510 43 PointerToArray< LVecBase3d >::__getbuffer__ 0 1 320 0
92
int PointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1079 17 __releasebuffer__ 0 4 1510 47 PointerToArray< LVecBase3d >::__releasebuffer__ 0 1 321 0
92
void PointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1080 15 ~PointerToArray 0 4 1510 45 PointerToArray< LVecBase3d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3d >::~PointerToArray(void);

1081 14 PointerToArray 0 4 1511 44 PointerToArray< LVecBase3f >::PointerToArray 0 3 322 323 324 0
299
inline PointerToArray< LVecBase3f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase3f const *)(0))));
inline PointerToArray< LVecBase3f >::PointerToArray(PointerToArray< LVecBase3f > const &copy);
PointerToArray< LVecBase3f >::PointerToArray(PyObject *self, PyObject *source);

1082 11 empty_array 0 4 1511 41 PointerToArray< LVecBase3f >::empty_array 0 1 325 0
183
static inline PointerToArray< LVecBase3f > PointerToArray< LVecBase3f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase3f const *)(0))));

1083 5 clear 0 4 1511 35 PointerToArray< LVecBase3f >::clear 0 1 326 0
54
inline void PointerToArray< LVecBase3f >::clear(void);

1084 4 size 0 4 1511 34 PointerToArray< LVecBase3f >::size 0 1 327 0
77
inline unsigned long long int PointerToArray< LVecBase3f >::size(void) const;

1085 9 push_back 0 4 1511 39 PointerToArray< LVecBase3f >::push_back 0 1 328 0
73
inline void PointerToArray< LVecBase3f >::push_back(LVecBase3f const &x);

1086 8 pop_back 0 4 1511 38 PointerToArray< LVecBase3f >::pop_back 0 1 329 0
57
inline void PointerToArray< LVecBase3f >::pop_back(void);

1087 11 get_element 0 4 1511 41 PointerToArray< LVecBase3f >::get_element 0 1 330 0
99
inline LVecBase3f const &PointerToArray< LVecBase3f >::get_element(unsigned long long int n) const;

1088 11 set_element 0 4 1511 41 PointerToArray< LVecBase3f >::set_element 0 1 331 0
105
inline void PointerToArray< LVecBase3f >::set_element(unsigned long long int n, LVecBase3f const &value);

1089 11 __getitem__ 0 4 1511 41 PointerToArray< LVecBase3f >::__getitem__ 0 1 332 0
92
LVecBase3f const &PointerToArray< LVecBase3f >::__getitem__(unsigned long long int n) const;

1090 11 __setitem__ 0 4 1511 41 PointerToArray< LVecBase3f >::__setitem__ 0 1 333 0
98
void PointerToArray< LVecBase3f >::__setitem__(unsigned long long int n, LVecBase3f const &value);

1091 8 get_data 0 4 1511 38 PointerToArray< LVecBase3f >::get_data 0 1 334 0
61
PyObject *PointerToArray< LVecBase3f >::get_data(void) const;

1092 8 set_data 0 4 1511 38 PointerToArray< LVecBase3f >::set_data 0 1 335 0
60
void PointerToArray< LVecBase3f >::set_data(PyObject *data);

1093 11 get_subdata 0 4 1511 41 PointerToArray< LVecBase3f >::get_subdata 0 1 336 0
114
PyObject *PointerToArray< LVecBase3f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1094 11 set_subdata 0 4 1511 41 PointerToArray< LVecBase3f >::set_subdata 0 1 337 0
149
inline void PointerToArray< LVecBase3f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1095 13 get_ref_count 0 4 1511 43 PointerToArray< LVecBase3f >::get_ref_count 0 1 338 0
67
inline int PointerToArray< LVecBase3f >::get_ref_count(void) const;

1096 18 get_node_ref_count 0 4 1511 48 PointerToArray< LVecBase3f >::get_node_ref_count 0 1 339 0
72
inline int PointerToArray< LVecBase3f >::get_node_ref_count(void) const;

1097 5 count 0 4 1511 35 PointerToArray< LVecBase3f >::count 0 1 340 0
92
inline unsigned long long int PointerToArray< LVecBase3f >::count(LVecBase3f const &) const;

1098 13 __getbuffer__ 0 4 1511 43 PointerToArray< LVecBase3f >::__getbuffer__ 0 1 341 0
92
int PointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1099 17 __releasebuffer__ 0 4 1511 47 PointerToArray< LVecBase3f >::__releasebuffer__ 0 1 342 0
92
void PointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1100 15 ~PointerToArray 0 4 1511 45 PointerToArray< LVecBase3f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3f >::~PointerToArray(void);

1101 14 PointerToArray 0 4 1512 44 PointerToArray< LVecBase3i >::PointerToArray 0 3 343 344 345 0
299
inline PointerToArray< LVecBase3i >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase3i const *)(0))));
inline PointerToArray< LVecBase3i >::PointerToArray(PointerToArray< LVecBase3i > const &copy);
PointerToArray< LVecBase3i >::PointerToArray(PyObject *self, PyObject *source);

1102 11 empty_array 0 4 1512 41 PointerToArray< LVecBase3i >::empty_array 0 1 346 0
183
static inline PointerToArray< LVecBase3i > PointerToArray< LVecBase3i >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase3i const *)(0))));

1103 5 clear 0 4 1512 35 PointerToArray< LVecBase3i >::clear 0 1 347 0
54
inline void PointerToArray< LVecBase3i >::clear(void);

1104 4 size 0 4 1512 34 PointerToArray< LVecBase3i >::size 0 1 348 0
77
inline unsigned long long int PointerToArray< LVecBase3i >::size(void) const;

1105 9 push_back 0 4 1512 39 PointerToArray< LVecBase3i >::push_back 0 1 349 0
73
inline void PointerToArray< LVecBase3i >::push_back(LVecBase3i const &x);

1106 8 pop_back 0 4 1512 38 PointerToArray< LVecBase3i >::pop_back 0 1 350 0
57
inline void PointerToArray< LVecBase3i >::pop_back(void);

1107 11 get_element 0 4 1512 41 PointerToArray< LVecBase3i >::get_element 0 1 351 0
99
inline LVecBase3i const &PointerToArray< LVecBase3i >::get_element(unsigned long long int n) const;

1108 11 set_element 0 4 1512 41 PointerToArray< LVecBase3i >::set_element 0 1 352 0
105
inline void PointerToArray< LVecBase3i >::set_element(unsigned long long int n, LVecBase3i const &value);

1109 11 __getitem__ 0 4 1512 41 PointerToArray< LVecBase3i >::__getitem__ 0 1 353 0
92
LVecBase3i const &PointerToArray< LVecBase3i >::__getitem__(unsigned long long int n) const;

1110 11 __setitem__ 0 4 1512 41 PointerToArray< LVecBase3i >::__setitem__ 0 1 354 0
98
void PointerToArray< LVecBase3i >::__setitem__(unsigned long long int n, LVecBase3i const &value);

1111 8 get_data 0 4 1512 38 PointerToArray< LVecBase3i >::get_data 0 1 355 0
61
PyObject *PointerToArray< LVecBase3i >::get_data(void) const;

1112 8 set_data 0 4 1512 38 PointerToArray< LVecBase3i >::set_data 0 1 356 0
60
void PointerToArray< LVecBase3i >::set_data(PyObject *data);

1113 11 get_subdata 0 4 1512 41 PointerToArray< LVecBase3i >::get_subdata 0 1 357 0
114
PyObject *PointerToArray< LVecBase3i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1114 11 set_subdata 0 4 1512 41 PointerToArray< LVecBase3i >::set_subdata 0 1 358 0
149
inline void PointerToArray< LVecBase3i >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1115 13 get_ref_count 0 4 1512 43 PointerToArray< LVecBase3i >::get_ref_count 0 1 359 0
67
inline int PointerToArray< LVecBase3i >::get_ref_count(void) const;

1116 18 get_node_ref_count 0 4 1512 48 PointerToArray< LVecBase3i >::get_node_ref_count 0 1 360 0
72
inline int PointerToArray< LVecBase3i >::get_node_ref_count(void) const;

1117 5 count 0 4 1512 35 PointerToArray< LVecBase3i >::count 0 1 361 0
92
inline unsigned long long int PointerToArray< LVecBase3i >::count(LVecBase3i const &) const;

1118 13 __getbuffer__ 0 4 1512 43 PointerToArray< LVecBase3i >::__getbuffer__ 0 1 362 0
92
int PointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1119 17 __releasebuffer__ 0 4 1512 47 PointerToArray< LVecBase3i >::__releasebuffer__ 0 1 363 0
92
void PointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1120 15 ~PointerToArray 0 4 1512 45 PointerToArray< LVecBase3i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3i >::~PointerToArray(void);

1121 14 PointerToArray 0 4 1513 52 PointerToArray< UnalignedLMatrix4d >::PointerToArray 0 3 364 365 366 0
339
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4d const *)(0))));
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
PointerToArray< UnalignedLMatrix4d >::PointerToArray(PyObject *self, PyObject *source);

1122 11 empty_array 0 4 1513 49 PointerToArray< UnalignedLMatrix4d >::empty_array 0 1 367 0
207
static inline PointerToArray< UnalignedLMatrix4d > PointerToArray< UnalignedLMatrix4d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4d const *)(0))));

1123 5 clear 0 4 1513 43 PointerToArray< UnalignedLMatrix4d >::clear 0 1 368 0
62
inline void PointerToArray< UnalignedLMatrix4d >::clear(void);

1124 4 size 0 4 1513 42 PointerToArray< UnalignedLMatrix4d >::size 0 1 369 0
85
inline unsigned long long int PointerToArray< UnalignedLMatrix4d >::size(void) const;

1125 9 push_back 0 4 1513 47 PointerToArray< UnalignedLMatrix4d >::push_back 0 1 370 0
89
inline void PointerToArray< UnalignedLMatrix4d >::push_back(UnalignedLMatrix4d const &x);

1126 8 pop_back 0 4 1513 46 PointerToArray< UnalignedLMatrix4d >::pop_back 0 1 371 0
65
inline void PointerToArray< UnalignedLMatrix4d >::pop_back(void);

1127 11 get_element 0 4 1513 49 PointerToArray< UnalignedLMatrix4d >::get_element 0 1 372 0
115
inline UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::get_element(unsigned long long int n) const;

1128 11 set_element 0 4 1513 49 PointerToArray< UnalignedLMatrix4d >::set_element 0 1 373 0
121
inline void PointerToArray< UnalignedLMatrix4d >::set_element(unsigned long long int n, UnalignedLMatrix4d const &value);

1129 11 __getitem__ 0 4 1513 49 PointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 374 0
108
UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned long long int n) const;

1130 11 __setitem__ 0 4 1513 49 PointerToArray< UnalignedLMatrix4d >::__setitem__ 0 1 375 0
114
void PointerToArray< UnalignedLMatrix4d >::__setitem__(unsigned long long int n, UnalignedLMatrix4d const &value);

1131 8 get_data 0 4 1513 46 PointerToArray< UnalignedLMatrix4d >::get_data 0 1 376 0
69
PyObject *PointerToArray< UnalignedLMatrix4d >::get_data(void) const;

1132 8 set_data 0 4 1513 46 PointerToArray< UnalignedLMatrix4d >::set_data 0 1 377 0
68
void PointerToArray< UnalignedLMatrix4d >::set_data(PyObject *data);

1133 11 get_subdata 0 4 1513 49 PointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 378 0
122
PyObject *PointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1134 11 set_subdata 0 4 1513 49 PointerToArray< UnalignedLMatrix4d >::set_subdata 0 1 379 0
157
inline void PointerToArray< UnalignedLMatrix4d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1135 13 get_ref_count 0 4 1513 51 PointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 380 0
75
inline int PointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

1136 18 get_node_ref_count 0 4 1513 56 PointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 381 0
80
inline int PointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

1137 5 count 0 4 1513 43 PointerToArray< UnalignedLMatrix4d >::count 0 1 382 0
108
inline unsigned long long int PointerToArray< UnalignedLMatrix4d >::count(UnalignedLMatrix4d const &) const;

1138 13 __getbuffer__ 0 4 1513 51 PointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 383 0
100
int PointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1139 17 __releasebuffer__ 0 4 1513 55 PointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 384 0
100
void PointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1140 15 ~PointerToArray 0 4 1513 53 PointerToArray< UnalignedLMatrix4d >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4d >::~PointerToArray(void);

1141 14 PointerToArray 0 4 1514 52 PointerToArray< UnalignedLMatrix4f >::PointerToArray 0 3 385 386 387 0
339
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4f const *)(0))));
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
PointerToArray< UnalignedLMatrix4f >::PointerToArray(PyObject *self, PyObject *source);

1142 11 empty_array 0 4 1514 49 PointerToArray< UnalignedLMatrix4f >::empty_array 0 1 388 0
207
static inline PointerToArray< UnalignedLMatrix4f > PointerToArray< UnalignedLMatrix4f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4f const *)(0))));

1143 5 clear 0 4 1514 43 PointerToArray< UnalignedLMatrix4f >::clear 0 1 389 0
62
inline void PointerToArray< UnalignedLMatrix4f >::clear(void);

1144 4 size 0 4 1514 42 PointerToArray< UnalignedLMatrix4f >::size 0 1 390 0
85
inline unsigned long long int PointerToArray< UnalignedLMatrix4f >::size(void) const;

1145 9 push_back 0 4 1514 47 PointerToArray< UnalignedLMatrix4f >::push_back 0 1 391 0
89
inline void PointerToArray< UnalignedLMatrix4f >::push_back(UnalignedLMatrix4f const &x);

1146 8 pop_back 0 4 1514 46 PointerToArray< UnalignedLMatrix4f >::pop_back 0 1 392 0
65
inline void PointerToArray< UnalignedLMatrix4f >::pop_back(void);

1147 11 get_element 0 4 1514 49 PointerToArray< UnalignedLMatrix4f >::get_element 0 1 393 0
115
inline UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::get_element(unsigned long long int n) const;

1148 11 set_element 0 4 1514 49 PointerToArray< UnalignedLMatrix4f >::set_element 0 1 394 0
121
inline void PointerToArray< UnalignedLMatrix4f >::set_element(unsigned long long int n, UnalignedLMatrix4f const &value);

1149 11 __getitem__ 0 4 1514 49 PointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 395 0
108
UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned long long int n) const;

1150 11 __setitem__ 0 4 1514 49 PointerToArray< UnalignedLMatrix4f >::__setitem__ 0 1 396 0
114
void PointerToArray< UnalignedLMatrix4f >::__setitem__(unsigned long long int n, UnalignedLMatrix4f const &value);

1151 8 get_data 0 4 1514 46 PointerToArray< UnalignedLMatrix4f >::get_data 0 1 397 0
69
PyObject *PointerToArray< UnalignedLMatrix4f >::get_data(void) const;

1152 8 set_data 0 4 1514 46 PointerToArray< UnalignedLMatrix4f >::set_data 0 1 398 0
68
void PointerToArray< UnalignedLMatrix4f >::set_data(PyObject *data);

1153 11 get_subdata 0 4 1514 49 PointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 399 0
122
PyObject *PointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1154 11 set_subdata 0 4 1514 49 PointerToArray< UnalignedLMatrix4f >::set_subdata 0 1 400 0
157
inline void PointerToArray< UnalignedLMatrix4f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1155 13 get_ref_count 0 4 1514 51 PointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 401 0
75
inline int PointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

1156 18 get_node_ref_count 0 4 1514 56 PointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 402 0
80
inline int PointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

1157 5 count 0 4 1514 43 PointerToArray< UnalignedLMatrix4f >::count 0 1 403 0
108
inline unsigned long long int PointerToArray< UnalignedLMatrix4f >::count(UnalignedLMatrix4f const &) const;

1158 13 __getbuffer__ 0 4 1514 51 PointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 404 0
100
int PointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1159 17 __releasebuffer__ 0 4 1514 55 PointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 405 0
100
void PointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1160 15 ~PointerToArray 0 4 1514 53 PointerToArray< UnalignedLMatrix4f >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4f >::~PointerToArray(void);

1161 14 PointerToArray 0 4 1515 53 PointerToArray< UnalignedLVecBase4d >::PointerToArray 0 3 406 407 408 0
344
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4d const *)(0))));
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
PointerToArray< UnalignedLVecBase4d >::PointerToArray(PyObject *self, PyObject *source);

1162 11 empty_array 0 4 1515 50 PointerToArray< UnalignedLVecBase4d >::empty_array 0 1 409 0
210
static inline PointerToArray< UnalignedLVecBase4d > PointerToArray< UnalignedLVecBase4d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4d const *)(0))));

1163 5 clear 0 4 1515 44 PointerToArray< UnalignedLVecBase4d >::clear 0 1 410 0
63
inline void PointerToArray< UnalignedLVecBase4d >::clear(void);

1164 4 size 0 4 1515 43 PointerToArray< UnalignedLVecBase4d >::size 0 1 411 0
86
inline unsigned long long int PointerToArray< UnalignedLVecBase4d >::size(void) const;

1165 9 push_back 0 4 1515 48 PointerToArray< UnalignedLVecBase4d >::push_back 0 1 412 0
91
inline void PointerToArray< UnalignedLVecBase4d >::push_back(UnalignedLVecBase4d const &x);

1166 8 pop_back 0 4 1515 47 PointerToArray< UnalignedLVecBase4d >::pop_back 0 1 413 0
66
inline void PointerToArray< UnalignedLVecBase4d >::pop_back(void);

1167 11 get_element 0 4 1515 50 PointerToArray< UnalignedLVecBase4d >::get_element 0 1 414 0
117
inline UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::get_element(unsigned long long int n) const;

1168 11 set_element 0 4 1515 50 PointerToArray< UnalignedLVecBase4d >::set_element 0 1 415 0
123
inline void PointerToArray< UnalignedLVecBase4d >::set_element(unsigned long long int n, UnalignedLVecBase4d const &value);

1169 11 __getitem__ 0 4 1515 50 PointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 416 0
110
UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned long long int n) const;

1170 11 __setitem__ 0 4 1515 50 PointerToArray< UnalignedLVecBase4d >::__setitem__ 0 1 417 0
116
void PointerToArray< UnalignedLVecBase4d >::__setitem__(unsigned long long int n, UnalignedLVecBase4d const &value);

1171 8 get_data 0 4 1515 47 PointerToArray< UnalignedLVecBase4d >::get_data 0 1 418 0
70
PyObject *PointerToArray< UnalignedLVecBase4d >::get_data(void) const;

1172 8 set_data 0 4 1515 47 PointerToArray< UnalignedLVecBase4d >::set_data 0 1 419 0
69
void PointerToArray< UnalignedLVecBase4d >::set_data(PyObject *data);

1173 11 get_subdata 0 4 1515 50 PointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 420 0
123
PyObject *PointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1174 11 set_subdata 0 4 1515 50 PointerToArray< UnalignedLVecBase4d >::set_subdata 0 1 421 0
158
inline void PointerToArray< UnalignedLVecBase4d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1175 13 get_ref_count 0 4 1515 52 PointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 422 0
76
inline int PointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

1176 18 get_node_ref_count 0 4 1515 57 PointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 423 0
81
inline int PointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

1177 5 count 0 4 1515 44 PointerToArray< UnalignedLVecBase4d >::count 0 1 424 0
110
inline unsigned long long int PointerToArray< UnalignedLVecBase4d >::count(UnalignedLVecBase4d const &) const;

1178 13 __getbuffer__ 0 4 1515 52 PointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 425 0
101
int PointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1179 17 __releasebuffer__ 0 4 1515 56 PointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 426 0
101
void PointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1180 15 ~PointerToArray 0 4 1515 54 PointerToArray< UnalignedLVecBase4d >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4d >::~PointerToArray(void);

1181 14 PointerToArray 0 4 1516 53 PointerToArray< UnalignedLVecBase4f >::PointerToArray 0 3 427 428 429 0
344
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4f const *)(0))));
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
PointerToArray< UnalignedLVecBase4f >::PointerToArray(PyObject *self, PyObject *source);

1182 11 empty_array 0 4 1516 50 PointerToArray< UnalignedLVecBase4f >::empty_array 0 1 430 0
210
static inline PointerToArray< UnalignedLVecBase4f > PointerToArray< UnalignedLVecBase4f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4f const *)(0))));

1183 5 clear 0 4 1516 44 PointerToArray< UnalignedLVecBase4f >::clear 0 1 431 0
63
inline void PointerToArray< UnalignedLVecBase4f >::clear(void);

1184 4 size 0 4 1516 43 PointerToArray< UnalignedLVecBase4f >::size 0 1 432 0
86
inline unsigned long long int PointerToArray< UnalignedLVecBase4f >::size(void) const;

1185 9 push_back 0 4 1516 48 PointerToArray< UnalignedLVecBase4f >::push_back 0 1 433 0
91
inline void PointerToArray< UnalignedLVecBase4f >::push_back(UnalignedLVecBase4f const &x);

1186 8 pop_back 0 4 1516 47 PointerToArray< UnalignedLVecBase4f >::pop_back 0 1 434 0
66
inline void PointerToArray< UnalignedLVecBase4f >::pop_back(void);

1187 11 get_element 0 4 1516 50 PointerToArray< UnalignedLVecBase4f >::get_element 0 1 435 0
117
inline UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::get_element(unsigned long long int n) const;

1188 11 set_element 0 4 1516 50 PointerToArray< UnalignedLVecBase4f >::set_element 0 1 436 0
123
inline void PointerToArray< UnalignedLVecBase4f >::set_element(unsigned long long int n, UnalignedLVecBase4f const &value);

1189 11 __getitem__ 0 4 1516 50 PointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 437 0
110
UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned long long int n) const;

1190 11 __setitem__ 0 4 1516 50 PointerToArray< UnalignedLVecBase4f >::__setitem__ 0 1 438 0
116
void PointerToArray< UnalignedLVecBase4f >::__setitem__(unsigned long long int n, UnalignedLVecBase4f const &value);

1191 8 get_data 0 4 1516 47 PointerToArray< UnalignedLVecBase4f >::get_data 0 1 439 0
70
PyObject *PointerToArray< UnalignedLVecBase4f >::get_data(void) const;

1192 8 set_data 0 4 1516 47 PointerToArray< UnalignedLVecBase4f >::set_data 0 1 440 0
69
void PointerToArray< UnalignedLVecBase4f >::set_data(PyObject *data);

1193 11 get_subdata 0 4 1516 50 PointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 441 0
123
PyObject *PointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1194 11 set_subdata 0 4 1516 50 PointerToArray< UnalignedLVecBase4f >::set_subdata 0 1 442 0
158
inline void PointerToArray< UnalignedLVecBase4f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1195 13 get_ref_count 0 4 1516 52 PointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 443 0
76
inline int PointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

1196 18 get_node_ref_count 0 4 1516 57 PointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 444 0
81
inline int PointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

1197 5 count 0 4 1516 44 PointerToArray< UnalignedLVecBase4f >::count 0 1 445 0
110
inline unsigned long long int PointerToArray< UnalignedLVecBase4f >::count(UnalignedLVecBase4f const &) const;

1198 13 __getbuffer__ 0 4 1516 52 PointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 446 0
101
int PointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1199 17 __releasebuffer__ 0 4 1516 56 PointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 447 0
101
void PointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1200 15 ~PointerToArray 0 4 1516 54 PointerToArray< UnalignedLVecBase4f >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4f >::~PointerToArray(void);

1201 14 PointerToArray 0 4 1517 53 PointerToArray< UnalignedLVecBase4i >::PointerToArray 0 3 448 449 450 0
344
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4i const *)(0))));
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
PointerToArray< UnalignedLVecBase4i >::PointerToArray(PyObject *self, PyObject *source);

1202 11 empty_array 0 4 1517 50 PointerToArray< UnalignedLVecBase4i >::empty_array 0 1 451 0
210
static inline PointerToArray< UnalignedLVecBase4i > PointerToArray< UnalignedLVecBase4i >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4i const *)(0))));

1203 5 clear 0 4 1517 44 PointerToArray< UnalignedLVecBase4i >::clear 0 1 452 0
63
inline void PointerToArray< UnalignedLVecBase4i >::clear(void);

1204 4 size 0 4 1517 43 PointerToArray< UnalignedLVecBase4i >::size 0 1 453 0
86
inline unsigned long long int PointerToArray< UnalignedLVecBase4i >::size(void) const;

1205 9 push_back 0 4 1517 48 PointerToArray< UnalignedLVecBase4i >::push_back 0 1 454 0
91
inline void PointerToArray< UnalignedLVecBase4i >::push_back(UnalignedLVecBase4i const &x);

1206 8 pop_back 0 4 1517 47 PointerToArray< UnalignedLVecBase4i >::pop_back 0 1 455 0
66
inline void PointerToArray< UnalignedLVecBase4i >::pop_back(void);

1207 11 get_element 0 4 1517 50 PointerToArray< UnalignedLVecBase4i >::get_element 0 1 456 0
117
inline UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::get_element(unsigned long long int n) const;

1208 11 set_element 0 4 1517 50 PointerToArray< UnalignedLVecBase4i >::set_element 0 1 457 0
123
inline void PointerToArray< UnalignedLVecBase4i >::set_element(unsigned long long int n, UnalignedLVecBase4i const &value);

1209 11 __getitem__ 0 4 1517 50 PointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 458 0
110
UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned long long int n) const;

1210 11 __setitem__ 0 4 1517 50 PointerToArray< UnalignedLVecBase4i >::__setitem__ 0 1 459 0
116
void PointerToArray< UnalignedLVecBase4i >::__setitem__(unsigned long long int n, UnalignedLVecBase4i const &value);

1211 8 get_data 0 4 1517 47 PointerToArray< UnalignedLVecBase4i >::get_data 0 1 460 0
70
PyObject *PointerToArray< UnalignedLVecBase4i >::get_data(void) const;

1212 8 set_data 0 4 1517 47 PointerToArray< UnalignedLVecBase4i >::set_data 0 1 461 0
69
void PointerToArray< UnalignedLVecBase4i >::set_data(PyObject *data);

1213 11 get_subdata 0 4 1517 50 PointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 462 0
123
PyObject *PointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1214 11 set_subdata 0 4 1517 50 PointerToArray< UnalignedLVecBase4i >::set_subdata 0 1 463 0
158
inline void PointerToArray< UnalignedLVecBase4i >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1215 13 get_ref_count 0 4 1517 52 PointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 464 0
76
inline int PointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

1216 18 get_node_ref_count 0 4 1517 57 PointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 465 0
81
inline int PointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

1217 5 count 0 4 1517 44 PointerToArray< UnalignedLVecBase4i >::count 0 1 466 0
110
inline unsigned long long int PointerToArray< UnalignedLVecBase4i >::count(UnalignedLVecBase4i const &) const;

1218 13 __getbuffer__ 0 4 1517 52 PointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 467 0
101
int PointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1219 17 __releasebuffer__ 0 4 1517 56 PointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 468 0
101
void PointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1220 15 ~PointerToArray 0 4 1517 54 PointerToArray< UnalignedLVecBase4i >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4i >::~PointerToArray(void);

1221 9 make_copy 0 6 1518 25 BoundingVolume::make_copy 0 1 469 0
66
virtual BoundingVolume *BoundingVolume::make_copy(void) const = 0;

1222 8 is_empty 0 4 1518 24 BoundingVolume::is_empty 0 1 470 253
/**
 * Any kind of volume might be empty.  This is a degenerate volume that
 * contains no points; it's not the same as, for instance, a sphere with
 * radius zero, since that contains one point (the center).  It intersects
 * with no other volumes.
 */
49
inline bool BoundingVolume::is_empty(void) const;

1223 11 is_infinite 0 4 1518 27 BoundingVolume::is_infinite 0 1 471 536
/**
 * The other side of the empty coin is an infinite volume.  This is a
 * degenerate state of a normally finite volume that contains all points.
 * (Note that some kinds of infinite bounding volumes, like binary separating
 * planes, do not contain all points and thus correctly return is_infinite()
 * == false, even though they are technically infinite.  This is a special
 * case of the word 'infinite' meaning the volume covers all points in space.)
 *
 * It completely intersects with all other volumes except empty volumes.
 */
52
inline bool BoundingVolume::is_infinite(void) const;

1224 12 set_infinite 0 4 1518 28 BoundingVolume::set_infinite 0 1 472 135
/**
 * Marks the volume as infinite, even if it is normally finite.  You can think
 * of this as an infinite extend_by() operation.
 */
47
inline void BoundingVolume::set_infinite(void);

1225 9 extend_by 0 4 1518 25 BoundingVolume::extend_by 0 1 473 72
/**
 * Increases the size of the volume to include the given volume.
 */
65
inline bool BoundingVolume::extend_by(BoundingVolume const *vol);

1226 8 contains 0 4 1518 24 BoundingVolume::contains 0 1 474 128
/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */
69
inline int BoundingVolume::contains(BoundingVolume const *vol) const;

1227 6 output 0 6 1518 22 BoundingVolume::output 0 1 475 0
65
virtual void BoundingVolume::output(std::ostream &out) const = 0;

1228 5 write 0 6 1518 21 BoundingVolume::write 0 1 476 10
/**
 *
 */
82
virtual void BoundingVolume::write(std::ostream &out, int indent_level = 0) const;

1229 14 get_class_type 0 4 1518 30 BoundingVolume::get_class_type 0 1 477 0
55
static TypeHandle BoundingVolume::get_class_type(void);

1230 15 ~BoundingVolume 0 4 1518 31 BoundingVolume::~BoundingVolume 0 0 0
38
BoundingVolume::~BoundingVolume(void);

1231 9 extend_by 0 4 1522 34 GeometricBoundingVolume::extend_by 0 2 478 479 145
/**
 * Increases the size of the volume to include the given volume.
 */

/**
 * Increases the size of the volume to include the given point.
 */
153
inline bool GeometricBoundingVolume::extend_by(GeometricBoundingVolume const *vol);
inline bool GeometricBoundingVolume::extend_by(LPoint3 const &point);

1232 8 contains 0 4 1522 33 GeometricBoundingVolume::contains 0 3 480 481 482 393
/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */

/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated point.
 */

/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated line segment.
 */
249
inline int GeometricBoundingVolume::contains(GeometricBoundingVolume const *vol) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &point) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &a, LPoint3 const &b) const;

1233 17 get_approx_center 0 6 1522 42 GeometricBoundingVolume::get_approx_center 0 1 483 0
75
virtual LPoint3 GeometricBoundingVolume::get_approx_center(void) const = 0;

1234 5 xform 0 6 1522 30 GeometricBoundingVolume::xform 0 1 484 0
69
virtual void GeometricBoundingVolume::xform(LMatrix4 const &mat) = 0;

1235 14 get_class_type 0 4 1522 39 GeometricBoundingVolume::get_class_type 0 1 485 0
64
static TypeHandle GeometricBoundingVolume::get_class_type(void);

1236 24 ~GeometricBoundingVolume 0 4 1522 49 GeometricBoundingVolume::~GeometricBoundingVolume 0 0 0
56
GeometricBoundingVolume::~GeometricBoundingVolume(void);

1237 7 get_min 0 6 1523 29 FiniteBoundingVolume::get_min 0 1 486 0
62
virtual LPoint3 FiniteBoundingVolume::get_min(void) const = 0;

1238 7 get_max 0 6 1523 29 FiniteBoundingVolume::get_max 0 1 487 0
62
virtual LPoint3 FiniteBoundingVolume::get_max(void) const = 0;

1239 10 get_volume 0 6 1523 32 FiniteBoundingVolume::get_volume 0 1 488 10
/**
 *
 */
65
virtual PN_stdfloat FiniteBoundingVolume::get_volume(void) const;

1240 14 get_class_type 0 4 1523 36 FiniteBoundingVolume::get_class_type 0 1 489 0
61
static TypeHandle FiniteBoundingVolume::get_class_type(void);

1241 21 ~FiniteBoundingVolume 0 4 1523 43 FiniteBoundingVolume::~FiniteBoundingVolume 0 0 0
50
FiniteBoundingVolume::~FiniteBoundingVolume(void);

1242 10 LParabolaf 0 4 1528 22 LParabolaf::LParabolaf 0 3 490 491 492 209
/**
 * Constructs a meaningless degenerate parabola.
 */

/**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */

/**
 *
 */
185
inline LParabolaf::LParabolaf(void);
inline LParabolaf::LParabolaf(LVecBase3f const &a, LVecBase3f const &b, LVecBase3f const &c);
inline LParabolaf::LParabolaf(LParabolaf const &copy);

1243 10 operator = 0 4 1528 22 LParabolaf::operator = 0 1 493 0
59
inline void LParabolaf::operator =(LParabolaf const &copy);

1244 11 ~LParabolaf 0 4 1528 23 LParabolaf::~LParabolaf 0 0 10
/**
 *
 */
37
inline LParabolaf::~LParabolaf(void);

1245 5 xform 0 4 1528 17 LParabolaf::xform 0 1 494 59
/**
 * Transforms the parabola by the indicated matrix.
 */
45
void LParabolaf::xform(LMatrix4f const &mat);

1246 5 get_a 0 4 1528 17 LParabolaf::get_a 0 1 495 94
/**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */
55
inline LVecBase3f const &LParabolaf::get_a(void) const;

1247 5 get_b 0 4 1528 17 LParabolaf::get_b 0 1 496 99
/**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */
55
inline LVecBase3f const &LParabolaf::get_b(void) const;

1248 5 get_c 0 4 1528 17 LParabolaf::get_c 0 1 497 93
/**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */
55
inline LVecBase3f const &LParabolaf::get_c(void) const;

1249 10 calc_point 0 4 1528 22 LParabolaf::calc_point 0 1 498 56
/**
 * Computes the point on the parabola at time t.
 */
54
inline LPoint3f LParabolaf::calc_point(float t) const;

1250 6 output 0 4 1528 18 LParabolaf::output 0 1 499 10
/**
 *
 */
49
void LParabolaf::output(std::ostream &out) const;

1251 5 write 0 4 1528 17 LParabolaf::write 0 1 500 10
/**
 *
 */
70
void LParabolaf::write(std::ostream &out, int indent_level = 0) const;

1252 20 write_datagram_fixed 0 4 1528 32 LParabolaf::write_datagram_fixed 0 1 501 336
/**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */
67
void LParabolaf::write_datagram_fixed(Datagram &destination) const;

1253 19 read_datagram_fixed 0 4 1528 31 LParabolaf::read_datagram_fixed 0 1 502 116
/**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */
63
void LParabolaf::read_datagram_fixed(DatagramIterator &source);

1254 14 write_datagram 0 4 1528 26 LParabolaf::write_datagram 0 1 503 207
/**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */
61
void LParabolaf::write_datagram(Datagram &destination) const;

1255 13 read_datagram 0 4 1528 25 LParabolaf::read_datagram 0 1 504 69
/**
 * Reads the parabola from the Datagram using get_stdfloat().
 */
57
void LParabolaf::read_datagram(DatagramIterator &source);

1256 10 LParabolad 0 4 1529 22 LParabolad::LParabolad 0 3 505 506 507 209
/**
 * Constructs a meaningless degenerate parabola.
 */

/**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */

/**
 *
 */
185
inline LParabolad::LParabolad(void);
inline LParabolad::LParabolad(LVecBase3d const &a, LVecBase3d const &b, LVecBase3d const &c);
inline LParabolad::LParabolad(LParabolad const &copy);

1257 10 operator = 0 4 1529 22 LParabolad::operator = 0 1 508 0
59
inline void LParabolad::operator =(LParabolad const &copy);

1258 11 ~LParabolad 0 4 1529 23 LParabolad::~LParabolad 0 0 10
/**
 *
 */
37
inline LParabolad::~LParabolad(void);

1259 5 xform 0 4 1529 17 LParabolad::xform 0 1 509 59
/**
 * Transforms the parabola by the indicated matrix.
 */
45
void LParabolad::xform(LMatrix4d const &mat);

1260 5 get_a 0 4 1529 17 LParabolad::get_a 0 1 510 94
/**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */
55
inline LVecBase3d const &LParabolad::get_a(void) const;

1261 5 get_b 0 4 1529 17 LParabolad::get_b 0 1 511 99
/**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */
55
inline LVecBase3d const &LParabolad::get_b(void) const;

1262 5 get_c 0 4 1529 17 LParabolad::get_c 0 1 512 93
/**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */
55
inline LVecBase3d const &LParabolad::get_c(void) const;

1263 10 calc_point 0 4 1529 22 LParabolad::calc_point 0 1 513 56
/**
 * Computes the point on the parabola at time t.
 */
55
inline LPoint3d LParabolad::calc_point(double t) const;

1264 6 output 0 4 1529 18 LParabolad::output 0 1 514 10
/**
 *
 */
49
void LParabolad::output(std::ostream &out) const;

1265 5 write 0 4 1529 17 LParabolad::write 0 1 515 10
/**
 *
 */
70
void LParabolad::write(std::ostream &out, int indent_level = 0) const;

1266 20 write_datagram_fixed 0 4 1529 32 LParabolad::write_datagram_fixed 0 1 516 336
/**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */
67
void LParabolad::write_datagram_fixed(Datagram &destination) const;

1267 19 read_datagram_fixed 0 4 1529 31 LParabolad::read_datagram_fixed 0 1 517 116
/**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */
63
void LParabolad::read_datagram_fixed(DatagramIterator &source);

1268 14 write_datagram 0 4 1529 26 LParabolad::write_datagram 0 1 518 207
/**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */
61
void LParabolad::write_datagram(Datagram &destination) const;

1269 13 read_datagram 0 4 1529 25 LParabolad::read_datagram 0 1 519 69
/**
 * Reads the parabola from the Datagram using get_stdfloat().
 */
57
void LParabolad::read_datagram(DatagramIterator &source);

1270 7 LPlanef 0 4 1531 16 LPlanef::LPlanef 0 6 520 521 522 523 524 525 518
/**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */

/**
 *
 */

/**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */

/**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */

/**
 * Constructs a plane given the four terms of the plane equation.
 */
347
inline LPlanef::LPlanef(void);
inline LPlanef::LPlanef(LVecBase4f const &copy);
inline LPlanef::LPlanef(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c);
inline LPlanef::LPlanef(LVector3f const &normal, LPoint3f const &point);
inline LPlanef::LPlanef(float a, float b, float c, float d);
inline LPlanef::LPlanef(LPlanef const &) = default;

1271 10 operator * 0 4 1531 19 LPlanef::operator * 0 2 526 527 0
127
inline LPlanef LPlanef::operator *(LMatrix3f const &mat) const;
inline LPlanef LPlanef::operator *(LMatrix4f const &mat) const;

1272 11 operator *= 0 4 1531 20 LPlanef::operator *= 0 1 528 0
55
inline void LPlanef::operator *=(LMatrix4f const &mat);

1273 5 xform 0 4 1531 14 LPlanef::xform 0 1 529 56
/**
 * Transforms the plane by the indicated matrix.
 */
49
inline void LPlanef::xform(LMatrix4f const &mat);

1274 10 operator - 0 68 1531 19 LPlanef::operator - 0 1 530 0
47
inline LPlanef LPlanef::operator -(void) const;

1275 18 get_reflection_mat 0 4 1531 27 LPlanef::get_reflection_mat 0 1 531 121
/**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */
50
LMatrix4f LPlanef::get_reflection_mat(void) const;

1276 10 get_normal 0 4 1531 19 LPlanef::get_normal 0 1 532 51
/**
 * Returns the surface normal of the plane.
 */
49
inline LVector3f LPlanef::get_normal(void) const;

1277 9 get_point 0 4 1531 18 LPlanef::get_point 0 1 533 145
/**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */
40
LPoint3f LPlanef::get_point(void) const;

1278 13 dist_to_plane 0 4 1531 22 LPlanef::dist_to_plane 0 1 534 328
/**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */
65
inline float LPlanef::dist_to_plane(LPoint3f const &point) const;

1279 9 normalize 0 4 1531 18 LPlanef::normalize 0 1 535 139
/**
 * Normalizes the plane in place.  Returns true if the plane was normalized,
 * false if the plane had a zero-length normal vector.
 */
37
inline bool LPlanef::normalize(void);

1280 10 normalized 0 4 1531 19 LPlanef::normalized 0 1 536 155
/**
 * Normalizes the plane and returns the normalized plane as a copy.  If the
 * plane's normal was a zero-length vector, the same plane is returned.
 */
47
inline LPlanef LPlanef::normalized(void) const;

1281 7 project 0 4 1531 16 LPlanef::project 0 1 537 86
/**
 * Returns the point within the plane nearest to the indicated point in space.
 */
62
inline LPoint3f LPlanef::project(LPoint3f const &point) const;

1282 4 flip 0 4 1531 13 LPlanef::flip 0 1 538 115
/**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */
32
inline void LPlanef::flip(void);

1283 15 intersects_line 0 4 1531 24 LPlanef::intersects_line 0 1 539 968
/**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */

/**
 * This flavor of intersects_line() returns a bit more information about the
 * nature of the intersecting point.  The line is defined via the parametric
 * equation from + t * delta for all real values of t.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t undefined.  If there is an intersection with the plane, the
 * function returns true and sets t to the parametric value that defines the
 * point of intersection.  That is, t == 0.0f implies that the intersection
 * occurred exactly at point from, and t == 1.0f implies at point from +
 * delta, with other values of t accordingly.
 */
213
inline bool LPlanef::intersects_line(LPoint3f &intersection_point, LPoint3f const &p1, LPoint3f const &p2) const;
inline bool LPlanef::intersects_line(float &t, LPoint3f const &from, LVector3f const &delta) const;

1284 16 intersects_plane 0 4 1531 25 LPlanef::intersects_plane 0 1 540 300
/**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */
93
bool LPlanef::intersects_plane(LPoint3f &from, LVector3f &delta, LPlanef const &other) const;

1285 19 intersects_parabola 0 4 1531 28 LPlanef::intersects_parabola 0 0 437
/**
 * Determines whether and where the indicated parabola intersects with the
 * plane.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t1 and t2 undefined.  If there is an intersection with the plane,
 * the function returns true and sets t1 and t2 to the parametric value that
 * defines the two points of intersection.  If the parabola is exactly tangent
 * to the plane, then t1 == t2.
 */
90
bool LPlanef::intersects_parabola(float &t1, float &t2, LParabolaf const &parabola) const;

1286 6 output 0 4 1531 15 LPlanef::output 0 1 541 10
/**
 *
 */
46
void LPlanef::output(std::ostream &out) const;

1287 5 write 0 4 1531 14 LPlanef::write 0 1 542 10
/**
 *
 */
67
void LPlanef::write(std::ostream &out, int indent_level = 0) const;

1288 8 ~LPlanef 0 4 1531 17 LPlanef::~LPlanef 0 0 0
24
LPlanef::~LPlanef(void);

1289 7 LPlaned 0 4 1533 16 LPlaned::LPlaned 0 6 543 544 545 546 547 548 518
/**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */

/**
 *
 */

/**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */

/**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */

/**
 * Constructs a plane given the four terms of the plane equation.
 */
351
inline LPlaned::LPlaned(void);
inline LPlaned::LPlaned(LVecBase4d const &copy);
inline LPlaned::LPlaned(LPoint3d const &a, LPoint3d const &b, LPoint3d const &c);
inline LPlaned::LPlaned(LVector3d const &normal, LPoint3d const &point);
inline LPlaned::LPlaned(double a, double b, double c, double d);
inline LPlaned::LPlaned(LPlaned const &) = default;

1290 10 operator * 0 4 1533 19 LPlaned::operator * 0 2 549 550 0
127
inline LPlaned LPlaned::operator *(LMatrix3d const &mat) const;
inline LPlaned LPlaned::operator *(LMatrix4d const &mat) const;

1291 11 operator *= 0 4 1533 20 LPlaned::operator *= 0 1 551 0
55
inline void LPlaned::operator *=(LMatrix4d const &mat);

1292 5 xform 0 4 1533 14 LPlaned::xform 0 1 552 56
/**
 * Transforms the plane by the indicated matrix.
 */
49
inline void LPlaned::xform(LMatrix4d const &mat);

1293 10 operator - 0 68 1533 19 LPlaned::operator - 0 1 553 0
47
inline LPlaned LPlaned::operator -(void) const;

1294 18 get_reflection_mat 0 4 1533 27 LPlaned::get_reflection_mat 0 1 554 121
/**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */
50
LMatrix4d LPlaned::get_reflection_mat(void) const;

1295 10 get_normal 0 4 1533 19 LPlaned::get_normal 0 1 555 51
/**
 * Returns the surface normal of the plane.
 */
49
inline LVector3d LPlaned::get_normal(void) const;

1296 9 get_point 0 4 1533 18 LPlaned::get_point 0 1 556 145
/**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */
40
LPoint3d LPlaned::get_point(void) const;

1297 13 dist_to_plane 0 4 1533 22 LPlaned::dist_to_plane 0 1 557 328
/**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */
66
inline double LPlaned::dist_to_plane(LPoint3d const &point) const;

1298 9 normalize 0 4 1533 18 LPlaned::normalize 0 1 558 139
/**
 * Normalizes the plane in place.  Returns true if the plane was normalized,
 * false if the plane had a zero-length normal vector.
 */
37
inline bool LPlaned::normalize(void);

1299 10 normalized 0 4 1533 19 LPlaned::normalized 0 1 559 155
/**
 * Normalizes the plane and returns the normalized plane as a copy.  If the
 * plane's normal was a zero-length vector, the same plane is returned.
 */
47
inline LPlaned LPlaned::normalized(void) const;

1300 7 project 0 4 1533 16 LPlaned::project 0 1 560 86
/**
 * Returns the point within the plane nearest to the indicated point in space.
 */
62
inline LPoint3d LPlaned::project(LPoint3d const &point) const;

1301 4 flip 0 4 1533 13 LPlaned::flip 0 1 561 115
/**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */
32
inline void LPlaned::flip(void);

1302 15 intersects_line 0 4 1533 24 LPlaned::intersects_line 0 1 562 968
/**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */

/**
 * This flavor of intersects_line() returns a bit more information about the
 * nature of the intersecting point.  The line is defined via the parametric
 * equation from + t * delta for all real values of t.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t undefined.  If there is an intersection with the plane, the
 * function returns true and sets t to the parametric value that defines the
 * point of intersection.  That is, t == 0.0f implies that the intersection
 * occurred exactly at point from, and t == 1.0f implies at point from +
 * delta, with other values of t accordingly.
 */
214
inline bool LPlaned::intersects_line(LPoint3d &intersection_point, LPoint3d const &p1, LPoint3d const &p2) const;
inline bool LPlaned::intersects_line(double &t, LPoint3d const &from, LVector3d const &delta) const;

1303 16 intersects_plane 0 4 1533 25 LPlaned::intersects_plane 0 1 563 300
/**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */
93
bool LPlaned::intersects_plane(LPoint3d &from, LVector3d &delta, LPlaned const &other) const;

1304 19 intersects_parabola 0 4 1533 28 LPlaned::intersects_parabola 0 0 437
/**
 * Determines whether and where the indicated parabola intersects with the
 * plane.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t1 and t2 undefined.  If there is an intersection with the plane,
 * the function returns true and sets t1 and t2 to the parametric value that
 * defines the two points of intersection.  If the parabola is exactly tangent
 * to the plane, then t1 == t2.
 */
92
bool LPlaned::intersects_parabola(double &t1, double &t2, LParabolad const &parabola) const;

1305 6 output 0 4 1533 15 LPlaned::output 0 1 564 10
/**
 *
 */
46
void LPlaned::output(std::ostream &out) const;

1306 5 write 0 4 1533 14 LPlaned::write 0 1 565 10
/**
 *
 */
67
void LPlaned::write(std::ostream &out, int indent_level = 0) const;

1307 8 ~LPlaned 0 4 1533 17 LPlaned::~LPlaned 0 0 0
24
LPlaned::~LPlaned(void);

1308 11 BoundingBox 0 4 1539 24 BoundingBox::BoundingBox 0 2 566 567 88
/**
 * Constructs an empty box object.
 */

/**
 * Constructs a specific box object.
 */
120
inline BoundingBox::BoundingBox(void);
inline explicit BoundingBox::BoundingBox(LPoint3 const &min, LPoint3 const &max);

1309 12 operator new 0 4 1539 25 BoundingBox::operator new 0 1 568 0
126
inline void *BoundingBox::operator new(std::size_t size);
inline void *BoundingBox::operator new(std::size_t size, void *ptr);

1310 15 operator delete 0 4 1539 28 BoundingBox::operator delete 0 0 0
110
inline void BoundingBox::operator delete(void *ptr);
inline void BoundingBox::operator delete(void *, void *);

1311 12 validate_ptr 0 4 1539 25 BoundingBox::validate_ptr 0 0 0
62
static inline bool BoundingBox::validate_ptr(void const *ptr);

1312 14 get_num_points 0 4 1539 27 BoundingBox::get_num_points 0 1 569 68
/**
 * Returns 8: the number of vertices of a rectangular solid.
 */
51
inline int BoundingBox::get_num_points(void) const;

1313 9 get_point 0 4 1539 22 BoundingBox::get_point 0 1 570 59
/**
 * Returns the nth vertex of the rectangular solid.
 */
51
inline LPoint3 BoundingBox::get_point(int n) const;

1314 14 get_num_planes 0 4 1539 27 BoundingBox::get_num_planes 0 1 571 65
/**
 * Returns 6: the number of faces of a rectangular solid.
 */
51
inline int BoundingBox::get_num_planes(void) const;

1315 9 get_plane 0 4 1539 22 BoundingBox::get_plane 0 1 572 57
/**
 * Returns the nth face of the rectangular solid.
 */
50
inline LPlane BoundingBox::get_plane(int n) const;

1316 0 0 0 0 0 0 0 0
0

1317 0 0 0 0 0 0 0 0
0

1318 11 set_min_max 0 4 1539 24 BoundingBox::set_min_max 0 1 573 63
/**
 * Sets the min and max point of the rectangular solid.
 */
77
inline void BoundingBox::set_min_max(LPoint3 const &min, LPoint3 const &max);

1319 14 get_class_type 0 4 1539 27 BoundingBox::get_class_type 0 1 574 0
52
static TypeHandle BoundingBox::get_class_type(void);

1320 12 ~BoundingBox 0 4 1539 25 BoundingBox::~BoundingBox 0 0 0
32
BoundingBox::~BoundingBox(void);

1321 9 LFrustumf 0 4 1540 20 LFrustumf::LFrustumf 0 2 575 576 10
/**
 *
 */
92
inline LFrustumf::LFrustumf(void);
inline LFrustumf::LFrustumf(LFrustumf const &) = default;

1322 13 make_ortho_2D 0 4 1540 24 LFrustumf::make_ortho_2D 0 2 577 578 116
/**
 * Sets up a two-dimensional orthographic frustum
 */

/**
 * Sets up a two-dimensional orthographic frustum
 */
117
inline void LFrustumf::make_ortho_2D(void);
inline void LFrustumf::make_ortho_2D(float l, float r, float t, float b);

1323 10 make_ortho 0 4 1540 21 LFrustumf::make_ortho 0 2 579 580 66
/**
 * Behaves like gluOrtho
 */

/**
 * Behaves like gluOrtho
 */
155
inline void LFrustumf::make_ortho(float fnear, float ffar);
inline void LFrustumf::make_ortho(float fnear, float ffar, float l, float r, float t, float b);

1324 21 make_perspective_hfov 0 4 1540 32 LFrustumf::make_perspective_hfov 0 1 581 238
/**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */
96
inline void LFrustumf::make_perspective_hfov(float xfov, float aspect, float fnear, float ffar);

1325 21 make_perspective_vfov 0 4 1540 32 LFrustumf::make_perspective_vfov 0 1 582 0
96
inline void LFrustumf::make_perspective_vfov(float yfov, float aspect, float fnear, float ffar);

1326 16 make_perspective 0 4 1540 27 LFrustumf::make_perspective 0 1 583 0
89
inline void LFrustumf::make_perspective(float xfov, float yfov, float fnear, float ffar);

1327 22 get_perspective_params 0 4 1540 33 LFrustumf::get_perspective_params 0 0 22
/**
 *
 */

/**
 *
 */
228
inline void LFrustumf::get_perspective_params(float &yfov, float &aspect, float &fnear, float &ffar) const;
inline void LFrustumf::get_perspective_params(float &xfov, float &yfov, float &aspect, float &fnear, float &ffar) const;

1328 10 ~LFrustumf 0 4 1540 21 LFrustumf::~LFrustumf 0 0 0
28
LFrustumf::~LFrustumf(void);

1329 9 LFrustumd 0 4 1541 20 LFrustumd::LFrustumd 0 2 584 585 10
/**
 *
 */
92
inline LFrustumd::LFrustumd(void);
inline LFrustumd::LFrustumd(LFrustumd const &) = default;

1330 13 make_ortho_2D 0 4 1541 24 LFrustumd::make_ortho_2D 0 2 586 587 116
/**
 * Sets up a two-dimensional orthographic frustum
 */

/**
 * Sets up a two-dimensional orthographic frustum
 */
121
inline void LFrustumd::make_ortho_2D(void);
inline void LFrustumd::make_ortho_2D(double l, double r, double t, double b);

1331 10 make_ortho 0 4 1541 21 LFrustumd::make_ortho 0 2 588 589 66
/**
 * Behaves like gluOrtho
 */

/**
 * Behaves like gluOrtho
 */
163
inline void LFrustumd::make_ortho(double fnear, double ffar);
inline void LFrustumd::make_ortho(double fnear, double ffar, double l, double r, double t, double b);

1332 21 make_perspective_hfov 0 4 1541 32 LFrustumd::make_perspective_hfov 0 1 590 238
/**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */
100
inline void LFrustumd::make_perspective_hfov(double xfov, double aspect, double fnear, double ffar);

1333 21 make_perspective_vfov 0 4 1541 32 LFrustumd::make_perspective_vfov 0 1 591 0
100
inline void LFrustumd::make_perspective_vfov(double yfov, double aspect, double fnear, double ffar);

1334 16 make_perspective 0 4 1541 27 LFrustumd::make_perspective 0 1 592 0
93
inline void LFrustumd::make_perspective(double xfov, double yfov, double fnear, double ffar);

1335 22 get_perspective_params 0 4 1541 33 LFrustumd::get_perspective_params 0 0 22
/**
 *
 */

/**
 *
 */
237
inline void LFrustumd::get_perspective_params(double &yfov, double &aspect, double &fnear, double &ffar) const;
inline void LFrustumd::get_perspective_params(double &xfov, double &yfov, double &aspect, double &fnear, double &ffar) const;

1336 10 ~LFrustumd 0 4 1541 21 LFrustumd::~LFrustumd 0 0 0
28
LFrustumd::~LFrustumd(void);

1337 18 BoundingHexahedron 0 4 1546 38 BoundingHexahedron::BoundingHexahedron 0 2 593 594 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
315
BoundingHexahedron::BoundingHexahedron(LFrustum const &frustum, bool is_ortho, CoordinateSystem cs = ::CS_default);
BoundingHexahedron::BoundingHexahedron(LPoint3 const &fll, LPoint3 const &flr, LPoint3 const &fur, LPoint3 const &ful, LPoint3 const &nll, LPoint3 const &nlr, LPoint3 const &nur, LPoint3 const &nul);

1338 14 get_num_points 0 4 1546 34 BoundingHexahedron::get_num_points 0 1 595 61
/**
 * Returns 8: the number of vertices of a hexahedron.
 */
58
inline int BoundingHexahedron::get_num_points(void) const;

1339 9 get_point 0 4 1546 29 BoundingHexahedron::get_point 0 1 596 52
/**
 * Returns the nth vertex of the hexahedron.
 */
58
inline LPoint3 BoundingHexahedron::get_point(int n) const;

1340 14 get_num_planes 0 4 1546 34 BoundingHexahedron::get_num_planes 0 1 597 58
/**
 * Returns 6: the number of faces of a hexahedron.
 */
58
inline int BoundingHexahedron::get_num_planes(void) const;

1341 9 get_plane 0 4 1546 29 BoundingHexahedron::get_plane 0 1 598 50
/**
 * Returns the nth face of the hexahedron.
 */
57
inline LPlane BoundingHexahedron::get_plane(int n) const;

1342 0 0 0 0 0 0 0 0
0

1343 0 0 0 0 0 0 0 0
0

1344 14 get_class_type 0 4 1546 34 BoundingHexahedron::get_class_type 0 1 599 0
59
static TypeHandle BoundingHexahedron::get_class_type(void);

1345 19 ~BoundingHexahedron 0 4 1546 39 BoundingHexahedron::~BoundingHexahedron 0 0 0
46
BoundingHexahedron::~BoundingHexahedron(void);

1346 12 BoundingLine 0 4 1547 26 BoundingLine::BoundingLine 0 1 600 22
/**
 *
 */

/**
 *
 */
79
inline explicit BoundingLine::BoundingLine(LPoint3 const &a, LPoint3 const &b);

1347 12 operator new 0 4 1547 26 BoundingLine::operator new 0 1 601 0
128
inline void *BoundingLine::operator new(std::size_t size);
inline void *BoundingLine::operator new(std::size_t size, void *ptr);

1348 15 operator delete 0 4 1547 29 BoundingLine::operator delete 0 0 0
112
inline void BoundingLine::operator delete(void *ptr);
inline void BoundingLine::operator delete(void *, void *);

1349 12 validate_ptr 0 4 1547 26 BoundingLine::validate_ptr 0 0 0
63
static inline bool BoundingLine::validate_ptr(void const *ptr);

1350 11 get_point_a 0 4 1547 25 BoundingLine::get_point_a 0 1 602 57
/**
 * Returns the first point that defines the line.
 */
60
inline LPoint3 const &BoundingLine::get_point_a(void) const;

1351 11 get_point_b 0 4 1547 25 BoundingLine::get_point_b 0 1 603 58
/**
 * Returns the second point that defines the line.
 */
53
inline LPoint3 BoundingLine::get_point_b(void) const;

1352 14 get_class_type 0 4 1547 28 BoundingLine::get_class_type 0 1 604 0
53
static TypeHandle BoundingLine::get_class_type(void);

1353 13 ~BoundingLine 0 4 1547 27 BoundingLine::~BoundingLine 0 0 0
34
BoundingLine::~BoundingLine(void);

1354 13 BoundingPlane 0 4 1548 28 BoundingPlane::BoundingPlane 0 2 605 606 77
/**
 * Constructs an empty "plane" that has no intersections.
 */

/**
 *
 */
100
inline BoundingPlane::BoundingPlane(void);
inline BoundingPlane::BoundingPlane(LPlane const &plane);

1355 12 operator new 0 4 1548 27 BoundingPlane::operator new 0 1 607 0
130
inline void *BoundingPlane::operator new(std::size_t size);
inline void *BoundingPlane::operator new(std::size_t size, void *ptr);

1356 15 operator delete 0 4 1548 30 BoundingPlane::operator delete 0 0 0
114
inline void BoundingPlane::operator delete(void *ptr);
inline void BoundingPlane::operator delete(void *, void *);

1357 12 validate_ptr 0 4 1548 27 BoundingPlane::validate_ptr 0 0 0
64
static inline bool BoundingPlane::validate_ptr(void const *ptr);

1358 9 get_plane 0 4 1548 24 BoundingPlane::get_plane 0 1 608 10
/**
 *
 */
58
inline LPlane const &BoundingPlane::get_plane(void) const;

1359 14 get_class_type 0 4 1548 29 BoundingPlane::get_class_type 0 1 609 0
54
static TypeHandle BoundingPlane::get_class_type(void);

1360 14 ~BoundingPlane 0 4 1548 29 BoundingPlane::~BoundingPlane 0 0 0
36
BoundingPlane::~BoundingPlane(void);

1361 14 BoundingSphere 0 4 1550 30 BoundingSphere::BoundingSphere 0 2 610 611 80
/**
 * Constructs an empty sphere.
 */

/**
 * Constructs a specific sphere.
 */
135
inline BoundingSphere::BoundingSphere(void);
inline explicit BoundingSphere::BoundingSphere(LPoint3 const &center, PN_stdfloat radius);

1362 12 operator new 0 4 1550 28 BoundingSphere::operator new 0 1 612 0
132
inline void *BoundingSphere::operator new(std::size_t size);
inline void *BoundingSphere::operator new(std::size_t size, void *ptr);

1363 15 operator delete 0 4 1550 31 BoundingSphere::operator delete 0 0 0
116
inline void BoundingSphere::operator delete(void *ptr);
inline void BoundingSphere::operator delete(void *, void *);

1364 12 validate_ptr 0 4 1550 28 BoundingSphere::validate_ptr 0 0 0
65
static inline bool BoundingSphere::validate_ptr(void const *ptr);

1365 10 get_center 0 4 1550 26 BoundingSphere::get_center 0 1 613 10
/**
 *
 */
54
inline LPoint3 BoundingSphere::get_center(void) const;

1366 10 get_radius 0 4 1550 26 BoundingSphere::get_radius 0 1 614 10
/**
 *
 */
58
inline PN_stdfloat BoundingSphere::get_radius(void) const;

1367 10 set_center 0 4 1550 26 BoundingSphere::set_center 0 1 615 47
/**
 * Sets the center point of the sphere.
 */
62
inline void BoundingSphere::set_center(LPoint3 const &center);

1368 10 set_radius 0 4 1550 26 BoundingSphere::set_radius 0 1 616 41
/**
 * Sets the radius of the sphere.
 */
59
inline void BoundingSphere::set_radius(PN_stdfloat radius);

1369 14 get_class_type 0 4 1550 30 BoundingSphere::get_class_type 0 1 617 0
55
static TypeHandle BoundingSphere::get_class_type(void);

1370 15 ~BoundingSphere 0 4 1550 31 BoundingSphere::~BoundingSphere 0 0 0
38
BoundingSphere::~BoundingSphere(void);

1371 26 IntersectionBoundingVolume 0 4 1551 54 IntersectionBoundingVolume::IntersectionBoundingVolume 0 1 618 56
/**
 * Constructs an empty intersection.
 */

/**
 *
 */
68
inline IntersectionBoundingVolume::IntersectionBoundingVolume(void);

1372 12 operator new 0 4 1551 40 IntersectionBoundingVolume::operator new 0 1 619 0
156
inline void *IntersectionBoundingVolume::operator new(std::size_t size);
inline void *IntersectionBoundingVolume::operator new(std::size_t size, void *ptr);

1373 15 operator delete 0 4 1551 43 IntersectionBoundingVolume::operator delete 0 0 0
140
inline void IntersectionBoundingVolume::operator delete(void *ptr);
inline void IntersectionBoundingVolume::operator delete(void *, void *);

1374 12 validate_ptr 0 4 1551 40 IntersectionBoundingVolume::validate_ptr 0 0 0
77
static inline bool IntersectionBoundingVolume::validate_ptr(void const *ptr);

1375 18 get_num_components 0 4 1551 46 IntersectionBoundingVolume::get_num_components 0 1 620 64
/**
 * Returns the number of components in the intersection.
 */
70
inline int IntersectionBoundingVolume::get_num_components(void) const;

1376 13 get_component 0 4 1551 41 IntersectionBoundingVolume::get_component 0 1 621 57
/**
 * Returns the nth component in the intersection.
 */
93
inline GeometricBoundingVolume const *IntersectionBoundingVolume::get_component(int n) const;

1377 0 0 0 0 0 0 0 0
0

1378 16 clear_components 0 4 1551 44 IntersectionBoundingVolume::clear_components 0 1 622 50
/**
 * Removes all components from the volume.
 */
56
void IntersectionBoundingVolume::clear_components(void);

1379 13 add_component 0 4 1551 41 IntersectionBoundingVolume::add_component 0 1 623 373
/**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */
89
void IntersectionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1380 14 get_class_type 0 4 1551 42 IntersectionBoundingVolume::get_class_type 0 1 624 0
67
static TypeHandle IntersectionBoundingVolume::get_class_type(void);

1381 27 ~IntersectionBoundingVolume 0 4 1551 55 IntersectionBoundingVolume::~IntersectionBoundingVolume 0 0 0
62
IntersectionBoundingVolume::~IntersectionBoundingVolume(void);

1382 8 heads_up 0 1 0 8 heads_up 0 12 725 726 727 728 729 730 731 732 733 734 735 736 0
1297
void heads_up(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void heads_up(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1383 7 look_at 0 1 0 7 look_at 0 12 737 738 739 740 741 742 743 744 745 746 747 748 0
1285
void look_at(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void look_at(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1384 8 Mersenne 0 4 1554 18 Mersenne::Mersenne 0 2 625 626 35
/* initializes mt[N] with a seed */
107
explicit Mersenne::Mersenne(unsigned long int seed);
inline Mersenne::Mersenne(Mersenne const &) = default;

1385 10 get_uint31 0 4 1554 20 Mersenne::get_uint31 0 1 627 58
/* generates a random number on [0,0x7fffffff]-interval */
45
unsigned long int Mersenne::get_uint31(void);

1386 9 ~Mersenne 0 4 1554 19 Mersenne::~Mersenne 0 0 0
26
Mersenne::~Mersenne(void);

1387 18 OmniBoundingVolume 0 4 1556 38 OmniBoundingVolume::OmniBoundingVolume 0 1 628 10
/**
 *
 */
52
inline OmniBoundingVolume::OmniBoundingVolume(void);

1388 14 get_class_type 0 4 1556 34 OmniBoundingVolume::get_class_type 0 1 629 0
59
static TypeHandle OmniBoundingVolume::get_class_type(void);

1389 19 ~OmniBoundingVolume 0 4 1556 39 OmniBoundingVolume::~OmniBoundingVolume 0 0 0
46
OmniBoundingVolume::~OmniBoundingVolume(void);

1390 19 UnionBoundingVolume 0 4 1557 40 UnionBoundingVolume::UnionBoundingVolume 0 1 630 49
/**
 * Constructs an empty union.
 */

/**
 *
 */
54
inline UnionBoundingVolume::UnionBoundingVolume(void);

1391 12 operator new 0 4 1557 33 UnionBoundingVolume::operator new 0 1 631 0
142
inline void *UnionBoundingVolume::operator new(std::size_t size);
inline void *UnionBoundingVolume::operator new(std::size_t size, void *ptr);

1392 15 operator delete 0 4 1557 36 UnionBoundingVolume::operator delete 0 0 0
126
inline void UnionBoundingVolume::operator delete(void *ptr);
inline void UnionBoundingVolume::operator delete(void *, void *);

1393 12 validate_ptr 0 4 1557 33 UnionBoundingVolume::validate_ptr 0 0 0
70
static inline bool UnionBoundingVolume::validate_ptr(void const *ptr);

1394 18 get_num_components 0 4 1557 39 UnionBoundingVolume::get_num_components 0 1 632 57
/**
 * Returns the number of components in the union.
 */
63
inline int UnionBoundingVolume::get_num_components(void) const;

1395 13 get_component 0 4 1557 34 UnionBoundingVolume::get_component 0 1 633 50
/**
 * Returns the nth component in the union.
 */
86
inline GeometricBoundingVolume const *UnionBoundingVolume::get_component(int n) const;

1396 0 0 0 0 0 0 0 0
0

1397 16 clear_components 0 4 1557 37 UnionBoundingVolume::clear_components 0 1 634 50
/**
 * Removes all components from the volume.
 */
49
void UnionBoundingVolume::clear_components(void);

1398 13 add_component 0 4 1557 34 UnionBoundingVolume::add_component 0 1 635 373
/**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */
82
void UnionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1399 19 filter_intersection 0 4 1557 40 UnionBoundingVolume::filter_intersection 0 1 636 104
/**
 * Removes from the union any components that have no intersection with the
 * indicated volume.
 */
76
void UnionBoundingVolume::filter_intersection(BoundingVolume const *volume);

1400 14 get_class_type 0 4 1557 35 UnionBoundingVolume::get_class_type 0 1 637 0
60
static TypeHandle UnionBoundingVolume::get_class_type(void);

1401 20 ~UnionBoundingVolume 0 4 1557 41 UnionBoundingVolume::~UnionBoundingVolume 0 0 0
48
UnionBoundingVolume::~UnionBoundingVolume(void);

1402 10 Randomizer 0 4 1558 22 Randomizer::Randomizer 0 2 638 639 120
/**
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 *
 */
122
inline explicit Randomizer::Randomizer(unsigned long int seed = 0);
inline Randomizer::Randomizer(Randomizer const &copy);

1403 10 operator = 0 4 1558 22 Randomizer::operator = 0 1 640 0
59
inline void Randomizer::operator =(Randomizer const &copy);

1404 10 random_int 0 4 1558 22 Randomizer::random_int 0 1 641 60
/**
 * Returns a random integer in the range [0, range).
 */
45
inline int Randomizer::random_int(int range);

1405 11 random_real 0 4 1558 23 Randomizer::random_real 0 1 642 59
/**
 * Returns a random double in the range [0, range).
 */
52
inline double Randomizer::random_real(double range);

1406 16 random_real_unit 0 4 1558 28 Randomizer::random_real_unit 0 1 643 60
/**
 * Returns a random double in the range [-0.5, 0.5).
 */
49
inline double Randomizer::random_real_unit(void);

1407 13 get_next_seed 0 4 1558 25 Randomizer::get_next_seed 0 1 644 77
/**
 * Returns a random seed value for the next global Randomizer object.
 */
64
static inline unsigned long int Randomizer::get_next_seed(void);

1408 8 get_seed 0 4 1558 20 Randomizer::get_seed 0 1 645 126
/**
 * Returns a unique seed value based on the seed value passed to this
 * Randomizer object (and on its current state).
 */
52
inline unsigned long int Randomizer::get_seed(void);

1409 11 ~Randomizer 0 4 1558 23 Randomizer::~Randomizer 0 0 0
30
Randomizer::~Randomizer(void);

1410 8 get_seed 0 4 1559 21 PerlinNoise::get_seed 0 1 646 127
/**
 * Returns a unique seed value based on the seed value passed to this
 * PerlinNoise object (and on its current state).
 */
53
inline unsigned long int PerlinNoise::get_seed(void);

1411 12 ~PerlinNoise 0 4 1559 25 PerlinNoise::~PerlinNoise 0 0 0
32
PerlinNoise::~PerlinNoise(void);

1412 12 PerlinNoise2 0 4 1560 26 PerlinNoise2::PerlinNoise2 0 3 647 648 649 400
/**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */

/**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */
217
inline PerlinNoise2::PerlinNoise2(void);
inline explicit PerlinNoise2::PerlinNoise2(double sx, double sy, int table_size = 256, unsigned long int seed = 0);
inline PerlinNoise2::PerlinNoise2(PerlinNoise2 const &copy);

1413 10 operator = 0 4 1560 24 PerlinNoise2::operator = 0 1 650 0
63
inline void PerlinNoise2::operator =(PerlinNoise2 const &copy);

1414 9 set_scale 0 4 1560 23 PerlinNoise2::set_scale 0 4 651 652 653 654 222
/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */
233
inline void PerlinNoise2::set_scale(double scale);
inline void PerlinNoise2::set_scale(double sx, double sy);
inline void PerlinNoise2::set_scale(LVecBase2f const &scale);
inline void PerlinNoise2::set_scale(LVecBase2d const &scale);

1415 5 noise 0 4 1560 19 PerlinNoise2::noise 0 3 655 656 657 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
184
inline double PerlinNoise2::noise(double x, double y) const;
inline float PerlinNoise2::noise(LVecBase2f const &value) const;
double PerlinNoise2::noise(LVecBase2d const &value) const;

1416 11 operator () 0 4 1560 25 PerlinNoise2::operator () 0 3 658 659 660 0
209
inline double PerlinNoise2::operator ()(double x, double y) const;
inline float PerlinNoise2::operator ()(LVecBase2f const &value) const;
inline double PerlinNoise2::operator ()(LVecBase2d const &value) const;

1417 13 ~PerlinNoise2 0 4 1560 27 PerlinNoise2::~PerlinNoise2 0 0 0
34
PerlinNoise2::~PerlinNoise2(void);

1418 12 PerlinNoise3 0 4 1561 26 PerlinNoise3::PerlinNoise3 0 3 661 662 663 400
/**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */

/**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */
228
inline PerlinNoise3::PerlinNoise3(void);
inline explicit PerlinNoise3::PerlinNoise3(double sx, double sy, double sz, int table_size = 256, unsigned long int seed = 0);
inline PerlinNoise3::PerlinNoise3(PerlinNoise3 const &copy);

1419 10 operator = 0 4 1561 24 PerlinNoise3::operator = 0 1 664 0
63
inline void PerlinNoise3::operator =(PerlinNoise3 const &copy);

1420 9 set_scale 0 4 1561 23 PerlinNoise3::set_scale 0 4 665 666 667 668 222
/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */
244
inline void PerlinNoise3::set_scale(double scale);
inline void PerlinNoise3::set_scale(double sx, double sy, double sz);
inline void PerlinNoise3::set_scale(LVecBase3f const &scale);
inline void PerlinNoise3::set_scale(LVecBase3d const &scale);

1421 5 noise 0 4 1561 19 PerlinNoise3::noise 0 3 669 670 671 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
194
inline double PerlinNoise3::noise(double x, double y, double z) const;
inline float PerlinNoise3::noise(LVecBase3f const &value) const;
double PerlinNoise3::noise(LVecBase3d const &value) const;

1422 11 operator () 0 4 1561 25 PerlinNoise3::operator () 0 3 672 673 674 0
219
inline double PerlinNoise3::operator ()(double x, double y, double z) const;
inline float PerlinNoise3::operator ()(LVecBase3f const &value) const;
inline double PerlinNoise3::operator ()(LVecBase3d const &value) const;

1423 13 ~PerlinNoise3 0 4 1561 27 PerlinNoise3::~PerlinNoise3 0 0 0
34
PerlinNoise3::~PerlinNoise3(void);

1424 9 rotate_to 0 1 0 9 rotate_to 0 4 749 750 751 752 0
287
void rotate_to(LMatrix3f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix3d &mat, LVector3d const &a, LVector3d const &b);
void rotate_to(LMatrix4f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix4d &mat, LVector3d const &a, LVector3d const &b);

1425 19 StackedPerlinNoise2 0 4 1618 40 StackedPerlinNoise2::StackedPerlinNoise2 0 3 675 676 677 555
/**
 * Creates a StackedPerlinNoise2 object with no levels.  You should call
 * add_level() to add each level by hand.
 */

/**
 * Creates num_levels nested PerlinNoise2 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */

/**
 * Creates an exact duplicate of the existing StackedPerlinNoise2 object,
 * including the random seed.
 */
323
inline StackedPerlinNoise2::StackedPerlinNoise2(void);
explicit StackedPerlinNoise2::StackedPerlinNoise2(double sx, double sy, int num_levels = 2, double scale_factor = 4.0, double amp_scale = 0.5, int table_size = 256, unsigned long int seed = 0);
StackedPerlinNoise2::StackedPerlinNoise2(StackedPerlinNoise2 const &copy);

1426 10 operator = 0 4 1618 31 StackedPerlinNoise2::operator = 0 1 678 0
70
void StackedPerlinNoise2::operator =(StackedPerlinNoise2 const &copy);

1427 9 add_level 0 4 1618 30 StackedPerlinNoise2::add_level 0 1 679 95
/**
 * Adds an arbitrary PerlinNoise2 object, and an associated amplitude, to the
 * stack.
 */
81
void StackedPerlinNoise2::add_level(PerlinNoise2 const &level, double amp = 1.0);

1428 5 clear 0 4 1618 26 StackedPerlinNoise2::clear 0 1 680 98
/**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */
38
void StackedPerlinNoise2::clear(void);

1429 5 noise 0 4 1618 26 StackedPerlinNoise2::noise 0 3 681 682 683 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
187
inline double StackedPerlinNoise2::noise(double x, double y);
inline float StackedPerlinNoise2::noise(LVecBase2f const &value);
double StackedPerlinNoise2::noise(LVecBase2d const &value);

1430 11 operator () 0 4 1618 32 StackedPerlinNoise2::operator () 0 3 684 685 686 0
212
inline double StackedPerlinNoise2::operator ()(double x, double y);
inline float StackedPerlinNoise2::operator ()(LVecBase2f const &value);
inline double StackedPerlinNoise2::operator ()(LVecBase2d const &value);

1431 20 ~StackedPerlinNoise2 0 4 1618 41 StackedPerlinNoise2::~StackedPerlinNoise2 0 0 0
48
StackedPerlinNoise2::~StackedPerlinNoise2(void);

1432 19 StackedPerlinNoise3 0 4 1619 40 StackedPerlinNoise3::StackedPerlinNoise3 0 3 687 688 689 555
/**
 * Creates a StackedPerlinNoise3 object with no levels.  You should call
 * add_level() to add each level by hand.
 */

/**
 * Creates num_levels nested PerlinNoise3 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */

/**
 * Creates an exact duplicate of the existing StackedPerlinNoise3 object,
 * including the random seed.
 */
334
inline StackedPerlinNoise3::StackedPerlinNoise3(void);
explicit StackedPerlinNoise3::StackedPerlinNoise3(double sx, double sy, double sz, int num_levels = 3, double scale_factor = 4.0, double amp_scale = 0.5, int table_size = 256, unsigned long int seed = 0);
StackedPerlinNoise3::StackedPerlinNoise3(StackedPerlinNoise3 const &copy);

1433 10 operator = 0 4 1619 31 StackedPerlinNoise3::operator = 0 1 690 0
70
void StackedPerlinNoise3::operator =(StackedPerlinNoise3 const &copy);

1434 9 add_level 0 4 1619 30 StackedPerlinNoise3::add_level 0 1 691 95
/**
 * Adds an arbitrary PerlinNoise3 object, and an associated amplitude, to the
 * stack.
 */
81
void StackedPerlinNoise3::add_level(PerlinNoise3 const &level, double amp = 1.0);

1435 5 clear 0 4 1619 26 StackedPerlinNoise3::clear 0 1 692 98
/**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */
38
void StackedPerlinNoise3::clear(void);

1436 5 noise 0 4 1619 26 StackedPerlinNoise3::noise 0 3 693 694 695 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
197
inline double StackedPerlinNoise3::noise(double x, double y, double z);
inline float StackedPerlinNoise3::noise(LVecBase3f const &value);
double StackedPerlinNoise3::noise(LVecBase3d const &value);

1437 11 operator () 0 4 1619 32 StackedPerlinNoise3::operator () 0 3 696 697 698 0
222
inline double StackedPerlinNoise3::operator ()(double x, double y, double z);
inline float StackedPerlinNoise3::operator ()(LVecBase3f const &value);
inline double StackedPerlinNoise3::operator ()(LVecBase3d const &value);

1438 20 ~StackedPerlinNoise3 0 4 1619 41 StackedPerlinNoise3::~StackedPerlinNoise3 0 0 0
48
StackedPerlinNoise3::~StackedPerlinNoise3(void);

1439 12 Triangulator 0 4 1620 26 Triangulator::Triangulator 0 2 699 700 10
/**
 *
 */
100
Triangulator::Triangulator(void);
inline Triangulator::Triangulator(Triangulator const &) = default;

1440 5 clear 0 4 1620 19 Triangulator::clear 0 1 701 115
/**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */
31
void Triangulator::clear(void);

1441 10 add_vertex 0 4 1620 24 Triangulator::add_vertex 0 2 702 703 166
/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */

/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */
109
int Triangulator::add_vertex(LPoint2d const &point);
inline int Triangulator::add_vertex(double x, double y);

1442 16 get_num_vertices 0 4 1620 30 Triangulator::get_num_vertices 0 1 704 267
/**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */
54
inline int Triangulator::get_num_vertices(void) const;

1443 10 get_vertex 0 4 1620 24 Triangulator::get_vertex 0 1 705 34
/**
 * Returns the nth vertex.
 */
61
inline LPoint2d const &Triangulator::get_vertex(int n) const;

1444 0 0 0 0 0 0 0 0
0

1445 13 clear_polygon 0 4 1620 27 Triangulator::clear_polygon 0 1 706 112
/**
 * Removes the current polygon definition (and its set of holes), but does not
 * clear the vertex pool.
 */
39
void Triangulator::clear_polygon(void);

1446 18 add_polygon_vertex 0 4 1620 32 Triangulator::add_polygon_vertex 0 1 707 334
/**
 * Adds the next consecutive vertex of the polygon.  This vertex should index
 * into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.  In particular, do not repeat the first
 * vertex at the end.
 */
49
void Triangulator::add_polygon_vertex(int index);

1447 15 is_left_winding 0 4 1620 29 Triangulator::is_left_winding 0 1 708 145
/**
 * Returns true if the polygon vertices are listed in counterclockwise order,
 * or false if they appear to be listed in clockwise order.
 */
54
inline bool Triangulator::is_left_winding(void) const;

1448 10 begin_hole 0 4 1620 24 Triangulator::begin_hole 0 1 709 78
/**
 * Finishes the previous hole, if any, and prepares to add a new hole.
 */
36
void Triangulator::begin_hole(void);

1449 15 add_hole_vertex 0 4 1620 29 Triangulator::add_hole_vertex 0 1 710 277
/**
 * Adds the next consecutive vertex of the current hole.  This vertex should
 * index into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.
 */
46
void Triangulator::add_hole_vertex(int index);

1450 11 triangulate 0 4 1620 25 Triangulator::triangulate 0 1 711 181
/**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */
37
void Triangulator::triangulate(void);

1451 17 get_num_triangles 0 4 1620 31 Triangulator::get_num_triangles 0 1 712 94
/**
 * Returns the number of triangles generated by the previous call to
 * triangulate().
 */
48
int Triangulator::get_num_triangles(void) const;

1452 15 get_triangle_v0 0 4 1620 29 Triangulator::get_triangle_v0 0 1 713 194
/**
 * Returns vertex 0 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v0(int n) const;

1453 15 get_triangle_v1 0 4 1620 29 Triangulator::get_triangle_v1 0 1 714 194
/**
 * Returns vertex 1 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v1(int n) const;

1454 15 get_triangle_v2 0 4 1620 29 Triangulator::get_triangle_v2 0 1 715 194
/**
 * Returns vertex 2 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v2(int n) const;

1455 13 ~Triangulator 0 4 1620 27 Triangulator::~Triangulator 0 0 0
34
Triangulator::~Triangulator(void);

1456 13 Triangulator3 0 4 1623 28 Triangulator3::Triangulator3 0 2 716 717 10
/**
 *
 */
105
Triangulator3::Triangulator3(void);
inline Triangulator3::Triangulator3(Triangulator3 const &) = default;

1457 5 clear 0 4 1623 20 Triangulator3::clear 0 1 718 115
/**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */
32
void Triangulator3::clear(void);

1458 10 add_vertex 0 4 1623 25 Triangulator3::add_vertex 0 2 719 720 166
/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */

/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */
121
int Triangulator3::add_vertex(LPoint3d const &point);
inline int Triangulator3::add_vertex(double x, double y, double z);

1459 16 get_num_vertices 0 4 1623 31 Triangulator3::get_num_vertices 0 1 721 267
/**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */
55
inline int Triangulator3::get_num_vertices(void) const;

1460 10 get_vertex 0 4 1623 25 Triangulator3::get_vertex 0 1 722 34
/**
 * Returns the nth vertex.
 */
62
inline LPoint3d const &Triangulator3::get_vertex(int n) const;

1461 11 triangulate 0 4 1623 26 Triangulator3::triangulate 0 1 723 181
/**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */
38
void Triangulator3::triangulate(void);

1462 9 get_plane 0 4 1623 24 Triangulator3::get_plane 0 1 724 100
/**
 * Returns the plane of the polygon.  This is only available after calling
 * triangulate().
 */
59
inline LPlaned const &Triangulator3::get_plane(void) const;

1463 0 0 0 0 0 0 0 0
0

1464 14 ~Triangulator3 0 4 1623 29 Triangulator3::~Triangulator3 0 0 0
36
Triangulator3::~Triangulator3(void);

752
1 0 0 7 8 1629 768 0 0 1 4 copy 1 1627  
2 0 0 7 8 1629 768 0 0 1 4 copy 1 1630  
3 0 0 4 9 1632 0 0 0 1 4 this 3 1629  
4 0 0 6 10 1633 0 0 0 1 4 this 3 1627  
5 0 0 6 11 1634 0 0 0 2 4 this 3 1627  1 n 1 1633  
6 0 0 6 12 1634 0 0 0 2 4 this 3 1627  1 n 1 1633  
7 0 0 6 13 1637 0 0 0 1 4 this 3 1627  
8 0 0 6 14 1637 0 0 0 3 4 this 3 1627  1 n 1 1633  5 count 1 1633  
9 0 0 6 15 1640 0 0 0 1 4 this 3 1627  
10 0 0 6 16 1640 0 0 0 1 4 this 3 1627  
11 0 0 6 17 1633 0 0 0 2 4 this 3 1627  6 param0 0 1634  
12 0 0 6 18 1640 0 0 0 3 4 this 3 1627  4 view 1 1641  5 flags 1 1640  
13 0 0 4 19 1632 0 0 0 2 4 this 3 1627  4 view 1 1641  
14 0 0 4 5 1632 0 0 0 1 4 this 3 1644  
15 0 0 4 6 1632 0 0 0 2 4 this 3 1645  3 out 1 1647  
16 0 0 7 27 1651 784 0 0 1 4 copy 1 1649  
17 0 0 7 27 1651 784 0 0 1 4 copy 1 1652  
18 0 0 4 28 1632 0 0 0 1 4 this 3 1651  
19 0 0 6 29 1633 0 0 0 1 4 this 3 1649  
20 0 0 6 30 1654 0 0 0 2 4 this 3 1649  1 n 1 1633  
21 0 0 6 31 1654 0 0 0 2 4 this 3 1649  1 n 1 1633  
22 0 0 6 32 1637 0 0 0 1 4 this 3 1649  
23 0 0 6 33 1637 0 0 0 3 4 this 3 1649  1 n 1 1633  5 count 1 1633  
24 0 0 6 34 1640 0 0 0 1 4 this 3 1649  
25 0 0 6 35 1640 0 0 0 1 4 this 3 1649  
26 0 0 6 36 1633 0 0 0 2 4 this 3 1649  6 param0 0 1654  
27 0 0 6 37 1640 0 0 0 3 4 this 3 1649  4 view 1 1641  5 flags 1 1640  
28 0 0 4 38 1632 0 0 0 2 4 this 3 1649  4 view 1 1641  
29 0 0 4 24 1632 0 0 0 1 4 this 3 1657  
30 0 0 4 25 1632 0 0 0 2 4 this 3 1658  3 out 1 1647  
31 0 0 7 46 1662 800 0 0 1 4 copy 1 1660  
32 0 0 7 46 1662 800 0 0 1 4 copy 1 1663  
33 0 0 4 47 1632 0 0 0 1 4 this 3 1662  
34 0 0 6 48 1633 0 0 0 1 4 this 3 1660  
35 0 0 6 49 1665 0 0 0 2 4 this 3 1660  1 n 1 1633  
36 0 0 6 50 1665 0 0 0 2 4 this 3 1660  1 n 1 1633  
37 0 0 6 51 1637 0 0 0 1 4 this 3 1660  
38 0 0 6 52 1637 0 0 0 3 4 this 3 1660  1 n 1 1633  5 count 1 1633  
39 0 0 6 53 1640 0 0 0 1 4 this 3 1660  
40 0 0 6 54 1640 0 0 0 1 4 this 3 1660  
41 0 0 6 55 1633 0 0 0 2 4 this 3 1660  6 param0 0 1665  
42 0 0 6 56 1640 0 0 0 3 4 this 3 1660  4 view 1 1641  5 flags 1 1640  
43 0 0 4 57 1632 0 0 0 2 4 this 3 1660  4 view 1 1641  
44 0 0 4 43 1632 0 0 0 1 4 this 3 1668  
45 0 0 4 44 1632 0 0 0 2 4 this 3 1669  3 out 1 1647  
46 0 0 7 65 1673 816 0 0 1 4 copy 1 1671  
47 0 0 7 65 1673 816 0 0 1 4 copy 1 1674  
48 0 0 4 66 1632 0 0 0 1 4 this 3 1673  
49 0 0 6 67 1633 0 0 0 1 4 this 3 1671  
50 0 0 6 68 1676 0 0 0 2 4 this 3 1671  1 n 1 1633  
51 0 0 6 69 1676 0 0 0 2 4 this 3 1671  1 n 1 1633  
52 0 0 6 70 1637 0 0 0 1 4 this 3 1671  
53 0 0 6 71 1637 0 0 0 3 4 this 3 1671  1 n 1 1633  5 count 1 1633  
54 0 0 6 72 1640 0 0 0 1 4 this 3 1671  
55 0 0 6 73 1640 0 0 0 1 4 this 3 1671  
56 0 0 6 74 1633 0 0 0 2 4 this 3 1671  6 param0 0 1676  
57 0 0 6 75 1640 0 0 0 3 4 this 3 1671  4 view 1 1641  5 flags 1 1640  
58 0 0 4 76 1632 0 0 0 2 4 this 3 1671  4 view 1 1641  
59 0 0 4 62 1632 0 0 0 1 4 this 3 1679  
60 0 0 4 63 1632 0 0 0 2 4 this 3 1680  3 out 1 1647  
61 0 0 7 84 1684 832 0 0 1 4 copy 1 1682  
62 0 0 7 84 1684 832 0 0 1 4 copy 1 1685  
63 0 0 4 85 1632 0 0 0 1 4 this 3 1684  
64 0 0 6 86 1633 0 0 0 1 4 this 3 1682  
65 0 0 6 87 1687 0 0 0 2 4 this 3 1682  1 n 1 1633  
66 0 0 6 88 1687 0 0 0 2 4 this 3 1682  1 n 1 1633  
67 0 0 6 89 1637 0 0 0 1 4 this 3 1682  
68 0 0 6 90 1637 0 0 0 3 4 this 3 1682  1 n 1 1633  5 count 1 1633  
69 0 0 6 91 1640 0 0 0 1 4 this 3 1682  
70 0 0 6 92 1640 0 0 0 1 4 this 3 1682  
71 0 0 6 93 1633 0 0 0 2 4 this 3 1682  6 param0 0 1687  
72 0 0 6 94 1640 0 0 0 3 4 this 3 1682  4 view 1 1641  5 flags 1 1640  
73 0 0 4 95 1632 0 0 0 2 4 this 3 1682  4 view 1 1641  
74 0 0 4 81 1632 0 0 0 1 4 this 3 1690  
75 0 0 4 82 1632 0 0 0 2 4 this 3 1691  3 out 1 1647  
76 0 0 7 103 1695 848 0 0 1 4 copy 1 1693  
77 0 0 7 103 1695 848 0 0 1 4 copy 1 1696  
78 0 0 4 104 1632 0 0 0 1 4 this 3 1695  
79 0 0 6 105 1633 0 0 0 1 4 this 3 1693  
80 0 0 6 106 1698 0 0 0 2 4 this 3 1693  1 n 1 1633  
81 0 0 6 107 1698 0 0 0 2 4 this 3 1693  1 n 1 1633  
82 0 0 6 108 1637 0 0 0 1 4 this 3 1693  
83 0 0 6 109 1637 0 0 0 3 4 this 3 1693  1 n 1 1633  5 count 1 1633  
84 0 0 6 110 1640 0 0 0 1 4 this 3 1693  
85 0 0 6 111 1640 0 0 0 1 4 this 3 1693  
86 0 0 6 112 1633 0 0 0 2 4 this 3 1693  6 param0 0 1698  
87 0 0 6 113 1640 0 0 0 3 4 this 3 1693  4 view 1 1641  5 flags 1 1640  
88 0 0 4 114 1632 0 0 0 2 4 this 3 1693  4 view 1 1641  
89 0 0 4 100 1632 0 0 0 1 4 this 3 1701  
90 0 0 4 101 1632 0 0 0 2 4 this 3 1702  3 out 1 1647  
91 0 0 7 122 1706 864 0 0 1 4 copy 1 1704  
92 0 0 7 122 1706 864 0 0 1 4 copy 1 1707  
93 0 0 4 123 1632 0 0 0 1 4 this 3 1706  
94 0 0 6 124 1633 0 0 0 1 4 this 3 1704  
95 0 0 6 125 1709 0 0 0 2 4 this 3 1704  1 n 1 1633  
96 0 0 6 126 1709 0 0 0 2 4 this 3 1704  1 n 1 1633  
97 0 0 6 127 1637 0 0 0 1 4 this 3 1704  
98 0 0 6 128 1637 0 0 0 3 4 this 3 1704  1 n 1 1633  5 count 1 1633  
99 0 0 6 129 1640 0 0 0 1 4 this 3 1704  
100 0 0 6 130 1640 0 0 0 1 4 this 3 1704  
101 0 0 6 131 1633 0 0 0 2 4 this 3 1704  6 param0 0 1709  
102 0 0 6 132 1640 0 0 0 3 4 this 3 1704  4 view 1 1641  5 flags 1 1640  
103 0 0 4 133 1632 0 0 0 2 4 this 3 1704  4 view 1 1641  
104 0 0 4 119 1632 0 0 0 1 4 this 3 1712  
105 0 0 4 120 1632 0 0 0 2 4 this 3 1713  3 out 1 1647  
106 0 0 7 141 1717 880 0 0 1 4 copy 1 1715  
107 0 0 7 141 1717 880 0 0 1 4 copy 1 1718  
108 0 0 4 142 1632 0 0 0 1 4 this 3 1717  
109 0 0 6 143 1633 0 0 0 1 4 this 3 1715  
110 0 0 6 144 1720 0 0 0 2 4 this 3 1715  1 n 1 1633  
111 0 0 6 145 1720 0 0 0 2 4 this 3 1715  1 n 1 1633  
112 0 0 6 146 1637 0 0 0 1 4 this 3 1715  
113 0 0 6 147 1637 0 0 0 3 4 this 3 1715  1 n 1 1633  5 count 1 1633  
114 0 0 6 148 1640 0 0 0 1 4 this 3 1715  
115 0 0 6 149 1640 0 0 0 1 4 this 3 1715  
116 0 0 6 150 1633 0 0 0 2 4 this 3 1715  6 param0 0 1720  
117 0 0 6 151 1640 0 0 0 3 4 this 3 1715  4 view 1 1641  5 flags 1 1640  
118 0 0 4 152 1632 0 0 0 2 4 this 3 1715  4 view 1 1641  
119 0 0 4 138 1632 0 0 0 1 4 this 3 1723  
120 0 0 4 139 1632 0 0 0 2 4 this 3 1724  3 out 1 1647  
121 0 0 7 160 1728 896 0 0 1 4 copy 1 1726  
122 0 0 7 160 1728 896 0 0 1 4 copy 1 1729  
123 0 0 4 161 1632 0 0 0 1 4 this 3 1728  
124 0 0 6 162 1633 0 0 0 1 4 this 3 1726  
125 0 0 6 163 1731 0 0 0 2 4 this 3 1726  1 n 1 1633  
126 0 0 6 164 1731 0 0 0 2 4 this 3 1726  1 n 1 1633  
127 0 0 6 165 1637 0 0 0 1 4 this 3 1726  
128 0 0 6 166 1637 0 0 0 3 4 this 3 1726  1 n 1 1633  5 count 1 1633  
129 0 0 6 167 1640 0 0 0 1 4 this 3 1726  
130 0 0 6 168 1640 0 0 0 1 4 this 3 1726  
131 0 0 6 169 1633 0 0 0 2 4 this 3 1726  6 param0 0 1731  
132 0 0 6 170 1640 0 0 0 3 4 this 3 1726  4 view 1 1641  5 flags 1 1640  
133 0 0 4 171 1632 0 0 0 2 4 this 3 1726  4 view 1 1641  
134 0 0 4 157 1632 0 0 0 1 4 this 3 1734  
135 0 0 4 158 1632 0 0 0 2 4 this 3 1735  3 out 1 1647  
136 0 0 7 179 1739 912 0 0 1 4 copy 1 1737  
137 0 0 7 179 1739 912 0 0 1 4 copy 1 1740  
138 0 0 4 180 1632 0 0 0 1 4 this 3 1739  
139 0 0 6 181 1633 0 0 0 1 4 this 3 1737  
140 0 0 6 182 1742 0 0 0 2 4 this 3 1737  1 n 1 1633  
141 0 0 6 183 1742 0 0 0 2 4 this 3 1737  1 n 1 1633  
142 0 0 6 184 1637 0 0 0 1 4 this 3 1737  
143 0 0 6 185 1637 0 0 0 3 4 this 3 1737  1 n 1 1633  5 count 1 1633  
144 0 0 6 186 1640 0 0 0 1 4 this 3 1737  
145 0 0 6 187 1640 0 0 0 1 4 this 3 1737  
146 0 0 6 188 1633 0 0 0 2 4 this 3 1737  6 param0 0 1742  
147 0 0 6 189 1640 0 0 0 3 4 this 3 1737  4 view 1 1641  5 flags 1 1640  
148 0 0 4 190 1632 0 0 0 2 4 this 3 1737  4 view 1 1641  
149 0 0 4 176 1632 0 0 0 1 4 this 3 1745  
150 0 0 4 177 1632 0 0 0 2 4 this 3 1746  3 out 1 1647  
151 0 0 7 198 1750 928 0 0 1 4 copy 1 1748  
152 0 0 7 198 1750 928 0 0 1 4 copy 1 1751  
153 0 0 4 199 1632 0 0 0 1 4 this 3 1750  
154 0 0 6 200 1633 0 0 0 1 4 this 3 1748  
155 0 0 6 201 1753 0 0 0 2 4 this 3 1748  1 n 1 1633  
156 0 0 6 202 1753 0 0 0 2 4 this 3 1748  1 n 1 1633  
157 0 0 6 203 1637 0 0 0 1 4 this 3 1748  
158 0 0 6 204 1637 0 0 0 3 4 this 3 1748  1 n 1 1633  5 count 1 1633  
159 0 0 6 205 1640 0 0 0 1 4 this 3 1748  
160 0 0 6 206 1640 0 0 0 1 4 this 3 1748  
161 0 0 6 207 1633 0 0 0 2 4 this 3 1748  6 param0 0 1753  
162 0 0 6 208 1640 0 0 0 3 4 this 3 1748  4 view 1 1641  5 flags 1 1640  
163 0 0 4 209 1632 0 0 0 2 4 this 3 1748  4 view 1 1641  
164 0 0 4 195 1632 0 0 0 1 4 this 3 1756  
165 0 0 4 196 1632 0 0 0 2 4 this 3 1757  3 out 1 1647  
166 0 0 7 217 1761 944 0 0 1 4 copy 1 1759  
167 0 0 7 217 1761 944 0 0 1 4 copy 1 1762  
168 0 0 4 218 1632 0 0 0 1 4 this 3 1761  
169 0 0 6 219 1633 0 0 0 1 4 this 3 1759  
170 0 0 6 220 1764 0 0 0 2 4 this 3 1759  1 n 1 1633  
171 0 0 6 221 1764 0 0 0 2 4 this 3 1759  1 n 1 1633  
172 0 0 6 222 1637 0 0 0 1 4 this 3 1759  
173 0 0 6 223 1637 0 0 0 3 4 this 3 1759  1 n 1 1633  5 count 1 1633  
174 0 0 6 224 1640 0 0 0 1 4 this 3 1759  
175 0 0 6 225 1640 0 0 0 1 4 this 3 1759  
176 0 0 6 226 1633 0 0 0 2 4 this 3 1759  6 param0 0 1764  
177 0 0 6 227 1640 0 0 0 3 4 this 3 1759  4 view 1 1641  5 flags 1 1640  
178 0 0 4 228 1632 0 0 0 2 4 this 3 1759  4 view 1 1641  
179 0 0 4 214 1632 0 0 0 1 4 this 3 1767  
180 0 0 4 215 1632 0 0 0 2 4 this 3 1768  3 out 1 1647  
181 0 0 7 236 1772 960 0 0 1 4 copy 1 1770  
182 0 0 7 236 1772 960 0 0 1 4 copy 1 1773  
183 0 0 4 237 1632 0 0 0 1 4 this 3 1772  
184 0 0 6 238 1633 0 0 0 1 4 this 3 1770  
185 0 0 6 239 1775 0 0 0 2 4 this 3 1770  1 n 1 1633  
186 0 0 6 240 1775 0 0 0 2 4 this 3 1770  1 n 1 1633  
187 0 0 6 241 1637 0 0 0 1 4 this 3 1770  
188 0 0 6 242 1637 0 0 0 3 4 this 3 1770  1 n 1 1633  5 count 1 1633  
189 0 0 6 243 1640 0 0 0 1 4 this 3 1770  
190 0 0 6 244 1640 0 0 0 1 4 this 3 1770  
191 0 0 6 245 1633 0 0 0 2 4 this 3 1770  6 param0 0 1775  
192 0 0 6 246 1640 0 0 0 3 4 this 3 1770  4 view 1 1641  5 flags 1 1640  
193 0 0 4 247 1632 0 0 0 2 4 this 3 1770  4 view 1 1641  
194 0 0 4 233 1632 0 0 0 1 4 this 3 1778  
195 0 0 4 234 1632 0 0 0 2 4 this 3 1779  3 out 1 1647  
196 0 0 7 250 1781 980 0 0 1 4 copy 1 1630  
197 0 0 7 250 1781 980 0 0 1 6 source 1 1637  
198 0 0 7 250 1781 980 0 0 1 11 type_handle 1 1782  
199 0 0 7 251 1781 980 0 0 2 1 n 1 1633  11 type_handle 1 1782  
200 0 0 4 252 1632 0 0 0 1 4 this 3 1781  
201 0 0 6 253 1633 0 0 0 1 4 this 3 1630  
202 0 0 4 254 1632 0 0 0 2 4 this 3 1781  1 x 1 1634  
203 0 0 4 255 1632 0 0 0 1 4 this 3 1781  
204 0 0 6 256 1634 0 0 0 2 4 this 3 1630  1 n 1 1633  
205 0 0 4 257 1632 0 0 0 3 4 this 3 1781  1 n 1 1633  5 value 1 1634  
206 0 0 6 258 1634 0 0 0 2 4 this 3 1630  1 n 1 1633  
207 0 0 4 259 1632 0 0 0 3 4 this 3 1781  1 n 1 1633  5 value 1 1634  
208 0 0 6 260 1637 0 0 0 1 4 this 3 1630  
209 0 0 4 261 1632 0 0 0 2 4 this 3 1781  4 data 1 1637  
210 0 0 6 262 1637 0 0 0 3 4 this 3 1630  1 n 1 1633  5 count 1 1633  
211 0 0 4 263 1632 0 0 0 4 4 this 3 1781  1 n 1 1633  5 count 1 1633  4 data 1 1784  
212 0 0 6 264 1640 0 0 0 1 4 this 3 1630  
213 0 0 6 265 1640 0 0 0 1 4 this 3 1630  
214 0 0 6 266 1633 0 0 0 2 4 this 3 1630  6 param0 0 1634  
215 0 0 6 267 1640 0 0 0 3 4 this 3 1781  4 view 1 1641  5 flags 1 1640  
216 0 0 4 268 1632 0 0 0 2 4 this 3 1630  4 view 1 1641  
217 0 0 7 271 1785 1000 0 0 1 4 copy 1 1652  
218 0 0 7 271 1785 1000 0 0 1 6 source 1 1637  
219 0 0 7 271 1785 1000 0 0 1 11 type_handle 1 1782  
220 0 0 7 272 1785 1000 0 0 2 1 n 1 1633  11 type_handle 1 1782  
221 0 0 4 273 1632 0 0 0 1 4 this 3 1785  
222 0 0 6 274 1633 0 0 0 1 4 this 3 1652  
223 0 0 4 275 1632 0 0 0 2 4 this 3 1785  1 x 1 1654  
224 0 0 4 276 1632 0 0 0 1 4 this 3 1785  
225 0 0 6 277 1654 0 0 0 2 4 this 3 1652  1 n 1 1633  
226 0 0 4 278 1632 0 0 0 3 4 this 3 1785  1 n 1 1633  5 value 1 1654  
227 0 0 6 279 1654 0 0 0 2 4 this 3 1652  1 n 1 1633  
228 0 0 4 280 1632 0 0 0 3 4 this 3 1785  1 n 1 1633  5 value 1 1654  
229 0 0 6 281 1637 0 0 0 1 4 this 3 1652  
230 0 0 4 282 1632 0 0 0 2 4 this 3 1785  4 data 1 1637  
231 0 0 6 283 1637 0 0 0 3 4 this 3 1652  1 n 1 1633  5 count 1 1633  
232 0 0 4 284 1632 0 0 0 4 4 this 3 1785  1 n 1 1633  5 count 1 1633  4 data 1 1784  
233 0 0 6 285 1640 0 0 0 1 4 this 3 1652  
234 0 0 6 286 1640 0 0 0 1 4 this 3 1652  
235 0 0 6 287 1633 0 0 0 2 4 this 3 1652  6 param0 0 1654  
236 0 0 6 288 1640 0 0 0 3 4 this 3 1785  4 view 1 1641  5 flags 1 1640  
237 0 0 4 289 1632 0 0 0 2 4 this 3 1652  4 view 1 1641  
238 0 0 7 292 1786 1020 0 0 1 4 copy 1 1663  
239 0 0 7 292 1786 1020 0 0 1 6 source 1 1637  
240 0 0 7 292 1786 1020 0 0 1 11 type_handle 1 1782  
241 0 0 7 293 1786 1020 0 0 2 1 n 1 1633  11 type_handle 1 1782  
242 0 0 4 294 1632 0 0 0 1 4 this 3 1786  
243 0 0 6 295 1633 0 0 0 1 4 this 3 1663  
244 0 0 4 296 1632 0 0 0 2 4 this 3 1786  1 x 1 1665  
245 0 0 4 297 1632 0 0 0 1 4 this 3 1786  
246 0 0 6 298 1665 0 0 0 2 4 this 3 1663  1 n 1 1633  
247 0 0 4 299 1632 0 0 0 3 4 this 3 1786  1 n 1 1633  5 value 1 1665  
248 0 0 6 300 1665 0 0 0 2 4 this 3 1663  1 n 1 1633  
249 0 0 4 301 1632 0 0 0 3 4 this 3 1786  1 n 1 1633  5 value 1 1665  
250 0 0 6 302 1637 0 0 0 1 4 this 3 1663  
251 0 0 4 303 1632 0 0 0 2 4 this 3 1786  4 data 1 1637  
252 0 0 6 304 1637 0 0 0 3 4 this 3 1663  1 n 1 1633  5 count 1 1633  
253 0 0 4 305 1632 0 0 0 4 4 this 3 1786  1 n 1 1633  5 count 1 1633  4 data 1 1784  
254 0 0 6 306 1640 0 0 0 1 4 this 3 1663  
255 0 0 6 307 1640 0 0 0 1 4 this 3 1663  
256 0 0 6 308 1633 0 0 0 2 4 this 3 1663  6 param0 0 1665  
257 0 0 6 309 1640 0 0 0 3 4 this 3 1786  4 view 1 1641  5 flags 1 1640  
258 0 0 4 310 1632 0 0 0 2 4 this 3 1663  4 view 1 1641  
259 0 0 7 313 1787 1040 0 0 1 4 copy 1 1674  
260 0 0 7 313 1787 1040 0 0 1 6 source 1 1637  
261 0 0 7 313 1787 1040 0 0 1 11 type_handle 1 1782  
262 0 0 7 314 1787 1040 0 0 2 1 n 1 1633  11 type_handle 1 1782  
263 0 0 4 315 1632 0 0 0 1 4 this 3 1787  
264 0 0 6 316 1633 0 0 0 1 4 this 3 1674  
265 0 0 4 317 1632 0 0 0 2 4 this 3 1787  1 x 1 1676  
266 0 0 4 318 1632 0 0 0 1 4 this 3 1787  
267 0 0 6 319 1676 0 0 0 2 4 this 3 1674  1 n 1 1633  
268 0 0 4 320 1632 0 0 0 3 4 this 3 1787  1 n 1 1633  5 value 1 1676  
269 0 0 6 321 1676 0 0 0 2 4 this 3 1674  1 n 1 1633  
270 0 0 4 322 1632 0 0 0 3 4 this 3 1787  1 n 1 1633  5 value 1 1676  
271 0 0 6 323 1637 0 0 0 1 4 this 3 1674  
272 0 0 4 324 1632 0 0 0 2 4 this 3 1787  4 data 1 1637  
273 0 0 6 325 1637 0 0 0 3 4 this 3 1674  1 n 1 1633  5 count 1 1633  
274 0 0 4 326 1632 0 0 0 4 4 this 3 1787  1 n 1 1633  5 count 1 1633  4 data 1 1784  
275 0 0 6 327 1640 0 0 0 1 4 this 3 1674  
276 0 0 6 328 1640 0 0 0 1 4 this 3 1674  
277 0 0 6 329 1633 0 0 0 2 4 this 3 1674  6 param0 0 1676  
278 0 0 6 330 1640 0 0 0 3 4 this 3 1787  4 view 1 1641  5 flags 1 1640  
279 0 0 4 331 1632 0 0 0 2 4 this 3 1674  4 view 1 1641  
280 0 0 7 334 1788 1060 0 0 1 4 copy 1 1685  
281 0 0 7 334 1788 1060 0 0 1 6 source 1 1637  
282 0 0 7 334 1788 1060 0 0 1 11 type_handle 1 1782  
283 0 0 7 335 1788 1060 0 0 2 1 n 1 1633  11 type_handle 1 1782  
284 0 0 4 336 1632 0 0 0 1 4 this 3 1788  
285 0 0 6 337 1633 0 0 0 1 4 this 3 1685  
286 0 0 4 338 1632 0 0 0 2 4 this 3 1788  1 x 1 1687  
287 0 0 4 339 1632 0 0 0 1 4 this 3 1788  
288 0 0 6 340 1687 0 0 0 2 4 this 3 1685  1 n 1 1633  
289 0 0 4 341 1632 0 0 0 3 4 this 3 1788  1 n 1 1633  5 value 1 1687  
290 0 0 6 342 1687 0 0 0 2 4 this 3 1685  1 n 1 1633  
291 0 0 4 343 1632 0 0 0 3 4 this 3 1788  1 n 1 1633  5 value 1 1687  
292 0 0 6 344 1637 0 0 0 1 4 this 3 1685  
293 0 0 4 345 1632 0 0 0 2 4 this 3 1788  4 data 1 1637  
294 0 0 6 346 1637 0 0 0 3 4 this 3 1685  1 n 1 1633  5 count 1 1633  
295 0 0 4 347 1632 0 0 0 4 4 this 3 1788  1 n 1 1633  5 count 1 1633  4 data 1 1784  
296 0 0 6 348 1640 0 0 0 1 4 this 3 1685  
297 0 0 6 349 1640 0 0 0 1 4 this 3 1685  
298 0 0 6 350 1633 0 0 0 2 4 this 3 1685  6 param0 0 1687  
299 0 0 6 351 1640 0 0 0 3 4 this 3 1788  4 view 1 1641  5 flags 1 1640  
300 0 0 4 352 1632 0 0 0 2 4 this 3 1685  4 view 1 1641  
301 0 0 7 355 1789 1080 0 0 1 4 copy 1 1696  
302 0 0 7 355 1789 1080 0 0 1 6 source 1 1637  
303 0 0 7 355 1789 1080 0 0 1 11 type_handle 1 1782  
304 0 0 7 356 1789 1080 0 0 2 1 n 1 1633  11 type_handle 1 1782  
305 0 0 4 357 1632 0 0 0 1 4 this 3 1789  
306 0 0 6 358 1633 0 0 0 1 4 this 3 1696  
307 0 0 4 359 1632 0 0 0 2 4 this 3 1789  1 x 1 1698  
308 0 0 4 360 1632 0 0 0 1 4 this 3 1789  
309 0 0 6 361 1698 0 0 0 2 4 this 3 1696  1 n 1 1633  
310 0 0 4 362 1632 0 0 0 3 4 this 3 1789  1 n 1 1633  5 value 1 1698  
311 0 0 6 363 1698 0 0 0 2 4 this 3 1696  1 n 1 1633  
312 0 0 4 364 1632 0 0 0 3 4 this 3 1789  1 n 1 1633  5 value 1 1698  
313 0 0 6 365 1637 0 0 0 1 4 this 3 1696  
314 0 0 4 366 1632 0 0 0 2 4 this 3 1789  4 data 1 1637  
315 0 0 6 367 1637 0 0 0 3 4 this 3 1696  1 n 1 1633  5 count 1 1633  
316 0 0 4 368 1632 0 0 0 4 4 this 3 1789  1 n 1 1633  5 count 1 1633  4 data 1 1784  
317 0 0 6 369 1640 0 0 0 1 4 this 3 1696  
318 0 0 6 370 1640 0 0 0 1 4 this 3 1696  
319 0 0 6 371 1633 0 0 0 2 4 this 3 1696  6 param0 0 1698  
320 0 0 6 372 1640 0 0 0 3 4 this 3 1789  4 view 1 1641  5 flags 1 1640  
321 0 0 4 373 1632 0 0 0 2 4 this 3 1696  4 view 1 1641  
322 0 0 7 376 1790 1100 0 0 1 4 copy 1 1707  
323 0 0 7 376 1790 1100 0 0 1 6 source 1 1637  
324 0 0 7 376 1790 1100 0 0 1 11 type_handle 1 1782  
325 0 0 7 377 1790 1100 0 0 2 1 n 1 1633  11 type_handle 1 1782  
326 0 0 4 378 1632 0 0 0 1 4 this 3 1790  
327 0 0 6 379 1633 0 0 0 1 4 this 3 1707  
328 0 0 4 380 1632 0 0 0 2 4 this 3 1790  1 x 1 1709  
329 0 0 4 381 1632 0 0 0 1 4 this 3 1790  
330 0 0 6 382 1709 0 0 0 2 4 this 3 1707  1 n 1 1633  
331 0 0 4 383 1632 0 0 0 3 4 this 3 1790  1 n 1 1633  5 value 1 1709  
332 0 0 6 384 1709 0 0 0 2 4 this 3 1707  1 n 1 1633  
333 0 0 4 385 1632 0 0 0 3 4 this 3 1790  1 n 1 1633  5 value 1 1709  
334 0 0 6 386 1637 0 0 0 1 4 this 3 1707  
335 0 0 4 387 1632 0 0 0 2 4 this 3 1790  4 data 1 1637  
336 0 0 6 388 1637 0 0 0 3 4 this 3 1707  1 n 1 1633  5 count 1 1633  
337 0 0 4 389 1632 0 0 0 4 4 this 3 1790  1 n 1 1633  5 count 1 1633  4 data 1 1784  
338 0 0 6 390 1640 0 0 0 1 4 this 3 1707  
339 0 0 6 391 1640 0 0 0 1 4 this 3 1707  
340 0 0 6 392 1633 0 0 0 2 4 this 3 1707  6 param0 0 1709  
341 0 0 6 393 1640 0 0 0 3 4 this 3 1790  4 view 1 1641  5 flags 1 1640  
342 0 0 4 394 1632 0 0 0 2 4 this 3 1707  4 view 1 1641  
343 0 0 7 397 1791 1120 0 0 1 4 copy 1 1718  
344 0 0 7 397 1791 1120 0 0 1 6 source 1 1637  
345 0 0 7 397 1791 1120 0 0 1 11 type_handle 1 1782  
346 0 0 7 398 1791 1120 0 0 2 1 n 1 1633  11 type_handle 1 1782  
347 0 0 4 399 1632 0 0 0 1 4 this 3 1791  
348 0 0 6 400 1633 0 0 0 1 4 this 3 1718  
349 0 0 4 401 1632 0 0 0 2 4 this 3 1791  1 x 1 1720  
350 0 0 4 402 1632 0 0 0 1 4 this 3 1791  
351 0 0 6 403 1720 0 0 0 2 4 this 3 1718  1 n 1 1633  
352 0 0 4 404 1632 0 0 0 3 4 this 3 1791  1 n 1 1633  5 value 1 1720  
353 0 0 6 405 1720 0 0 0 2 4 this 3 1718  1 n 1 1633  
354 0 0 4 406 1632 0 0 0 3 4 this 3 1791  1 n 1 1633  5 value 1 1720  
355 0 0 6 407 1637 0 0 0 1 4 this 3 1718  
356 0 0 4 408 1632 0 0 0 2 4 this 3 1791  4 data 1 1637  
357 0 0 6 409 1637 0 0 0 3 4 this 3 1718  1 n 1 1633  5 count 1 1633  
358 0 0 4 410 1632 0 0 0 4 4 this 3 1791  1 n 1 1633  5 count 1 1633  4 data 1 1784  
359 0 0 6 411 1640 0 0 0 1 4 this 3 1718  
360 0 0 6 412 1640 0 0 0 1 4 this 3 1718  
361 0 0 6 413 1633 0 0 0 2 4 this 3 1718  6 param0 0 1720  
362 0 0 6 414 1640 0 0 0 3 4 this 3 1791  4 view 1 1641  5 flags 1 1640  
363 0 0 4 415 1632 0 0 0 2 4 this 3 1718  4 view 1 1641  
364 0 0 7 418 1792 1140 0 0 1 4 copy 1 1729  
365 0 0 7 418 1792 1140 0 0 1 6 source 1 1637  
366 0 0 7 418 1792 1140 0 0 1 11 type_handle 1 1782  
367 0 0 7 419 1792 1140 0 0 2 1 n 1 1633  11 type_handle 1 1782  
368 0 0 4 420 1632 0 0 0 1 4 this 3 1792  
369 0 0 6 421 1633 0 0 0 1 4 this 3 1729  
370 0 0 4 422 1632 0 0 0 2 4 this 3 1792  1 x 1 1731  
371 0 0 4 423 1632 0 0 0 1 4 this 3 1792  
372 0 0 6 424 1731 0 0 0 2 4 this 3 1729  1 n 1 1633  
373 0 0 4 425 1632 0 0 0 3 4 this 3 1792  1 n 1 1633  5 value 1 1731  
374 0 0 6 426 1731 0 0 0 2 4 this 3 1729  1 n 1 1633  
375 0 0 4 427 1632 0 0 0 3 4 this 3 1792  1 n 1 1633  5 value 1 1731  
376 0 0 6 428 1637 0 0 0 1 4 this 3 1729  
377 0 0 4 429 1632 0 0 0 2 4 this 3 1792  4 data 1 1637  
378 0 0 6 430 1637 0 0 0 3 4 this 3 1729  1 n 1 1633  5 count 1 1633  
379 0 0 4 431 1632 0 0 0 4 4 this 3 1792  1 n 1 1633  5 count 1 1633  4 data 1 1784  
380 0 0 6 432 1640 0 0 0 1 4 this 3 1729  
381 0 0 6 433 1640 0 0 0 1 4 this 3 1729  
382 0 0 6 434 1633 0 0 0 2 4 this 3 1729  6 param0 0 1731  
383 0 0 6 435 1640 0 0 0 3 4 this 3 1792  4 view 1 1641  5 flags 1 1640  
384 0 0 4 436 1632 0 0 0 2 4 this 3 1729  4 view 1 1641  
385 0 0 7 439 1793 1160 0 0 1 4 copy 1 1740  
386 0 0 7 439 1793 1160 0 0 1 6 source 1 1637  
387 0 0 7 439 1793 1160 0 0 1 11 type_handle 1 1782  
388 0 0 7 440 1793 1160 0 0 2 1 n 1 1633  11 type_handle 1 1782  
389 0 0 4 441 1632 0 0 0 1 4 this 3 1793  
390 0 0 6 442 1633 0 0 0 1 4 this 3 1740  
391 0 0 4 443 1632 0 0 0 2 4 this 3 1793  1 x 1 1742  
392 0 0 4 444 1632 0 0 0 1 4 this 3 1793  
393 0 0 6 445 1742 0 0 0 2 4 this 3 1740  1 n 1 1633  
394 0 0 4 446 1632 0 0 0 3 4 this 3 1793  1 n 1 1633  5 value 1 1742  
395 0 0 6 447 1742 0 0 0 2 4 this 3 1740  1 n 1 1633  
396 0 0 4 448 1632 0 0 0 3 4 this 3 1793  1 n 1 1633  5 value 1 1742  
397 0 0 6 449 1637 0 0 0 1 4 this 3 1740  
398 0 0 4 450 1632 0 0 0 2 4 this 3 1793  4 data 1 1637  
399 0 0 6 451 1637 0 0 0 3 4 this 3 1740  1 n 1 1633  5 count 1 1633  
400 0 0 4 452 1632 0 0 0 4 4 this 3 1793  1 n 1 1633  5 count 1 1633  4 data 1 1784  
401 0 0 6 453 1640 0 0 0 1 4 this 3 1740  
402 0 0 6 454 1640 0 0 0 1 4 this 3 1740  
403 0 0 6 455 1633 0 0 0 2 4 this 3 1740  6 param0 0 1742  
404 0 0 6 456 1640 0 0 0 3 4 this 3 1793  4 view 1 1641  5 flags 1 1640  
405 0 0 4 457 1632 0 0 0 2 4 this 3 1740  4 view 1 1641  
406 0 0 7 460 1794 1180 0 0 1 4 copy 1 1751  
407 0 0 7 460 1794 1180 0 0 1 6 source 1 1637  
408 0 0 7 460 1794 1180 0 0 1 11 type_handle 1 1782  
409 0 0 7 461 1794 1180 0 0 2 1 n 1 1633  11 type_handle 1 1782  
410 0 0 4 462 1632 0 0 0 1 4 this 3 1794  
411 0 0 6 463 1633 0 0 0 1 4 this 3 1751  
412 0 0 4 464 1632 0 0 0 2 4 this 3 1794  1 x 1 1753  
413 0 0 4 465 1632 0 0 0 1 4 this 3 1794  
414 0 0 6 466 1753 0 0 0 2 4 this 3 1751  1 n 1 1633  
415 0 0 4 467 1632 0 0 0 3 4 this 3 1794  1 n 1 1633  5 value 1 1753  
416 0 0 6 468 1753 0 0 0 2 4 this 3 1751  1 n 1 1633  
417 0 0 4 469 1632 0 0 0 3 4 this 3 1794  1 n 1 1633  5 value 1 1753  
418 0 0 6 470 1637 0 0 0 1 4 this 3 1751  
419 0 0 4 471 1632 0 0 0 2 4 this 3 1794  4 data 1 1637  
420 0 0 6 472 1637 0 0 0 3 4 this 3 1751  1 n 1 1633  5 count 1 1633  
421 0 0 4 473 1632 0 0 0 4 4 this 3 1794  1 n 1 1633  5 count 1 1633  4 data 1 1784  
422 0 0 6 474 1640 0 0 0 1 4 this 3 1751  
423 0 0 6 475 1640 0 0 0 1 4 this 3 1751  
424 0 0 6 476 1633 0 0 0 2 4 this 3 1751  6 param0 0 1753  
425 0 0 6 477 1640 0 0 0 3 4 this 3 1794  4 view 1 1641  5 flags 1 1640  
426 0 0 4 478 1632 0 0 0 2 4 this 3 1751  4 view 1 1641  
427 0 0 7 481 1795 1200 0 0 1 4 copy 1 1762  
428 0 0 7 481 1795 1200 0 0 1 6 source 1 1637  
429 0 0 7 481 1795 1200 0 0 1 11 type_handle 1 1782  
430 0 0 7 482 1795 1200 0 0 2 1 n 1 1633  11 type_handle 1 1782  
431 0 0 4 483 1632 0 0 0 1 4 this 3 1795  
432 0 0 6 484 1633 0 0 0 1 4 this 3 1762  
433 0 0 4 485 1632 0 0 0 2 4 this 3 1795  1 x 1 1764  
434 0 0 4 486 1632 0 0 0 1 4 this 3 1795  
435 0 0 6 487 1764 0 0 0 2 4 this 3 1762  1 n 1 1633  
436 0 0 4 488 1632 0 0 0 3 4 this 3 1795  1 n 1 1633  5 value 1 1764  
437 0 0 6 489 1764 0 0 0 2 4 this 3 1762  1 n 1 1633  
438 0 0 4 490 1632 0 0 0 3 4 this 3 1795  1 n 1 1633  5 value 1 1764  
439 0 0 6 491 1637 0 0 0 1 4 this 3 1762  
440 0 0 4 492 1632 0 0 0 2 4 this 3 1795  4 data 1 1637  
441 0 0 6 493 1637 0 0 0 3 4 this 3 1762  1 n 1 1633  5 count 1 1633  
442 0 0 4 494 1632 0 0 0 4 4 this 3 1795  1 n 1 1633  5 count 1 1633  4 data 1 1784  
443 0 0 6 495 1640 0 0 0 1 4 this 3 1762  
444 0 0 6 496 1640 0 0 0 1 4 this 3 1762  
445 0 0 6 497 1633 0 0 0 2 4 this 3 1762  6 param0 0 1764  
446 0 0 6 498 1640 0 0 0 3 4 this 3 1795  4 view 1 1641  5 flags 1 1640  
447 0 0 4 499 1632 0 0 0 2 4 this 3 1762  4 view 1 1641  
448 0 0 7 502 1796 1220 0 0 1 4 copy 1 1773  
449 0 0 7 502 1796 1220 0 0 1 6 source 1 1637  
450 0 0 7 502 1796 1220 0 0 1 11 type_handle 1 1782  
451 0 0 7 503 1796 1220 0 0 2 1 n 1 1633  11 type_handle 1 1782  
452 0 0 4 504 1632 0 0 0 1 4 this 3 1796  
453 0 0 6 505 1633 0 0 0 1 4 this 3 1773  
454 0 0 4 506 1632 0 0 0 2 4 this 3 1796  1 x 1 1775  
455 0 0 4 507 1632 0 0 0 1 4 this 3 1796  
456 0 0 6 508 1775 0 0 0 2 4 this 3 1773  1 n 1 1633  
457 0 0 4 509 1632 0 0 0 3 4 this 3 1796  1 n 1 1633  5 value 1 1775  
458 0 0 6 510 1775 0 0 0 2 4 this 3 1773  1 n 1 1633  
459 0 0 4 511 1632 0 0 0 3 4 this 3 1796  1 n 1 1633  5 value 1 1775  
460 0 0 6 512 1637 0 0 0 1 4 this 3 1773  
461 0 0 4 513 1632 0 0 0 2 4 this 3 1796  4 data 1 1637  
462 0 0 6 514 1637 0 0 0 3 4 this 3 1773  1 n 1 1633  5 count 1 1633  
463 0 0 4 515 1632 0 0 0 4 4 this 3 1796  1 n 1 1633  5 count 1 1633  4 data 1 1784  
464 0 0 6 516 1640 0 0 0 1 4 this 3 1773  
465 0 0 6 517 1640 0 0 0 1 4 this 3 1773  
466 0 0 6 518 1633 0 0 0 2 4 this 3 1773  6 param0 0 1775  
467 0 0 6 519 1640 0 0 0 3 4 this 3 1796  4 view 1 1641  5 flags 1 1640  
468 0 0 4 520 1632 0 0 0 2 4 this 3 1773  4 view 1 1641  
469 0 0 7 524 1799 1230 0 0 1 4 this 3 1797  
470 0 0 6 525 1800 0 0 253 /**
 * Any kind of volume might be empty.  This is a degenerate volume that
 * contains no points; it's not the same as, for instance, a sphere with
 * radius zero, since that contains one point (the center).  It intersects
 * with no other volumes.
 */ 1 4 this 3 1797  
471 0 0 6 526 1800 0 0 536 /**
 * The other side of the empty coin is an infinite volume.  This is a
 * degenerate state of a normally finite volume that contains all points.
 * (Note that some kinds of infinite bounding volumes, like binary separating
 * planes, do not contain all points and thus correctly return is_infinite()
 * == false, even though they are technically infinite.  This is a special
 * case of the word 'infinite' meaning the volume covers all points in space.)
 *
 * It completely intersects with all other volumes except empty volumes.
 */ 1 4 this 3 1797  
472 0 0 4 527 1632 0 0 135 /**
 * Marks the volume as infinite, even if it is normally finite.  You can think
 * of this as an infinite extend_by() operation.
 */ 1 4 this 3 1799  
473 0 0 6 528 1800 0 0 72 /**
 * Increases the size of the volume to include the given volume.
 */ 2 4 this 3 1799  3 vol 1 1797  
474 0 0 6 530 1640 0 0 128 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */ 2 4 this 3 1797  3 vol 1 1797  
475 0 0 4 531 1632 0 0 0 2 4 this 3 1797  3 out 1 1647  
476 0 0 4 532 1632 0 0 10 /**
 *
 */ 3 4 this 3 1797  3 out 1 1647  12 indent_level 1 1640  
477 0 0 7 534 1782 0 0 0 0 
478 0 0 6 537 1800 0 0 72 /**
 * Increases the size of the volume to include the given volume.
 */ 2 4 this 3 1801  3 vol 1 1552  
479 0 0 6 537 1800 0 0 71 /**
 * Increases the size of the volume to include the given point.
 */ 2 4 this 3 1801  5 point 1 1802  
480 0 0 6 538 1640 0 0 128 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */ 2 4 this 3 1552  3 vol 1 1552  
481 0 0 6 538 1640 0 0 127 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated point.
 */ 2 4 this 3 1552  5 point 1 1802  
482 0 0 6 538 1640 0 0 134 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated line segment.
 */ 3 4 this 3 1552  1 a 1 1802  1 b 1 1802  
483 0 0 7 539 1804 0 0 0 1 4 this 3 1552  
484 0 0 4 540 1632 0 0 0 2 4 this 3 1801  3 mat 1 1805  
485 0 0 7 541 1782 0 0 0 0 
486 0 0 7 544 1804 0 0 0 1 4 this 3 1809  
487 0 0 7 545 1804 0 0 0 1 4 this 3 1809  
488 0 0 6 546 1526 0 0 10 /**
 *
 */ 1 4 this 3 1809  
489 0 0 7 554 1782 0 0 0 0 
490 0 0 7 557 1811 1244 0 56 /**
 * Constructs a meaningless degenerate parabola.
 */ 0 
491 0 0 7 557 1811 1244 0 10 /**
 *
 */ 1 4 copy 1 1812  
492 0 0 7 557 1811 1244 0 139 /**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */ 3 1 a 1 1709  1 b 1 1709  1 c 1 1709  
493 0 0 6 558 1811 0 0 0 2 4 this 3 1811  4 copy 1 1812  
494 0 0 4 560 1632 0 0 59 /**
 * Transforms the parabola by the indicated matrix.
 */ 2 4 this 3 1811  3 mat 1 1814  
495 0 0 6 561 1709 0 0 94 /**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */ 1 4 this 3 1812  
496 0 0 6 562 1709 0 0 99 /**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */ 1 4 this 3 1812  
497 0 0 6 563 1709 0 0 93 /**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */ 1 4 this 3 1812  
498 0 0 7 564 1816 0 0 56 /**
 * Computes the point on the parabola at time t.
 */ 2 4 this 3 1812  1 t 1 1527  
499 0 0 4 565 1632 0 0 10 /**
 *
 */ 2 4 this 3 1812  3 out 1 1647  
500 0 0 4 566 1632 0 0 10 /**
 *
 */ 3 4 this 3 1812  3 out 1 1647  12 indent_level 1 1640  
501 0 0 4 567 1632 0 0 336 /**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */ 2 4 this 3 1812  11 destination 1 1817  
502 0 0 4 568 1632 0 0 116 /**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */ 2 4 this 3 1811  6 source 1 1819  
503 0 0 4 569 1632 0 0 207 /**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */ 2 4 this 3 1812  11 destination 1 1817  
504 0 0 4 570 1632 0 0 69 /**
 * Reads the parabola from the Datagram using get_stdfloat().
 */ 2 4 this 3 1811  6 source 1 1819  
505 0 0 7 572 1821 1258 0 56 /**
 * Constructs a meaningless degenerate parabola.
 */ 0 
506 0 0 7 572 1821 1258 0 10 /**
 *
 */ 1 4 copy 1 1822  
507 0 0 7 572 1821 1258 0 139 /**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */ 3 1 a 1 1698  1 b 1 1698  1 c 1 1698  
508 0 0 6 573 1821 0 0 0 2 4 this 3 1821  4 copy 1 1822  
509 0 0 4 575 1632 0 0 59 /**
 * Transforms the parabola by the indicated matrix.
 */ 2 4 this 3 1821  3 mat 1 1824  
510 0 0 6 576 1698 0 0 94 /**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */ 1 4 this 3 1822  
511 0 0 6 577 1698 0 0 99 /**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */ 1 4 this 3 1822  
512 0 0 6 578 1698 0 0 93 /**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */ 1 4 this 3 1822  
513 0 0 7 579 1828 0 0 56 /**
 * Computes the point on the parabola at time t.
 */ 2 4 this 3 1822  1 t 1 1827  
514 0 0 4 580 1632 0 0 10 /**
 *
 */ 2 4 this 3 1822  3 out 1 1647  
515 0 0 4 581 1632 0 0 10 /**
 *
 */ 3 4 this 3 1822  3 out 1 1647  12 indent_level 1 1640  
516 0 0 4 582 1632 0 0 336 /**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */ 2 4 this 3 1822  11 destination 1 1817  
517 0 0 4 583 1632 0 0 116 /**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */ 2 4 this 3 1821  6 source 1 1819  
518 0 0 4 584 1632 0 0 207 /**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */ 2 4 this 3 1822  11 destination 1 1817  
519 0 0 4 585 1632 0 0 69 /**
 * Reads the parabola from the Datagram using get_stdfloat().
 */ 2 4 this 3 1821  6 source 1 1819  
520 0 0 7 589 1829 1288 0 159 /**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */ 0 
521 0 0 7 589 1829 1288 0 0 1 6 param0 0 1830  
522 0 0 7 589 1829 1288 0 176 /**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */ 3 1 a 1 1832  1 b 1 1832  1 c 1 1832  
523 0 0 7 589 1829 1288 0 10 /**
 *
 */ 1 4 copy 1 1834  
524 0 0 7 589 1829 1288 0 92 /**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */ 2 6 normal 1 1836  5 point 1 1832  
525 0 0 7 589 1829 1288 0 73 /**
 * Constructs a plane given the four terms of the plane equation.
 */ 4 1 a 1 1527  1 b 1 1527  1 c 1 1527  1 d 1 1527  
526 0 0 7 590 1829 1288 0 0 2 4 this 3 1830  3 mat 1 1654  
527 0 0 7 590 1829 1288 0 0 2 4 this 3 1830  3 mat 1 1814  
528 0 0 6 591 1829 0 0 0 2 4 this 3 1829  3 mat 1 1814  
529 0 0 4 592 1632 0 0 56 /**
 * Transforms the plane by the indicated matrix.
 */ 2 4 this 3 1829  3 mat 1 1814  
530 0 0 7 593 1829 1288 0 0 1 4 this 3 1830  
531 0 0 7 594 1839 0 0 121 /**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */ 1 4 this 3 1830  
532 0 0 7 595 1840 0 0 51 /**
 * Returns the surface normal of the plane.
 */ 1 4 this 3 1830  
533 0 0 7 596 1816 0 0 145 /**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */ 1 4 this 3 1830  
534 0 0 6 597 1527 0 0 328 /**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */ 2 4 this 3 1830  5 point 1 1832  
535 0 0 6 598 1800 0 0 139 /**
 * Normalizes the plane in place.  Returns true if the plane was normalized,
 * false if the plane had a zero-length normal vector.
 */ 1 4 this 3 1829  
536 0 0 7 599 1829 1288 0 155 /**
 * Normalizes the plane and returns the normalized plane as a copy.  If the
 * plane's normal was a zero-length vector, the same plane is returned.
 */ 1 4 this 3 1830  
537 0 0 7 600 1816 0 0 86 /**
 * Returns the point within the plane nearest to the indicated point in space.
 */ 2 4 this 3 1830  5 point 1 1832  
538 0 0 4 601 1632 0 0 115 /**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */ 1 4 this 3 1829  
539 0 0 6 602 1800 0 0 325 /**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */ 4 4 this 3 1830  18 intersection_point 1 1816  2 p1 1 1832  2 p2 1 1832  
540 0 0 6 603 1800 0 0 300 /**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */ 4 4 this 3 1830  4 from 1 1816  5 delta 1 1840  5 other 1 1830  
541 0 0 4 605 1632 0 0 10 /**
 *
 */ 2 4 this 3 1830  3 out 1 1647  
542 0 0 4 606 1632 0 0 10 /**
 *
 */ 3 4 this 3 1830  3 out 1 1647  12 indent_level 1 1640  
543 0 0 7 610 1841 1307 0 159 /**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */ 0 
544 0 0 7 610 1841 1307 0 0 1 6 param0 0 1842  
545 0 0 7 610 1841 1307 0 176 /**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */ 3 1 a 1 1843  1 b 1 1843  1 c 1 1843  
546 0 0 7 610 1841 1307 0 10 /**
 *
 */ 1 4 copy 1 1844  
547 0 0 7 610 1841 1307 0 92 /**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */ 2 6 normal 1 1846  5 point 1 1843  
548 0 0 7 610 1841 1307 0 73 /**
 * Constructs a plane given the four terms of the plane equation.
 */ 4 1 a 1 1827  1 b 1 1827  1 c 1 1827  1 d 1 1827  
549 0 0 7 611 1841 1307 0 0 2 4 this 3 1842  3 mat 1 1634  
550 0 0 7 611 1841 1307 0 0 2 4 this 3 1842  3 mat 1 1824  
551 0 0 6 612 1841 0 0 0 2 4 this 3 1841  3 mat 1 1824  
552 0 0 4 613 1632 0 0 56 /**
 * Transforms the plane by the indicated matrix.
 */ 2 4 this 3 1841  3 mat 1 1824  
553 0 0 7 614 1841 1307 0 0 1 4 this 3 1842  
554 0 0 7 615 1849 0 0 121 /**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */ 1 4 this 3 1842  
555 0 0 7 616 1850 0 0 51 /**
 * Returns the surface normal of the plane.
 */ 1 4 this 3 1842  
556 0 0 7 617 1828 0 0 145 /**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */ 1 4 this 3 1842  
557 0 0 6 618 1827 0 0 328 /**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */ 2 4 this 3 1842  5 point 1 1843  
558 0 0 6 619 1800 0 0 139 /**
 * Normalizes the plane in place.  Returns true if the plane was normalized,
 * false if the plane had a zero-length normal vector.
 */ 1 4 this 3 1841  
559 0 0 7 620 1841 1307 0 155 /**
 * Normalizes the plane and returns the normalized plane as a copy.  If the
 * plane's normal was a zero-length vector, the same plane is returned.
 */ 1 4 this 3 1842  
560 0 0 7 621 1828 0 0 86 /**
 * Returns the point within the plane nearest to the indicated point in space.
 */ 2 4 this 3 1842  5 point 1 1843  
561 0 0 4 622 1632 0 0 115 /**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */ 1 4 this 3 1841  
562 0 0 6 623 1800 0 0 325 /**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */ 4 4 this 3 1842  18 intersection_point 1 1828  2 p1 1 1843  2 p2 1 1843  
563 0 0 6 624 1800 0 0 300 /**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */ 4 4 this 3 1842  4 from 1 1828  5 delta 1 1850  5 other 1 1842  
564 0 0 4 626 1632 0 0 10 /**
 *
 */ 2 4 this 3 1842  3 out 1 1647  
565 0 0 4 627 1632 0 0 10 /**
 *
 */ 3 4 this 3 1842  3 out 1 1647  12 indent_level 1 1640  
566 0 0 7 634 1851 1320 0 42 /**
 * Constructs an empty box object.
 */ 0 
567 0 0 7 634 1851 1320 0 44 /**
 * Constructs a specific box object.
 */ 2 3 min 1 1802  3 max 1 1802  
568 0 0 4 635 1632 0 0 0 2 4 this 3 1851  4 size 1 1852  
569 0 0 6 638 1640 0 0 68 /**
 * Returns 8: the number of vertices of a rectangular solid.
 */ 1 4 this 3 1853  
570 0 0 7 639 1804 0 0 59 /**
 * Returns the nth vertex of the rectangular solid.
 */ 2 4 this 3 1853  1 n 1 1640  
571 0 0 6 641 1640 0 0 65 /**
 * Returns 6: the number of faces of a rectangular solid.
 */ 1 4 this 3 1853  
572 0 0 7 642 1855 0 0 57 /**
 * Returns the nth face of the rectangular solid.
 */ 2 4 this 3 1853  1 n 1 1640  
573 0 0 4 648 1632 0 0 63 /**
 * Sets the min and max point of the rectangular solid.
 */ 3 4 this 3 1851  3 min 1 1802  3 max 1 1802  
574 0 0 7 649 1782 0 0 0 0 
575 0 0 7 652 1856 1328 0 10 /**
 *
 */ 0 
576 0 0 7 652 1856 1328 0 0 1 6 param0 0 1857  
577 0 0 4 653 1632 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 1 4 this 3 1856  
578 0 0 4 653 1632 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 5 4 this 3 1856  1 l 1 1527  1 r 1 1527  1 t 1 1527  1 b 1 1527  
579 0 0 4 654 1632 0 0 32 /**
 * Behaves like gluOrtho
 */ 3 4 this 3 1856  5 fnear 1 1527  4 ffar 1 1527  
580 0 0 4 654 1632 0 0 32 /**
 * Behaves like gluOrtho
 */ 7 4 this 3 1856  5 fnear 1 1527  4 ffar 1 1527  1 l 1 1527  1 r 1 1527  1 t 1 1527  1 b 1 1527  
581 0 0 4 655 1632 0 0 238 /**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */ 5 4 this 3 1856  4 xfov 1 1527  6 aspect 1 1527  5 fnear 1 1527  4 ffar 1 1527  
582 0 0 4 656 1632 0 0 0 5 4 this 3 1856  4 yfov 1 1527  6 aspect 1 1527  5 fnear 1 1527  4 ffar 1 1527  
583 0 0 4 657 1632 0 0 0 5 4 this 3 1856  4 xfov 1 1527  4 yfov 1 1527  5 fnear 1 1527  4 ffar 1 1527  
584 0 0 7 661 1859 1336 0 10 /**
 *
 */ 0 
585 0 0 7 661 1859 1336 0 0 1 6 param0 0 1860  
586 0 0 4 662 1632 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 1 4 this 3 1859  
587 0 0 4 662 1632 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 5 4 this 3 1859  1 l 1 1827  1 r 1 1827  1 t 1 1827  1 b 1 1827  
588 0 0 4 663 1632 0 0 32 /**
 * Behaves like gluOrtho
 */ 3 4 this 3 1859  5 fnear 1 1827  4 ffar 1 1827  
589 0 0 4 663 1632 0 0 32 /**
 * Behaves like gluOrtho
 */ 7 4 this 3 1859  5 fnear 1 1827  4 ffar 1 1827  1 l 1 1827  1 r 1 1827  1 t 1 1827  1 b 1 1827  
590 0 0 4 664 1632 0 0 238 /**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */ 5 4 this 3 1859  4 xfov 1 1827  6 aspect 1 1827  5 fnear 1 1827  4 ffar 1 1827  
591 0 0 4 665 1632 0 0 0 5 4 this 3 1859  4 yfov 1 1827  6 aspect 1 1827  5 fnear 1 1827  4 ffar 1 1827  
592 0 0 4 666 1632 0 0 0 5 4 this 3 1859  4 xfov 1 1827  4 yfov 1 1827  5 fnear 1 1827  4 ffar 1 1827  
593 0 0 7 674 1865 1345 0 10 /**
 *
 */ 3 7 frustum 1 1862  8 is_ortho 1 1800  2 cs 1 1864  
594 0 0 7 674 1865 1345 0 10 /**
 *
 */ 8 3 fll 1 1802  3 flr 1 1802  3 fur 1 1802  3 ful 1 1802  3 nll 1 1802  3 nlr 1 1802  3 nur 1 1802  3 nul 1 1802  
595 0 0 6 675 1640 0 0 61 /**
 * Returns 8: the number of vertices of a hexahedron.
 */ 1 4 this 3 1866  
596 0 0 7 676 1804 0 0 52 /**
 * Returns the nth vertex of the hexahedron.
 */ 2 4 this 3 1866  1 n 1 1640  
597 0 0 6 678 1640 0 0 58 /**
 * Returns 6: the number of faces of a hexahedron.
 */ 1 4 this 3 1866  
598 0 0 7 679 1855 0 0 50 /**
 * Returns the nth face of the hexahedron.
 */ 2 4 this 3 1866  1 n 1 1640  
599 0 0 7 685 1782 0 0 0 0 
600 0 0 7 688 1868 1353 0 10 /**
 *
 */ 2 1 a 1 1802  1 b 1 1802  
601 0 0 4 689 1632 0 0 0 2 4 this 3 1868  4 size 1 1852  
602 0 0 6 692 1802 0 0 57 /**
 * Returns the first point that defines the line.
 */ 1 4 this 3 1869  
603 0 0 7 693 1804 0 0 58 /**
 * Returns the second point that defines the line.
 */ 1 4 this 3 1869  
604 0 0 7 694 1782 0 0 0 0 
605 0 0 7 697 1871 1360 0 65 /**
 * Constructs an empty "plane" that has no intersections.
 */ 0 
606 0 0 7 697 1871 1360 0 10 /**
 *
 */ 1 5 plane 1 1872  
607 0 0 4 698 1632 0 0 0 2 4 this 3 1871  4 size 1 1852  
608 0 0 6 701 1872 0 0 10 /**
 *
 */ 1 4 this 3 1873  
609 0 0 7 704 1782 0 0 0 0 
610 0 0 7 707 1875 1370 0 38 /**
 * Constructs an empty sphere.
 */ 0 
611 0 0 7 707 1875 1370 0 40 /**
 * Constructs a specific sphere.
 */ 2 6 center 1 1802  6 radius 1 1526  
612 0 0 4 708 1632 0 0 0 2 4 this 3 1875  4 size 1 1852  
613 0 0 7 711 1804 0 0 10 /**
 *
 */ 1 4 this 3 1876  
614 0 0 6 712 1526 0 0 10 /**
 *
 */ 1 4 this 3 1876  
615 0 0 4 713 1632 0 0 47 /**
 * Sets the center point of the sphere.
 */ 2 4 this 3 1875  6 center 1 1802  
616 0 0 4 714 1632 0 0 41 /**
 * Sets the radius of the sphere.
 */ 2 4 this 3 1875  6 radius 1 1526  
617 0 0 7 717 1782 0 0 0 0 
618 0 0 7 720 1878 1381 0 44 /**
 * Constructs an empty intersection.
 */ 0 
619 0 0 4 721 1632 0 0 0 2 4 this 3 1878  4 size 1 1852  
620 0 0 6 724 1640 0 0 64 /**
 * Returns the number of components in the intersection.
 */ 1 4 this 3 1879  
621 0 0 7 725 1552 0 0 57 /**
 * Returns the nth component in the intersection.
 */ 2 4 this 3 1879  1 n 1 1640  
622 0 0 4 731 1632 0 0 50 /**
 * Removes all components from the volume.
 */ 1 4 this 3 1878  
623 0 0 4 732 1632 0 0 373 /**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */ 2 4 this 3 1878  9 component 1 1552  
624 0 0 7 733 1782 0 0 0 0 
625 0 0 7 738 1883 1386 0 0 1 6 param0 0 1881  
626 0 0 7 738 1883 1386 0 35 /* initializes mt[N] with a seed */ 1 4 seed 1 1884  
627 0 0 6 739 1884 0 0 58 /* generates a random number on [0,0x7fffffff]-interval */ 1 4 this 3 1883  
628 0 0 7 743 1885 1389 0 10 /**
 *
 */ 0 
629 0 0 7 744 1782 0 0 0 0 
630 0 0 7 747 1886 1401 0 37 /**
 * Constructs an empty union.
 */ 0 
631 0 0 4 748 1632 0 0 0 2 4 this 3 1886  4 size 1 1852  
632 0 0 6 751 1640 0 0 57 /**
 * Returns the number of components in the union.
 */ 1 4 this 3 1887  
633 0 0 7 752 1552 0 0 50 /**
 * Returns the nth component in the union.
 */ 2 4 this 3 1887  1 n 1 1640  
634 0 0 4 756 1632 0 0 50 /**
 * Removes all components from the volume.
 */ 1 4 this 3 1886  
635 0 0 4 757 1632 0 0 373 /**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */ 2 4 this 3 1886  9 component 1 1552  
636 0 0 4 758 1632 0 0 104 /**
 * Removes from the union any components that have no intersection with the
 * indicated volume.
 */ 2 4 this 3 1886  6 volume 1 1797  
637 0 0 7 759 1782 0 0 0 0 
638 0 0 7 762 1891 1409 0 10 /**
 *
 */ 1 4 copy 1 1889  
639 0 0 7 762 1891 1409 0 108 /**
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 1 4 seed 1 1884  
640 0 0 6 763 1891 0 0 0 2 4 this 3 1891  4 copy 1 1889  
641 0 0 6 764 1640 0 0 60 /**
 * Returns a random integer in the range [0, range).
 */ 2 4 this 3 1891  5 range 1 1640  
642 0 0 6 765 1827 0 0 59 /**
 * Returns a random double in the range [0, range).
 */ 2 4 this 3 1891  5 range 1 1827  
643 0 0 6 766 1827 0 0 60 /**
 * Returns a random double in the range [-0.5, 0.5).
 */ 1 4 this 3 1891  
644 0 0 6 767 1884 0 0 77 /**
 * Returns a random seed value for the next global Randomizer object.
 */ 0 
645 0 0 6 768 1884 0 0 126 /**
 * Returns a unique seed value based on the seed value passed to this
 * Randomizer object (and on its current state).
 */ 1 4 this 3 1891  
646 0 0 6 771 1884 0 0 127 /**
 * Returns a unique seed value based on the seed value passed to this
 * PerlinNoise object (and on its current state).
 */ 1 4 this 3 1892  
647 0 0 7 774 1893 1417 0 131 /**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */ 0 
648 0 0 7 774 1893 1417 0 96 /**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */ 1 4 copy 1 1894  
649 0 0 7 774 1893 1417 0 169 /**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 4 2 sx 1 1827  2 sy 1 1827  10 table_size 1 1640  4 seed 1 1884  
650 0 0 6 775 1893 0 0 0 2 4 this 3 1893  4 copy 1 1894  
651 0 0 4 776 1632 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1893  5 scale 1 1665  
652 0 0 4 776 1632 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1893  5 scale 1 1676  
653 0 0 4 776 1632 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1893  5 scale 1 1827  
654 0 0 4 776 1632 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 3 4 this 3 1893  2 sx 1 1827  2 sy 1 1827  
655 0 0 6 777 1827 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1894  5 value 1 1665  
656 0 0 6 777 1527 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1894  5 value 1 1676  
657 0 0 6 777 1827 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 3 4 this 3 1894  1 x 1 1827  1 y 1 1827  
658 0 0 6 778 1827 0 0 0 2 4 this 3 1894  5 value 1 1665  
659 0 0 6 778 1527 0 0 0 2 4 this 3 1894  5 value 1 1676  
660 0 0 6 778 1827 0 0 0 3 4 this 3 1894  1 x 1 1827  1 y 1 1827  
661 0 0 7 781 1896 1423 0 131 /**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */ 0 
662 0 0 7 781 1896 1423 0 96 /**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */ 1 4 copy 1 1897  
663 0 0 7 781 1896 1423 0 169 /**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 5 2 sx 1 1827  2 sy 1 1827  2 sz 1 1827  10 table_size 1 1640  4 seed 1 1884  
664 0 0 6 782 1896 0 0 0 2 4 this 3 1896  4 copy 1 1897  
665 0 0 4 783 1632 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1896  5 scale 1 1698  
666 0 0 4 783 1632 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1896  5 scale 1 1709  
667 0 0 4 783 1632 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1896  5 scale 1 1827  
668 0 0 4 783 1632 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 4 4 this 3 1896  2 sx 1 1827  2 sy 1 1827  2 sz 1 1827  
669 0 0 6 784 1827 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1897  5 value 1 1698  
670 0 0 6 784 1527 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1897  5 value 1 1709  
671 0 0 6 784 1827 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 4 4 this 3 1897  1 x 1 1827  1 y 1 1827  1 z 1 1827  
672 0 0 6 785 1827 0 0 0 2 4 this 3 1897  5 value 1 1698  
673 0 0 6 785 1527 0 0 0 2 4 this 3 1897  5 value 1 1709  
674 0 0 6 785 1827 0 0 0 4 4 this 3 1897  1 x 1 1827  1 y 1 1827  1 z 1 1827  
675 0 0 7 845 1899 1431 0 122 /**
 * Creates a StackedPerlinNoise2 object with no levels.  You should call
 * add_level() to add each level by hand.
 */ 0 
676 0 0 7 845 1899 1431 0 111 /**
 * Creates an exact duplicate of the existing StackedPerlinNoise2 object,
 * including the random seed.
 */ 1 4 copy 1 1900  
677 0 0 7 845 1899 1431 0 318 /**
 * Creates num_levels nested PerlinNoise2 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */ 7 2 sx 1 1827  2 sy 1 1827  10 num_levels 1 1640  12 scale_factor 1 1827  9 amp_scale 1 1827  10 table_size 1 1640  4 seed 1 1884  
678 0 0 6 846 1899 0 0 0 2 4 this 3 1899  4 copy 1 1900  
679 0 0 4 847 1632 0 0 95 /**
 * Adds an arbitrary PerlinNoise2 object, and an associated amplitude, to the
 * stack.
 */ 3 4 this 3 1899  5 level 1 1894  3 amp 1 1827  
680 0 0 4 848 1632 0 0 98 /**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */ 1 4 this 3 1899  
681 0 0 6 849 1827 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1899  5 value 1 1665  
682 0 0 6 849 1527 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1899  5 value 1 1676  
683 0 0 6 849 1827 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 3 4 this 3 1899  1 x 1 1827  1 y 1 1827  
684 0 0 6 850 1827 0 0 0 2 4 this 3 1899  5 value 1 1665  
685 0 0 6 850 1527 0 0 0 2 4 this 3 1899  5 value 1 1676  
686 0 0 6 850 1827 0 0 0 3 4 this 3 1899  1 x 1 1827  1 y 1 1827  
687 0 0 7 853 1902 1438 0 122 /**
 * Creates a StackedPerlinNoise3 object with no levels.  You should call
 * add_level() to add each level by hand.
 */ 0 
688 0 0 7 853 1902 1438 0 111 /**
 * Creates an exact duplicate of the existing StackedPerlinNoise3 object,
 * including the random seed.
 */ 1 4 copy 1 1903  
689 0 0 7 853 1902 1438 0 318 /**
 * Creates num_levels nested PerlinNoise3 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */ 8 2 sx 1 1827  2 sy 1 1827  2 sz 1 1827  10 num_levels 1 1640  12 scale_factor 1 1827  9 amp_scale 1 1827  10 table_size 1 1640  4 seed 1 1884  
690 0 0 6 854 1902 0 0 0 2 4 this 3 1902  4 copy 1 1903  
691 0 0 4 855 1632 0 0 95 /**
 * Adds an arbitrary PerlinNoise3 object, and an associated amplitude, to the
 * stack.
 */ 3 4 this 3 1902  5 level 1 1897  3 amp 1 1827  
692 0 0 4 856 1632 0 0 98 /**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */ 1 4 this 3 1902  
693 0 0 6 857 1827 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1902  5 value 1 1698  
694 0 0 6 857 1527 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1902  5 value 1 1709  
695 0 0 6 857 1827 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 4 4 this 3 1902  1 x 1 1827  1 y 1 1827  1 z 1 1827  
696 0 0 6 858 1827 0 0 0 2 4 this 3 1902  5 value 1 1698  
697 0 0 6 858 1527 0 0 0 2 4 this 3 1902  5 value 1 1709  
698 0 0 6 858 1827 0 0 0 4 4 this 3 1902  1 x 1 1827  1 y 1 1827  1 z 1 1827  
699 0 0 7 861 1905 1455 0 10 /**
 *
 */ 0 
700 0 0 7 861 1905 1455 0 0 1 6 param0 0 1906  
701 0 0 4 862 1632 0 0 115 /**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */ 1 4 this 3 1905  
702 0 0 6 863 1640 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 2 4 this 3 1905  5 point 1 1908  
703 0 0 6 863 1640 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 3 4 this 3 1905  1 x 1 1827  1 y 1 1827  
704 0 0 6 864 1640 0 0 267 /**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */ 1 4 this 3 1906  
705 0 0 6 865 1908 0 0 34 /**
 * Returns the nth vertex.
 */ 2 4 this 3 1906  1 n 1 1640  
706 0 0 4 871 1632 0 0 112 /**
 * Removes the current polygon definition (and its set of holes), but does not
 * clear the vertex pool.
 */ 1 4 this 3 1905  
707 0 0 4 872 1632 0 0 334 /**
 * Adds the next consecutive vertex of the polygon.  This vertex should index
 * into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.  In particular, do not repeat the first
 * vertex at the end.
 */ 2 4 this 3 1905  5 index 1 1640  
708 0 0 6 873 1800 0 0 145 /**
 * Returns true if the polygon vertices are listed in counterclockwise order,
 * or false if they appear to be listed in clockwise order.
 */ 1 4 this 3 1906  
709 0 0 4 874 1632 0 0 78 /**
 * Finishes the previous hole, if any, and prepares to add a new hole.
 */ 1 4 this 3 1905  
710 0 0 4 875 1632 0 0 277 /**
 * Adds the next consecutive vertex of the current hole.  This vertex should
 * index into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.
 */ 2 4 this 3 1905  5 index 1 1640  
711 0 0 4 876 1632 0 0 181 /**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */ 1 4 this 3 1905  
712 0 0 6 877 1640 0 0 94 /**
 * Returns the number of triangles generated by the previous call to
 * triangulate().
 */ 1 4 this 3 1906  
713 0 0 6 878 1640 0 0 194 /**
 * Returns vertex 0 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 1906  1 n 1 1640  
714 0 0 6 879 1640 0 0 194 /**
 * Returns vertex 1 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 1906  1 n 1 1640  
715 0 0 6 880 1640 0 0 194 /**
 * Returns vertex 2 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 1906  1 n 1 1640  
716 0 0 7 883 1909 1464 0 10 /**
 *
 */ 0 
717 0 0 7 883 1909 1464 0 0 1 6 param0 0 1910  
718 0 0 4 884 1632 0 0 115 /**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */ 1 4 this 3 1909  
719 0 0 6 885 1640 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 2 4 this 3 1909  5 point 1 1843  
720 0 0 6 885 1640 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 4 4 this 3 1909  1 x 1 1827  1 y 1 1827  1 z 1 1827  
721 0 0 6 886 1640 0 0 267 /**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */ 1 4 this 3 1910  
722 0 0 6 887 1843 0 0 34 /**
 * Returns the nth vertex.
 */ 2 4 this 3 1910  1 n 1 1640  
723 0 0 4 889 1632 0 0 181 /**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */ 1 4 this 3 1909  
724 0 0 6 890 1842 0 0 100 /**
 * Returns the plane of the polygon.  This is only available after calling
 * triangulate().
 */ 1 4 this 3 1910  
725 0 0 4 735 1632 0 0 0 3 3 mat 1 1912  3 fwd 1 1846  2 cs 1 1864  
726 0 0 4 735 1632 0 0 0 4 3 mat 1 1912  3 fwd 1 1846  2 up 1 1846  2 cs 1 1864  
727 0 0 4 735 1632 0 0 0 3 3 mat 1 1913  3 fwd 1 1836  2 cs 1 1864  
728 0 0 4 735 1632 0 0 0 4 3 mat 1 1913  3 fwd 1 1836  2 up 1 1836  2 cs 1 1864  
729 0 0 4 735 1632 0 0 0 3 3 mat 1 1849  3 fwd 1 1846  2 cs 1 1864  
730 0 0 4 735 1632 0 0 0 4 3 mat 1 1849  3 fwd 1 1846  2 up 1 1846  2 cs 1 1864  
731 0 0 4 735 1632 0 0 0 3 3 mat 1 1839  3 fwd 1 1836  2 cs 1 1864  
732 0 0 4 735 1632 0 0 0 4 3 mat 1 1839  3 fwd 1 1836  2 up 1 1836  2 cs 1 1864  
733 0 0 4 735 1632 0 0 0 3 4 quat 1 1914  3 fwd 1 1846  2 cs 1 1864  
734 0 0 4 735 1632 0 0 0 4 4 quat 1 1914  3 fwd 1 1846  2 up 1 1846  2 cs 1 1864  
735 0 0 4 735 1632 0 0 0 3 4 quat 1 1916  3 fwd 1 1836  2 cs 1 1864  
736 0 0 4 735 1632 0 0 0 4 4 quat 1 1916  3 fwd 1 1836  2 up 1 1836  2 cs 1 1864  
737 0 0 4 736 1632 0 0 0 3 3 mat 1 1912  3 fwd 1 1846  2 cs 1 1864  
738 0 0 4 736 1632 0 0 0 4 3 mat 1 1912  3 fwd 1 1846  2 up 1 1846  2 cs 1 1864  
739 0 0 4 736 1632 0 0 0 3 3 mat 1 1913  3 fwd 1 1836  2 cs 1 1864  
740 0 0 4 736 1632 0 0 0 4 3 mat 1 1913  3 fwd 1 1836  2 up 1 1836  2 cs 1 1864  
741 0 0 4 736 1632 0 0 0 3 3 mat 1 1849  3 fwd 1 1846  2 cs 1 1864  
742 0 0 4 736 1632 0 0 0 4 3 mat 1 1849  3 fwd 1 1846  2 up 1 1846  2 cs 1 1864  
743 0 0 4 736 1632 0 0 0 3 3 mat 1 1839  3 fwd 1 1836  2 cs 1 1864  
744 0 0 4 736 1632 0 0 0 4 3 mat 1 1839  3 fwd 1 1836  2 up 1 1836  2 cs 1 1864  
745 0 0 4 736 1632 0 0 0 3 4 quat 1 1914  3 fwd 1 1846  2 cs 1 1864  
746 0 0 4 736 1632 0 0 0 4 4 quat 1 1914  3 fwd 1 1846  2 up 1 1846  2 cs 1 1864  
747 0 0 4 736 1632 0 0 0 3 4 quat 1 1916  3 fwd 1 1836  2 cs 1 1864  
748 0 0 4 736 1632 0 0 0 4 4 quat 1 1916  3 fwd 1 1836  2 up 1 1836  2 cs 1 1864  
749 0 0 4 843 1632 0 0 0 3 3 mat 1 1912  1 a 1 1846  1 b 1 1846  
750 0 0 4 843 1632 0 0 0 3 3 mat 1 1913  1 a 1 1836  1 b 1 1836  
751 0 0 4 843 1632 0 0 0 3 3 mat 1 1849  1 a 1 1846  1 b 1 1846  
752 0 0 4 843 1632 0 0 0 3 3 mat 1 1839  1 a 1 1836  1 b 1 1836  
453
1465 32 ConstPointerToArray< LMatrix3d > 0 141313 32 ConstPointerToArray< LMatrix3d > 32 ConstPointerToArray< LMatrix3d > 0 0 0 1 756 768 0 11 757 758 759 760 761 762 763 764 765 766 767 0 0 1 0 1466 0 0 0 0 0

1466 31 PointerToArrayBase< LMatrix3d > 0 26625 31 PointerToArrayBase< LMatrix3d > 31 PointerToArrayBase< LMatrix3d > 0 0 0 0 755 0 0 0 0 1 0 1467 0 0 0 0 0

1467 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 0 0 0 0 0 2 753 754 0 0 1 0 1468 0 0 0 0 0

1468 13 PointerToVoid 0 2048 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1469 32 ConstPointerToArray< LMatrix3f > 0 141313 32 ConstPointerToArray< LMatrix3f > 32 ConstPointerToArray< LMatrix3f > 0 0 0 1 772 784 0 11 773 774 775 776 777 778 779 780 781 782 783 0 0 1 0 1470 0 0 0 0 0

1470 31 PointerToArrayBase< LMatrix3f > 0 26625 31 PointerToArrayBase< LMatrix3f > 31 PointerToArrayBase< LMatrix3f > 0 0 0 0 771 0 0 0 0 1 0 1471 0 0 0 0 0

1471 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 0 0 0 0 0 2 769 770 0 0 1 0 1468 0 0 0 0 0

1472 33 ConstPointerToArray< LVecBase2d > 0 141313 33 ConstPointerToArray< LVecBase2d > 33 ConstPointerToArray< LVecBase2d > 0 0 0 1 788 800 0 11 789 790 791 792 793 794 795 796 797 798 799 0 0 1 0 1473 0 0 0 0 0

1473 32 PointerToArrayBase< LVecBase2d > 0 26625 32 PointerToArrayBase< LVecBase2d > 32 PointerToArrayBase< LVecBase2d > 0 0 0 0 787 0 0 0 0 1 0 1474 0 0 0 0 0

1474 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 0 0 0 0 0 2 785 786 0 0 1 0 1468 0 0 0 0 0

1475 33 ConstPointerToArray< LVecBase2f > 0 141313 33 ConstPointerToArray< LVecBase2f > 33 ConstPointerToArray< LVecBase2f > 0 0 0 1 804 816 0 11 805 806 807 808 809 810 811 812 813 814 815 0 0 1 0 1476 0 0 0 0 0

1476 32 PointerToArrayBase< LVecBase2f > 0 26625 32 PointerToArrayBase< LVecBase2f > 32 PointerToArrayBase< LVecBase2f > 0 0 0 0 803 0 0 0 0 1 0 1477 0 0 0 0 0

1477 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 0 0 0 0 0 2 801 802 0 0 1 0 1468 0 0 0 0 0

1478 33 ConstPointerToArray< LVecBase2i > 0 141313 33 ConstPointerToArray< LVecBase2i > 33 ConstPointerToArray< LVecBase2i > 0 0 0 1 820 832 0 11 821 822 823 824 825 826 827 828 829 830 831 0 0 1 0 1479 0 0 0 0 0

1479 32 PointerToArrayBase< LVecBase2i > 0 26625 32 PointerToArrayBase< LVecBase2i > 32 PointerToArrayBase< LVecBase2i > 0 0 0 0 819 0 0 0 0 1 0 1480 0 0 0 0 0

1480 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 0 0 0 0 0 2 817 818 0 0 1 0 1468 0 0 0 0 0

1481 33 ConstPointerToArray< LVecBase3d > 0 141313 33 ConstPointerToArray< LVecBase3d > 33 ConstPointerToArray< LVecBase3d > 0 0 0 1 836 848 0 11 837 838 839 840 841 842 843 844 845 846 847 0 0 1 0 1482 0 0 0 0 0

1482 32 PointerToArrayBase< LVecBase3d > 0 26625 32 PointerToArrayBase< LVecBase3d > 32 PointerToArrayBase< LVecBase3d > 0 0 0 0 835 0 0 0 0 1 0 1483 0 0 0 0 0

1483 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 0 0 0 0 0 2 833 834 0 0 1 0 1468 0 0 0 0 0

1484 33 ConstPointerToArray< LVecBase3f > 0 141313 33 ConstPointerToArray< LVecBase3f > 33 ConstPointerToArray< LVecBase3f > 0 0 0 1 852 864 0 11 853 854 855 856 857 858 859 860 861 862 863 0 0 1 0 1485 0 0 0 0 0

1485 32 PointerToArrayBase< LVecBase3f > 0 26625 32 PointerToArrayBase< LVecBase3f > 32 PointerToArrayBase< LVecBase3f > 0 0 0 0 851 0 0 0 0 1 0 1486 0 0 0 0 0

1486 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 0 0 0 0 0 2 849 850 0 0 1 0 1468 0 0 0 0 0

1487 33 ConstPointerToArray< LVecBase3i > 0 141313 33 ConstPointerToArray< LVecBase3i > 33 ConstPointerToArray< LVecBase3i > 0 0 0 1 868 880 0 11 869 870 871 872 873 874 875 876 877 878 879 0 0 1 0 1488 0 0 0 0 0

1488 32 PointerToArrayBase< LVecBase3i > 0 26625 32 PointerToArrayBase< LVecBase3i > 32 PointerToArrayBase< LVecBase3i > 0 0 0 0 867 0 0 0 0 1 0 1489 0 0 0 0 0

1489 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 0 0 0 0 0 2 865 866 0 0 1 0 1468 0 0 0 0 0

1490 41 ConstPointerToArray< UnalignedLMatrix4d > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4d > 41 ConstPointerToArray< UnalignedLMatrix4d > 0 0 0 1 884 896 0 11 885 886 887 888 889 890 891 892 893 894 895 0 0 1 0 1491 0 0 0 0 0

1491 40 PointerToArrayBase< UnalignedLMatrix4d > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4d > 40 PointerToArrayBase< UnalignedLMatrix4d > 0 0 0 0 883 0 0 0 0 1 0 1492 0 0 0 0 0

1492 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 0 0 0 0 0 2 881 882 0 0 1 0 1468 0 0 0 0 0

1493 41 ConstPointerToArray< UnalignedLMatrix4f > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4f > 41 ConstPointerToArray< UnalignedLMatrix4f > 0 0 0 1 900 912 0 11 901 902 903 904 905 906 907 908 909 910 911 0 0 1 0 1494 0 0 0 0 0

1494 40 PointerToArrayBase< UnalignedLMatrix4f > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4f > 40 PointerToArrayBase< UnalignedLMatrix4f > 0 0 0 0 899 0 0 0 0 1 0 1495 0 0 0 0 0

1495 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 0 0 0 0 0 2 897 898 0 0 1 0 1468 0 0 0 0 0

1496 42 ConstPointerToArray< UnalignedLVecBase4d > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4d > 42 ConstPointerToArray< UnalignedLVecBase4d > 0 0 0 1 916 928 0 11 917 918 919 920 921 922 923 924 925 926 927 0 0 1 0 1497 0 0 0 0 0

1497 41 PointerToArrayBase< UnalignedLVecBase4d > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4d > 41 PointerToArrayBase< UnalignedLVecBase4d > 0 0 0 0 915 0 0 0 0 1 0 1498 0 0 0 0 0

1498 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 0 0 0 0 0 2 913 914 0 0 1 0 1468 0 0 0 0 0

1499 42 ConstPointerToArray< UnalignedLVecBase4f > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4f > 42 ConstPointerToArray< UnalignedLVecBase4f > 0 0 0 1 932 944 0 11 933 934 935 936 937 938 939 940 941 942 943 0 0 1 0 1500 0 0 0 0 0

1500 41 PointerToArrayBase< UnalignedLVecBase4f > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4f > 41 PointerToArrayBase< UnalignedLVecBase4f > 0 0 0 0 931 0 0 0 0 1 0 1501 0 0 0 0 0

1501 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 0 0 0 0 0 2 929 930 0 0 1 0 1468 0 0 0 0 0

1502 42 ConstPointerToArray< UnalignedLVecBase4i > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4i > 42 ConstPointerToArray< UnalignedLVecBase4i > 0 0 0 1 948 960 0 11 949 950 951 952 953 954 955 956 957 958 959 0 0 1 0 1503 0 0 0 0 0

1503 41 PointerToArrayBase< UnalignedLVecBase4i > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4i > 41 PointerToArrayBase< UnalignedLVecBase4i > 0 0 0 0 947 0 0 0 0 1 0 1504 0 0 0 0 0

1504 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 0 0 0 0 0 2 945 946 0 0 1 0 1468 0 0 0 0 0

1505 27 PointerToArray< LMatrix3d > 0 141313 27 PointerToArray< LMatrix3d > 27 PointerToArray< LMatrix3d > 0 0 0 1 961 980 0 18 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 0 0 1 0 1466 0 0 0 0 0

1506 27 PointerToArray< LMatrix3f > 0 141313 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 1 981 1000 0 18 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 0 0 1 0 1470 0 0 0 0 0

1507 28 PointerToArray< LVecBase2d > 0 141313 28 PointerToArray< LVecBase2d > 28 PointerToArray< LVecBase2d > 0 0 0 1 1001 1020 0 18 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 0 0 1 0 1473 0 0 0 0 0

1508 28 PointerToArray< LVecBase2f > 0 141313 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 1 1021 1040 0 18 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 0 0 1 0 1476 0 0 0 0 0

1509 28 PointerToArray< LVecBase2i > 0 141313 28 PointerToArray< LVecBase2i > 28 PointerToArray< LVecBase2i > 0 0 0 1 1041 1060 0 18 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 0 0 1 0 1479 0 0 0 0 0

1510 28 PointerToArray< LVecBase3d > 0 141313 28 PointerToArray< LVecBase3d > 28 PointerToArray< LVecBase3d > 0 0 0 1 1061 1080 0 18 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 0 0 1 0 1482 0 0 0 0 0

1511 28 PointerToArray< LVecBase3f > 0 141313 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 1 1081 1100 0 18 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 0 0 1 0 1485 0 0 0 0 0

1512 28 PointerToArray< LVecBase3i > 0 141313 28 PointerToArray< LVecBase3i > 28 PointerToArray< LVecBase3i > 0 0 0 1 1101 1120 0 18 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 0 0 1 0 1488 0 0 0 0 0

1513 36 PointerToArray< UnalignedLMatrix4d > 0 141313 36 PointerToArray< UnalignedLMatrix4d > 36 PointerToArray< UnalignedLMatrix4d > 0 0 0 1 1121 1140 0 18 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 0 0 1 0 1491 0 0 0 0 0

1514 36 PointerToArray< UnalignedLMatrix4f > 0 141313 36 PointerToArray< UnalignedLMatrix4f > 36 PointerToArray< UnalignedLMatrix4f > 0 0 0 1 1141 1160 0 18 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 0 0 1 0 1494 0 0 0 0 0

1515 37 PointerToArray< UnalignedLVecBase4d > 0 141313 37 PointerToArray< UnalignedLVecBase4d > 37 PointerToArray< UnalignedLVecBase4d > 0 0 0 1 1161 1180 0 18 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 0 0 1 0 1497 0 0 0 0 0

1516 37 PointerToArray< UnalignedLVecBase4f > 0 141313 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 1 1181 1200 0 18 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 0 0 1 0 1500 0 0 0 0 0

1517 37 PointerToArray< UnalignedLVecBase4i > 0 141313 37 PointerToArray< UnalignedLVecBase4i > 37 PointerToArray< UnalignedLVecBase4i > 0 0 0 1 1201 1220 0 18 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 0 0 1 0 1503 0 0 0 0 0

1518 14 BoundingVolume 0 141313 14 BoundingVolume 14 BoundingVolume 0 0 0 0 1230 0 9 1221 1222 1223 1224 1225 1226 1227 1228 1229 0 0 1 0 1519 0 0 0 2 1520 1521 330
/**
 * This is an abstract class for any volume in any sense which can be said to
 * define the locality of reference of a node in a graph, along with all of
 * its descendants.  It is not necessarily a geometric volume (although see
 * GeometricBoundingVolume); this is simply an abstract interface for bounds
 * of any sort.
 */

1519 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1520 17 IntersectionFlags 0 794624 33 BoundingVolume::IntersectionFlags 33 BoundingVolume::IntersectionFlags 1518 0 0 0 0 0 0 0 0 0 5 18 IF_no_intersection 34 BoundingVolume::IF_no_intersection 65
// If no bits are set, it is known that there is no intersection.
0 11 IF_possible 27 BoundingVolume::IF_possible 56
// IF_possible is set if there might be an intersection.
1 7 IF_some 23 BoundingVolume::IF_some 105
// IF_some is set if there is definitely an intersection.  In this case,
// IF_possible will also be set.
2 6 IF_all 22 BoundingVolume::IF_all 69
// When IF_all is set, both IF_possible and IF_some will also be set.
4 18 IF_dont_understand 34 BoundingVolume::IF_dont_understand 106
// IF_dont_understand is set if the particular volumevolume intersection
// test has not been implemented.
8 0 74
// The contains() functions return the union of one or more of these bits.

1521 10 BoundsType 0 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 1518 0 0 0 0 0 0 0 0 0 5 10 BT_default 26 BoundingVolume::BT_default 0
0 7 BT_best 23 BoundingVolume::BT_best 0
1 9 BT_sphere 25 BoundingVolume::BT_sphere 0
2 6 BT_box 22 BoundingVolume::BT_box 0
3 10 BT_fastest 26 BoundingVolume::BT_fastest 0
4 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

1522 23 GeometricBoundingVolume 0 141313 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 1236 0 5 1231 1232 1233 1234 1235 0 0 1 0 1518 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

1523 20 FiniteBoundingVolume 0 141313 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 1241 3 1918 1919 1920 4 1237 1238 1239 1240 0 0 1 0 1522 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

1524 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1525 0 0 0 0 0 0 0 0 0 0

1525 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1526 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1527 0 0 0 0 0 0 0 0 0 0

1527 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1528 10 LParabolaf 0 26625 10 LParabolaf 10 LParabolaf 0 0 0 1 1242 1244 0 12 1243 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

1529 10 LParabolad 0 26625 10 LParabolad 10 LParabolad 0 0 0 1 1256 1258 0 12 1257 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

1530 9 LParabola 0 2105345 9 LParabola 9 LParabola 0 0 1528 0 0 0 0 0 0 0 0 0 0

1531 7 LPlanef 0 141313 7 LPlanef 7 LPlanef 0 0 0 1 1270 1288 0 17 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 0 0 1 0 1532 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1532 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1533 7 LPlaned 0 141313 7 LPlaned 7 LPlaned 0 0 0 1 1289 1307 0 17 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 0 0 1 0 1534 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1534 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1535 6 LPlane 0 2105345 6 LPlane 6 LPlane 0 0 1531 0 0 0 0 0 0 0 0 0 0

1536 6 PlaneF 0 2105345 6 PlaneF 6 PlaneF 0 0 1531 0 0 0 0 0 0 0 0 0 0

1537 6 PlaneD 0 2105345 6 PlaneD 6 PlaneD 0 0 1533 0 0 0 0 0 0 0 0 0 0

1538 5 Plane 0 2105345 5 Plane 5 Plane 0 0 1531 0 0 0 0 0 0 0 0 0 0

1539 11 BoundingBox 0 141313 11 BoundingBox 11 BoundingBox 0 0 0 1 1308 1320 2 1921 1922 9 1309 1310 1311 1312 1313 1314 1315 1318 1319 2 1933 1934 0 1 0 1523 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

1540 9 LFrustumf 0 141313 9 LFrustumf 9 LFrustumf 0 0 0 1 1321 1328 0 6 1322 1323 1324 1325 1326 1327 0 0 0 0 0 10
/**
 *
 */

1541 9 LFrustumd 0 141313 9 LFrustumd 9 LFrustumd 0 0 0 1 1329 1336 0 6 1330 1331 1332 1333 1334 1335 0 0 0 0 0 10
/**
 *
 */

1542 8 LFrustum 0 2105345 8 LFrustum 8 LFrustum 0 0 1540 0 0 0 0 0 0 0 0 0 0

1543 8 FrustumF 0 2105345 8 FrustumF 8 FrustumF 0 0 1540 0 0 0 0 0 0 0 0 0 0

1544 8 FrustumD 0 2105345 8 FrustumD 8 FrustumD 0 0 1541 0 0 0 0 0 0 0 0 0 0

1545 7 Frustum 0 2105345 7 Frustum 7 Frustum 0 0 1540 0 0 0 0 0 0 0 0 0 0

1546 18 BoundingHexahedron 0 141313 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 1 1337 1345 2 1923 1924 5 1338 1339 1340 1341 1344 2 1935 1936 0 1 0 1523 0 0 0 0 300
/**
 * This defines a bounding convex hexahedron.  It is typically used to
 * represent a frustum, but may represent any enclosing convex hexahedron,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

1547 12 BoundingLine 0 141313 12 BoundingLine 12 BoundingLine 0 0 0 1 1346 1353 0 6 1347 1348 1349 1350 1351 1352 0 0 1 0 1522 0 0 0 0 320
/**
 * This funny bounding volume is an infinite line with no thickness and
 * extending to infinity in both directions.
 *
 * Note that it *always* extends in both directions, despite the fact that you
 * specify two points to the constructor.  These are not endpoints, they are
 * two arbitrary points on the line.
 */

1548 13 BoundingPlane 0 141313 13 BoundingPlane 13 BoundingPlane 0 0 0 1 1354 1360 1 1925 5 1355 1356 1357 1358 1359 0 0 1 0 1522 0 0 0 0 248
/**
 * This funny bounding volume is an infinite plane that divides space into two
 * regions: the part behind the normal, which is "inside" the bounding volume,
 * and the part in front of the normal, which is "outside" the bounding
 * volume.
 */

1549 12 LPlane const 0 8832 12 LPlane const 12 LPlane const 0 0 1535 0 0 0 0 0 0 0 0 0 0

1550 14 BoundingSphere 0 141313 14 BoundingSphere 14 BoundingSphere 0 0 0 1 1361 1370 2 1926 1927 8 1362 1363 1364 1365 1366 1367 1368 1369 0 0 1 0 1523 0 0 0 0 147
/**
 * This defines a bounding sphere, consisting of a center and a radius.  It is
 * always a sphere, and never an ellipsoid or other quadric.
 */

1551 26 IntersectionBoundingVolume 0 141313 26 IntersectionBoundingVolume 26 IntersectionBoundingVolume 0 0 0 1 1371 1381 1 1928 8 1372 1373 1374 1375 1376 1378 1379 1380 1 1937 0 1 0 1522 0 0 0 0 232
/**
 * This special bounding volume is the intersection of all of its constituent
 * bounding volumes.
 *
 * A point is defined to be within an IntersectionBoundingVolume if it is
 * within all of its component bounding volumes.
 */

1552 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1553 0 0 0 0 0 0 0 0 0 0

1553 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1522 0 0 0 0 0 0 0 0 0 0

1554 8 Mersenne 0 141313 8 Mersenne 8 Mersenne 0 0 0 1 1384 1386 0 1 1385 0 0 0 0 1 1555 0

1555 0 0 794624 10 Mersenne:: 0 1554 0 0 0 0 0 0 0 0 0 1 9 max_value 19 Mersenne::max_value 0
2147483647 0 0

1556 18 OmniBoundingVolume 0 141313 18 OmniBoundingVolume 18 OmniBoundingVolume 0 0 0 1 1387 1389 0 1 1388 0 0 1 0 1522 0 0 0 0 85
/**
 * This is a special kind of GeometricBoundingVolume that fills all of space.
 */

1557 19 UnionBoundingVolume 0 141313 19 UnionBoundingVolume 19 UnionBoundingVolume 0 0 0 1 1390 1401 1 1929 9 1391 1392 1393 1394 1395 1397 1398 1399 1400 1 1938 0 1 0 1522 0 0 0 0 229
/**
 * This special bounding volume is the union of all of its constituent
 * bounding volumes.
 *
 * A point is defined to be within a UnionBoundingVolume if it is within any
 * one or more of its component bounding volumes.
 */

1558 10 Randomizer 0 141313 10 Randomizer 10 Randomizer 0 0 0 1 1402 1409 0 6 1403 1404 1405 1406 1407 1408 0 0 0 0 0 50
/**
 * A handy class to return random numbers.
 */

1559 11 PerlinNoise 0 141313 11 PerlinNoise 11 PerlinNoise 0 0 0 0 1411 0 1 1410 0 0 0 0 0 183
/**
 * This is the base class for PerlinNoise2 and PerlinNoise3, different
 * dimensions of Perlin noise implementation.  The base class just collects
 * the common functionality.
 */

1560 12 PerlinNoise2 0 141313 12 PerlinNoise2 12 PerlinNoise2 0 0 0 1 1412 1417 0 4 1413 1414 1415 1416 0 0 1 0 1559 0 0 0 0 185
/**
 * This class provides an implementation of Perlin noise for 2 variables.
 * This code is loosely based on the reference implementation at
 * http://mrl.nyu.edu/~perlin/noise/ .
 */

1561 12 PerlinNoise3 0 141313 12 PerlinNoise3 12 PerlinNoise3 0 0 0 1 1418 1423 0 4 1419 1420 1421 1422 0 0 1 0 1559 0 0 0 0 185
/**
 * This class provides an implementation of Perlin noise for 3 variables.
 * This code is loosely based on the reference implementation at
 * http://mrl.nyu.edu/~perlin/noise/ .
 */

1562 13 PTA_LMatrix4f 0 2105345 13 PTA_LMatrix4f 13 PTA_LMatrix4f 0 0 1514 0 0 0 0 0 0 0 0 0 0

1563 14 CPTA_LMatrix4f 0 2105345 14 CPTA_LMatrix4f 14 CPTA_LMatrix4f 0 0 1493 0 0 0 0 0 0 0 0 0 0

1564 13 PTA_LMatrix4d 0 2105345 13 PTA_LMatrix4d 13 PTA_LMatrix4d 0 0 1513 0 0 0 0 0 0 0 0 0 0

1565 14 CPTA_LMatrix4d 0 2105345 14 CPTA_LMatrix4d 14 CPTA_LMatrix4d 0 0 1490 0 0 0 0 0 0 0 0 0 0

1566 12 PTA_LMatrix4 0 2105345 12 PTA_LMatrix4 12 PTA_LMatrix4 0 0 1562 0 0 0 0 0 0 0 0 0 0

1567 13 CPTA_LMatrix4 0 2105345 13 CPTA_LMatrix4 13 CPTA_LMatrix4 0 0 1563 0 0 0 0 0 0 0 0 0 0

1568 7 PTAMat4 0 2105345 7 PTAMat4 7 PTAMat4 0 0 1566 0 0 0 0 0 0 0 0 0 0

1569 8 CPTAMat4 0 2105345 8 CPTAMat4 8 CPTAMat4 0 0 1567 0 0 0 0 0 0 0 0 0 0

1570 8 PTAMat4d 0 2105345 8 PTAMat4d 8 PTAMat4d 0 0 1564 0 0 0 0 0 0 0 0 0 0

1571 9 CPTAMat4d 0 2105345 9 CPTAMat4d 9 CPTAMat4d 0 0 1565 0 0 0 0 0 0 0 0 0 0

1572 13 PTA_LMatrix3f 0 2105345 13 PTA_LMatrix3f 13 PTA_LMatrix3f 0 0 1506 0 0 0 0 0 0 0 0 0 0

1573 14 CPTA_LMatrix3f 0 2105345 14 CPTA_LMatrix3f 14 CPTA_LMatrix3f 0 0 1469 0 0 0 0 0 0 0 0 0 0

1574 13 PTA_LMatrix3d 0 2105345 13 PTA_LMatrix3d 13 PTA_LMatrix3d 0 0 1505 0 0 0 0 0 0 0 0 0 0

1575 14 CPTA_LMatrix3d 0 2105345 14 CPTA_LMatrix3d 14 CPTA_LMatrix3d 0 0 1465 0 0 0 0 0 0 0 0 0 0

1576 12 PTA_LMatrix3 0 2105345 12 PTA_LMatrix3 12 PTA_LMatrix3 0 0 1572 0 0 0 0 0 0 0 0 0 0

1577 13 CPTA_LMatrix3 0 2105345 13 CPTA_LMatrix3 13 CPTA_LMatrix3 0 0 1573 0 0 0 0 0 0 0 0 0 0

1578 7 PTAMat3 0 2105345 7 PTAMat3 7 PTAMat3 0 0 1576 0 0 0 0 0 0 0 0 0 0

1579 8 CPTAMat3 0 2105345 8 CPTAMat3 8 CPTAMat3 0 0 1577 0 0 0 0 0 0 0 0 0 0

1580 8 PTAMat3d 0 2105345 8 PTAMat3d 8 PTAMat3d 0 0 1574 0 0 0 0 0 0 0 0 0 0

1581 9 CPTAMat3d 0 2105345 9 CPTAMat3d 9 CPTAMat3d 0 0 1575 0 0 0 0 0 0 0 0 0 0

1582 14 PTA_LVecBase4f 0 2105345 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 1516 0 0 0 0 0 0 0 0 0 0

1583 15 CPTA_LVecBase4f 0 2105345 15 CPTA_LVecBase4f 15 CPTA_LVecBase4f 0 0 1499 0 0 0 0 0 0 0 0 0 0

1584 14 PTA_LVecBase4d 0 2105345 14 PTA_LVecBase4d 14 PTA_LVecBase4d 0 0 1515 0 0 0 0 0 0 0 0 0 0

1585 15 CPTA_LVecBase4d 0 2105345 15 CPTA_LVecBase4d 15 CPTA_LVecBase4d 0 0 1496 0 0 0 0 0 0 0 0 0 0

1586 14 PTA_LVecBase4i 0 2105345 14 PTA_LVecBase4i 14 PTA_LVecBase4i 0 0 1517 0 0 0 0 0 0 0 0 0 0

1587 15 CPTA_LVecBase4i 0 2105345 15 CPTA_LVecBase4i 15 CPTA_LVecBase4i 0 0 1502 0 0 0 0 0 0 0 0 0 0

1588 13 PTA_LVecBase4 0 2105345 13 PTA_LVecBase4 13 PTA_LVecBase4 0 0 1582 0 0 0 0 0 0 0 0 0 0

1589 14 CPTA_LVecBase4 0 2105345 14 CPTA_LVecBase4 14 CPTA_LVecBase4 0 0 1583 0 0 0 0 0 0 0 0 0 0

1590 12 PTAVecBase4f 0 2105345 12 PTAVecBase4f 12 PTAVecBase4f 0 0 1582 0 0 0 0 0 0 0 0 0 0

1591 13 CPTAVecBase4f 0 2105345 13 CPTAVecBase4f 13 CPTAVecBase4f 0 0 1583 0 0 0 0 0 0 0 0 0 0

1592 12 PTAVecBase4d 0 2105345 12 PTAVecBase4d 12 PTAVecBase4d 0 0 1584 0 0 0 0 0 0 0 0 0 0

1593 13 CPTAVecBase4d 0 2105345 13 CPTAVecBase4d 13 CPTAVecBase4d 0 0 1585 0 0 0 0 0 0 0 0 0 0

1594 14 PTA_LVecBase3f 0 2105345 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1511 0 0 0 0 0 0 0 0 0 0

1595 15 CPTA_LVecBase3f 0 2105345 15 CPTA_LVecBase3f 15 CPTA_LVecBase3f 0 0 1484 0 0 0 0 0 0 0 0 0 0

1596 14 PTA_LVecBase3d 0 2105345 14 PTA_LVecBase3d 14 PTA_LVecBase3d 0 0 1510 0 0 0 0 0 0 0 0 0 0

1597 15 CPTA_LVecBase3d 0 2105345 15 CPTA_LVecBase3d 15 CPTA_LVecBase3d 0 0 1481 0 0 0 0 0 0 0 0 0 0

1598 14 PTA_LVecBase3i 0 2105345 14 PTA_LVecBase3i 14 PTA_LVecBase3i 0 0 1512 0 0 0 0 0 0 0 0 0 0

1599 15 CPTA_LVecBase3i 0 2105345 15 CPTA_LVecBase3i 15 CPTA_LVecBase3i 0 0 1487 0 0 0 0 0 0 0 0 0 0

1600 13 PTA_LVecBase3 0 2105345 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1594 0 0 0 0 0 0 0 0 0 0

1601 14 CPTA_LVecBase3 0 2105345 14 CPTA_LVecBase3 14 CPTA_LVecBase3 0 0 1595 0 0 0 0 0 0 0 0 0 0

1602 12 PTAVecBase3f 0 2105345 12 PTAVecBase3f 12 PTAVecBase3f 0 0 1594 0 0 0 0 0 0 0 0 0 0

1603 13 CPTAVecBase3f 0 2105345 13 CPTAVecBase3f 13 CPTAVecBase3f 0 0 1595 0 0 0 0 0 0 0 0 0 0

1604 12 PTAVecBase3d 0 2105345 12 PTAVecBase3d 12 PTAVecBase3d 0 0 1596 0 0 0 0 0 0 0 0 0 0

1605 13 CPTAVecBase3d 0 2105345 13 CPTAVecBase3d 13 CPTAVecBase3d 0 0 1597 0 0 0 0 0 0 0 0 0 0

1606 14 PTA_LVecBase2f 0 2105345 14 PTA_LVecBase2f 14 PTA_LVecBase2f 0 0 1508 0 0 0 0 0 0 0 0 0 0

1607 15 CPTA_LVecBase2f 0 2105345 15 CPTA_LVecBase2f 15 CPTA_LVecBase2f 0 0 1475 0 0 0 0 0 0 0 0 0 0

1608 14 PTA_LVecBase2d 0 2105345 14 PTA_LVecBase2d 14 PTA_LVecBase2d 0 0 1507 0 0 0 0 0 0 0 0 0 0

1609 15 CPTA_LVecBase2d 0 2105345 15 CPTA_LVecBase2d 15 CPTA_LVecBase2d 0 0 1472 0 0 0 0 0 0 0 0 0 0

1610 14 PTA_LVecBase2i 0 2105345 14 PTA_LVecBase2i 14 PTA_LVecBase2i 0 0 1509 0 0 0 0 0 0 0 0 0 0

1611 15 CPTA_LVecBase2i 0 2105345 15 CPTA_LVecBase2i 15 CPTA_LVecBase2i 0 0 1478 0 0 0 0 0 0 0 0 0 0

1612 13 PTA_LVecBase2 0 2105345 13 PTA_LVecBase2 13 PTA_LVecBase2 0 0 1606 0 0 0 0 0 0 0 0 0 0

1613 14 CPTA_LVecBase2 0 2105345 14 CPTA_LVecBase2 14 CPTA_LVecBase2 0 0 1607 0 0 0 0 0 0 0 0 0 0

1614 12 PTAVecBase2f 0 2105345 12 PTAVecBase2f 12 PTAVecBase2f 0 0 1606 0 0 0 0 0 0 0 0 0 0

1615 13 CPTAVecBase2f 0 2105345 13 CPTAVecBase2f 13 CPTAVecBase2f 0 0 1607 0 0 0 0 0 0 0 0 0 0

1616 12 PTAVecBase2d 0 2105345 12 PTAVecBase2d 12 PTAVecBase2d 0 0 1608 0 0 0 0 0 0 0 0 0 0

1617 13 CPTAVecBase2d 0 2105345 13 CPTAVecBase2d 13 CPTAVecBase2d 0 0 1609 0 0 0 0 0 0 0 0 0 0

1618 19 StackedPerlinNoise2 0 141313 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 1 1425 1431 0 5 1426 1427 1428 1429 1430 0 0 0 0 0 147
/**
 * Implements a multi-layer PerlinNoise, with one or more high-frequency noise
 * functions added to a lower-frequency base noise function.
 */

1619 19 StackedPerlinNoise3 0 141313 19 StackedPerlinNoise3 19 StackedPerlinNoise3 0 0 0 1 1432 1438 0 5 1433 1434 1435 1436 1437 0 0 0 0 0 147
/**
 * Implements a multi-layer PerlinNoise, with one or more high-frequency noise
 * functions added to a lower-frequency base noise function.
 */

1620 12 Triangulator 0 141313 12 Triangulator 12 Triangulator 0 0 0 1 1439 1455 1 1930 14 1440 1441 1442 1443 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1 1939 0 0 0 0 382
/**
 * This class can triangulate a convex or concave polygon, even one with
 * holes.  It is adapted from an algorithm published as:
 *
 * Narkhede A. and Manocha D., Fast polygon triangulation algorithm based on
 * Seidel's Algorithm, UNC-CH, 1994.
 *
 * http://www.cs.unc.edu/~dm/CODE/GEM/chapter.html
 *
 * It works strictly on 2-d points.  See Triangulator3 for 3-d points.
 */

1621 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 1622 0 0 0 0 0 0 0 0 0 0

1622 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

1623 13 Triangulator3 0 141313 13 Triangulator3 13 Triangulator3 0 0 0 1 1456 1464 2 1931 1932 6 1457 1458 1459 1460 1461 1462 1 1940 0 1 0 1620 0 0 0 0 264
/**
 * This is an extension of Triangulator to handle polygons with three-
 * dimensional points.  It assumes all of the points lie in a single plane,
 * and internally projects the supplied points into 2-D for passing to the
 * underlying Triangulator object.
 */

1624 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 1625 0 0 0 0 0 0 0 0 0 0

1625 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1626 13 LPlaned const 0 8832 13 LPlaned const 13 LPlaned const 0 0 1533 0 0 0 0 0 0 0 0 0 0

1627 40 ConstPointerToArray< LMatrix3d > const * 0 8576 40 ConstPointerToArray< LMatrix3d > const * 40 ConstPointerToArray< LMatrix3d > const * 0 0 1628 0 0 0 0 0 0 0 0 0 0

1628 38 ConstPointerToArray< LMatrix3d > const 0 8832 38 ConstPointerToArray< LMatrix3d > const 38 ConstPointerToArray< LMatrix3d > const 0 0 1465 0 0 0 0 0 0 0 0 0 0

1629 34 ConstPointerToArray< LMatrix3d > * 0 8576 34 ConstPointerToArray< LMatrix3d > * 34 ConstPointerToArray< LMatrix3d > * 0 0 1465 0 0 0 0 0 0 0 0 0 0

1630 35 PointerToArray< LMatrix3d > const * 0 8576 35 PointerToArray< LMatrix3d > const * 35 PointerToArray< LMatrix3d > const * 0 0 1631 0 0 0 0 0 0 0 0 0 0

1631 33 PointerToArray< LMatrix3d > const 0 8832 33 PointerToArray< LMatrix3d > const 33 PointerToArray< LMatrix3d > const 0 0 1505 0 0 0 0 0 0 0 0 0 0

1632 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1633 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1634 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 1635 0 0 0 0 0 0 0 0 0 0

1635 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 1636 0 0 0 0 0 0 0 0 0 0

1636 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1637 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1638 0 0 0 0 0 0 0 0 0 0

1638 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1639 0 0 0 0 0 0 0 0 0 0

1639 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1640 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1641 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1642 0 0 0 0 0 0 0 0 0 0

1642 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1643 0 0 0 0 0 0 0 0 0 0

1643 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1644 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 0 1467 0 0 0 0 0 0 0 0 0 0

1645 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 0 1646 0 0 0 0 0 0 0 0 0 0

1646 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 0 1467 0 0 0 0 0 0 0 0 0 0

1647 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 1648 0 0 0 0 0 0 0 0 0 0

1648 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1649 40 ConstPointerToArray< LMatrix3f > const * 0 8576 40 ConstPointerToArray< LMatrix3f > const * 40 ConstPointerToArray< LMatrix3f > const * 0 0 1650 0 0 0 0 0 0 0 0 0 0

1650 38 ConstPointerToArray< LMatrix3f > const 0 8832 38 ConstPointerToArray< LMatrix3f > const 38 ConstPointerToArray< LMatrix3f > const 0 0 1469 0 0 0 0 0 0 0 0 0 0

1651 34 ConstPointerToArray< LMatrix3f > * 0 8576 34 ConstPointerToArray< LMatrix3f > * 34 ConstPointerToArray< LMatrix3f > * 0 0 1469 0 0 0 0 0 0 0 0 0 0

1652 35 PointerToArray< LMatrix3f > const * 0 8576 35 PointerToArray< LMatrix3f > const * 35 PointerToArray< LMatrix3f > const * 0 0 1653 0 0 0 0 0 0 0 0 0 0

1653 33 PointerToArray< LMatrix3f > const 0 8832 33 PointerToArray< LMatrix3f > const 33 PointerToArray< LMatrix3f > const 0 0 1506 0 0 0 0 0 0 0 0 0 0

1654 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1655 0 0 0 0 0 0 0 0 0 0

1655 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1656 0 0 0 0 0 0 0 0 0 0

1656 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1657 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 0 1471 0 0 0 0 0 0 0 0 0 0

1658 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 0 1659 0 0 0 0 0 0 0 0 0 0

1659 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 0 1471 0 0 0 0 0 0 0 0 0 0

1660 41 ConstPointerToArray< LVecBase2d > const * 0 8576 41 ConstPointerToArray< LVecBase2d > const * 41 ConstPointerToArray< LVecBase2d > const * 0 0 1661 0 0 0 0 0 0 0 0 0 0

1661 39 ConstPointerToArray< LVecBase2d > const 0 8832 39 ConstPointerToArray< LVecBase2d > const 39 ConstPointerToArray< LVecBase2d > const 0 0 1472 0 0 0 0 0 0 0 0 0 0

1662 35 ConstPointerToArray< LVecBase2d > * 0 8576 35 ConstPointerToArray< LVecBase2d > * 35 ConstPointerToArray< LVecBase2d > * 0 0 1472 0 0 0 0 0 0 0 0 0 0

1663 36 PointerToArray< LVecBase2d > const * 0 8576 36 PointerToArray< LVecBase2d > const * 36 PointerToArray< LVecBase2d > const * 0 0 1664 0 0 0 0 0 0 0 0 0 0

1664 34 PointerToArray< LVecBase2d > const 0 8832 34 PointerToArray< LVecBase2d > const 34 PointerToArray< LVecBase2d > const 0 0 1507 0 0 0 0 0 0 0 0 0 0

1665 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 1666 0 0 0 0 0 0 0 0 0 0

1666 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 1667 0 0 0 0 0 0 0 0 0 0

1667 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1668 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 0 1474 0 0 0 0 0 0 0 0 0 0

1669 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 0 1670 0 0 0 0 0 0 0 0 0 0

1670 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 0 1474 0 0 0 0 0 0 0 0 0 0

1671 41 ConstPointerToArray< LVecBase2f > const * 0 8576 41 ConstPointerToArray< LVecBase2f > const * 41 ConstPointerToArray< LVecBase2f > const * 0 0 1672 0 0 0 0 0 0 0 0 0 0

1672 39 ConstPointerToArray< LVecBase2f > const 0 8832 39 ConstPointerToArray< LVecBase2f > const 39 ConstPointerToArray< LVecBase2f > const 0 0 1475 0 0 0 0 0 0 0 0 0 0

1673 35 ConstPointerToArray< LVecBase2f > * 0 8576 35 ConstPointerToArray< LVecBase2f > * 35 ConstPointerToArray< LVecBase2f > * 0 0 1475 0 0 0 0 0 0 0 0 0 0

1674 36 PointerToArray< LVecBase2f > const * 0 8576 36 PointerToArray< LVecBase2f > const * 36 PointerToArray< LVecBase2f > const * 0 0 1675 0 0 0 0 0 0 0 0 0 0

1675 34 PointerToArray< LVecBase2f > const 0 8832 34 PointerToArray< LVecBase2f > const 34 PointerToArray< LVecBase2f > const 0 0 1508 0 0 0 0 0 0 0 0 0 0

1676 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 1677 0 0 0 0 0 0 0 0 0 0

1677 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 1678 0 0 0 0 0 0 0 0 0 0

1678 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1679 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 0 1477 0 0 0 0 0 0 0 0 0 0

1680 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 0 1681 0 0 0 0 0 0 0 0 0 0

1681 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 0 1477 0 0 0 0 0 0 0 0 0 0

1682 41 ConstPointerToArray< LVecBase2i > const * 0 8576 41 ConstPointerToArray< LVecBase2i > const * 41 ConstPointerToArray< LVecBase2i > const * 0 0 1683 0 0 0 0 0 0 0 0 0 0

1683 39 ConstPointerToArray< LVecBase2i > const 0 8832 39 ConstPointerToArray< LVecBase2i > const 39 ConstPointerToArray< LVecBase2i > const 0 0 1478 0 0 0 0 0 0 0 0 0 0

1684 35 ConstPointerToArray< LVecBase2i > * 0 8576 35 ConstPointerToArray< LVecBase2i > * 35 ConstPointerToArray< LVecBase2i > * 0 0 1478 0 0 0 0 0 0 0 0 0 0

1685 36 PointerToArray< LVecBase2i > const * 0 8576 36 PointerToArray< LVecBase2i > const * 36 PointerToArray< LVecBase2i > const * 0 0 1686 0 0 0 0 0 0 0 0 0 0

1686 34 PointerToArray< LVecBase2i > const 0 8832 34 PointerToArray< LVecBase2i > const 34 PointerToArray< LVecBase2i > const 0 0 1509 0 0 0 0 0 0 0 0 0 0

1687 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 1688 0 0 0 0 0 0 0 0 0 0

1688 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 1689 0 0 0 0 0 0 0 0 0 0

1689 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1690 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 0 1480 0 0 0 0 0 0 0 0 0 0

1691 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 0 1692 0 0 0 0 0 0 0 0 0 0

1692 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 0 1480 0 0 0 0 0 0 0 0 0 0

1693 41 ConstPointerToArray< LVecBase3d > const * 0 8576 41 ConstPointerToArray< LVecBase3d > const * 41 ConstPointerToArray< LVecBase3d > const * 0 0 1694 0 0 0 0 0 0 0 0 0 0

1694 39 ConstPointerToArray< LVecBase3d > const 0 8832 39 ConstPointerToArray< LVecBase3d > const 39 ConstPointerToArray< LVecBase3d > const 0 0 1481 0 0 0 0 0 0 0 0 0 0

1695 35 ConstPointerToArray< LVecBase3d > * 0 8576 35 ConstPointerToArray< LVecBase3d > * 35 ConstPointerToArray< LVecBase3d > * 0 0 1481 0 0 0 0 0 0 0 0 0 0

1696 36 PointerToArray< LVecBase3d > const * 0 8576 36 PointerToArray< LVecBase3d > const * 36 PointerToArray< LVecBase3d > const * 0 0 1697 0 0 0 0 0 0 0 0 0 0

1697 34 PointerToArray< LVecBase3d > const 0 8832 34 PointerToArray< LVecBase3d > const 34 PointerToArray< LVecBase3d > const 0 0 1510 0 0 0 0 0 0 0 0 0 0

1698 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 1699 0 0 0 0 0 0 0 0 0 0

1699 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 1700 0 0 0 0 0 0 0 0 0 0

1700 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1701 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 0 1483 0 0 0 0 0 0 0 0 0 0

1702 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 0 1703 0 0 0 0 0 0 0 0 0 0

1703 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 0 1483 0 0 0 0 0 0 0 0 0 0

1704 41 ConstPointerToArray< LVecBase3f > const * 0 8576 41 ConstPointerToArray< LVecBase3f > const * 41 ConstPointerToArray< LVecBase3f > const * 0 0 1705 0 0 0 0 0 0 0 0 0 0

1705 39 ConstPointerToArray< LVecBase3f > const 0 8832 39 ConstPointerToArray< LVecBase3f > const 39 ConstPointerToArray< LVecBase3f > const 0 0 1484 0 0 0 0 0 0 0 0 0 0

1706 35 ConstPointerToArray< LVecBase3f > * 0 8576 35 ConstPointerToArray< LVecBase3f > * 35 ConstPointerToArray< LVecBase3f > * 0 0 1484 0 0 0 0 0 0 0 0 0 0

1707 36 PointerToArray< LVecBase3f > const * 0 8576 36 PointerToArray< LVecBase3f > const * 36 PointerToArray< LVecBase3f > const * 0 0 1708 0 0 0 0 0 0 0 0 0 0

1708 34 PointerToArray< LVecBase3f > const 0 8832 34 PointerToArray< LVecBase3f > const 34 PointerToArray< LVecBase3f > const 0 0 1511 0 0 0 0 0 0 0 0 0 0

1709 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1710 0 0 0 0 0 0 0 0 0 0

1710 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1711 0 0 0 0 0 0 0 0 0 0

1711 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1712 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 0 1486 0 0 0 0 0 0 0 0 0 0

1713 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 0 1714 0 0 0 0 0 0 0 0 0 0

1714 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 0 1486 0 0 0 0 0 0 0 0 0 0

1715 41 ConstPointerToArray< LVecBase3i > const * 0 8576 41 ConstPointerToArray< LVecBase3i > const * 41 ConstPointerToArray< LVecBase3i > const * 0 0 1716 0 0 0 0 0 0 0 0 0 0

1716 39 ConstPointerToArray< LVecBase3i > const 0 8832 39 ConstPointerToArray< LVecBase3i > const 39 ConstPointerToArray< LVecBase3i > const 0 0 1487 0 0 0 0 0 0 0 0 0 0

1717 35 ConstPointerToArray< LVecBase3i > * 0 8576 35 ConstPointerToArray< LVecBase3i > * 35 ConstPointerToArray< LVecBase3i > * 0 0 1487 0 0 0 0 0 0 0 0 0 0

1718 36 PointerToArray< LVecBase3i > const * 0 8576 36 PointerToArray< LVecBase3i > const * 36 PointerToArray< LVecBase3i > const * 0 0 1719 0 0 0 0 0 0 0 0 0 0

1719 34 PointerToArray< LVecBase3i > const 0 8832 34 PointerToArray< LVecBase3i > const 34 PointerToArray< LVecBase3i > const 0 0 1512 0 0 0 0 0 0 0 0 0 0

1720 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 1721 0 0 0 0 0 0 0 0 0 0

1721 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 1722 0 0 0 0 0 0 0 0 0 0

1722 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1723 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 0 1489 0 0 0 0 0 0 0 0 0 0

1724 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 0 1725 0 0 0 0 0 0 0 0 0 0

1725 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 0 1489 0 0 0 0 0 0 0 0 0 0

1726 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4d > const * 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 0 1727 0 0 0 0 0 0 0 0 0 0

1727 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4d > const 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 0 1490 0 0 0 0 0 0 0 0 0 0

1728 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4d > * 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 0 1490 0 0 0 0 0 0 0 0 0 0

1729 44 PointerToArray< UnalignedLMatrix4d > const * 0 8576 44 PointerToArray< UnalignedLMatrix4d > const * 44 PointerToArray< UnalignedLMatrix4d > const * 0 0 1730 0 0 0 0 0 0 0 0 0 0

1730 42 PointerToArray< UnalignedLMatrix4d > const 0 8832 42 PointerToArray< UnalignedLMatrix4d > const 42 PointerToArray< UnalignedLMatrix4d > const 0 0 1513 0 0 0 0 0 0 0 0 0 0

1731 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 1732 0 0 0 0 0 0 0 0 0 0

1732 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 1733 0 0 0 0 0 0 0 0 0 0

1733 18 UnalignedLMatrix4d 0 2048 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 385
/**
 * This is an "unaligned" LMatrix4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LMatrix4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LMatrix4 to get actual use from it.
 */

1734 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 0 1492 0 0 0 0 0 0 0 0 0 0

1735 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 0 1736 0 0 0 0 0 0 0 0 0 0

1736 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 0 1492 0 0 0 0 0 0 0 0 0 0

1737 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4f > const * 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 0 1738 0 0 0 0 0 0 0 0 0 0

1738 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4f > const 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 0 1493 0 0 0 0 0 0 0 0 0 0

1739 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4f > * 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 0 1493 0 0 0 0 0 0 0 0 0 0

1740 44 PointerToArray< UnalignedLMatrix4f > const * 0 8576 44 PointerToArray< UnalignedLMatrix4f > const * 44 PointerToArray< UnalignedLMatrix4f > const * 0 0 1741 0 0 0 0 0 0 0 0 0 0

1741 42 PointerToArray< UnalignedLMatrix4f > const 0 8832 42 PointerToArray< UnalignedLMatrix4f > const 42 PointerToArray< UnalignedLMatrix4f > const 0 0 1514 0 0 0 0 0 0 0 0 0 0

1742 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 1743 0 0 0 0 0 0 0 0 0 0

1743 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 1744 0 0 0 0 0 0 0 0 0 0

1744 18 UnalignedLMatrix4f 0 2048 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 385
/**
 * This is an "unaligned" LMatrix4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LMatrix4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LMatrix4 to get actual use from it.
 */

1745 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 0 1495 0 0 0 0 0 0 0 0 0 0

1746 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 0 1747 0 0 0 0 0 0 0 0 0 0

1747 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 0 1495 0 0 0 0 0 0 0 0 0 0

1748 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4d > const * 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 0 1749 0 0 0 0 0 0 0 0 0 0

1749 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4d > const 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 0 1496 0 0 0 0 0 0 0 0 0 0

1750 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4d > * 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 0 1496 0 0 0 0 0 0 0 0 0 0

1751 45 PointerToArray< UnalignedLVecBase4d > const * 0 8576 45 PointerToArray< UnalignedLVecBase4d > const * 45 PointerToArray< UnalignedLVecBase4d > const * 0 0 1752 0 0 0 0 0 0 0 0 0 0

1752 43 PointerToArray< UnalignedLVecBase4d > const 0 8832 43 PointerToArray< UnalignedLVecBase4d > const 43 PointerToArray< UnalignedLVecBase4d > const 0 0 1515 0 0 0 0 0 0 0 0 0 0

1753 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 1754 0 0 0 0 0 0 0 0 0 0

1754 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 1755 0 0 0 0 0 0 0 0 0 0

1755 19 UnalignedLVecBase4d 0 2048 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1756 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 0 1498 0 0 0 0 0 0 0 0 0 0

1757 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 0 1758 0 0 0 0 0 0 0 0 0 0

1758 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 0 1498 0 0 0 0 0 0 0 0 0 0

1759 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4f > const * 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 0 1760 0 0 0 0 0 0 0 0 0 0

1760 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4f > const 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 0 1499 0 0 0 0 0 0 0 0 0 0

1761 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4f > * 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 0 1499 0 0 0 0 0 0 0 0 0 0

1762 45 PointerToArray< UnalignedLVecBase4f > const * 0 8576 45 PointerToArray< UnalignedLVecBase4f > const * 45 PointerToArray< UnalignedLVecBase4f > const * 0 0 1763 0 0 0 0 0 0 0 0 0 0

1763 43 PointerToArray< UnalignedLVecBase4f > const 0 8832 43 PointerToArray< UnalignedLVecBase4f > const 43 PointerToArray< UnalignedLVecBase4f > const 0 0 1516 0 0 0 0 0 0 0 0 0 0

1764 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 1765 0 0 0 0 0 0 0 0 0 0

1765 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 1766 0 0 0 0 0 0 0 0 0 0

1766 19 UnalignedLVecBase4f 0 2048 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1767 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 0 1501 0 0 0 0 0 0 0 0 0 0

1768 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 0 1769 0 0 0 0 0 0 0 0 0 0

1769 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 0 1501 0 0 0 0 0 0 0 0 0 0

1770 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4i > const * 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 0 1771 0 0 0 0 0 0 0 0 0 0

1771 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4i > const 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 0 1502 0 0 0 0 0 0 0 0 0 0

1772 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4i > * 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 0 1502 0 0 0 0 0 0 0 0 0 0

1773 45 PointerToArray< UnalignedLVecBase4i > const * 0 8576 45 PointerToArray< UnalignedLVecBase4i > const * 45 PointerToArray< UnalignedLVecBase4i > const * 0 0 1774 0 0 0 0 0 0 0 0 0 0

1774 43 PointerToArray< UnalignedLVecBase4i > const 0 8832 43 PointerToArray< UnalignedLVecBase4i > const 43 PointerToArray< UnalignedLVecBase4i > const 0 0 1517 0 0 0 0 0 0 0 0 0 0

1775 27 UnalignedLVecBase4i const * 0 8576 27 UnalignedLVecBase4i const * 27 UnalignedLVecBase4i const * 0 0 1776 0 0 0 0 0 0 0 0 0 0

1776 25 UnalignedLVecBase4i const 0 8832 25 UnalignedLVecBase4i const 25 UnalignedLVecBase4i const 0 0 1777 0 0 0 0 0 0 0 0 0 0

1777 19 UnalignedLVecBase4i 0 2048 19 UnalignedLVecBase4i 19 UnalignedLVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1778 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 0 1504 0 0 0 0 0 0 0 0 0 0

1779 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 0 1780 0 0 0 0 0 0 0 0 0 0

1780 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 0 1504 0 0 0 0 0 0 0 0 0 0

1781 29 PointerToArray< LMatrix3d > * 0 8576 29 PointerToArray< LMatrix3d > * 29 PointerToArray< LMatrix3d > * 0 0 1505 0 0 0 0 0 0 0 0 0 0

1782 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1783 0 0 0 0 0 0 0 0 0 0

1783 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1784 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1785 29 PointerToArray< LMatrix3f > * 0 8576 29 PointerToArray< LMatrix3f > * 29 PointerToArray< LMatrix3f > * 0 0 1506 0 0 0 0 0 0 0 0 0 0

1786 30 PointerToArray< LVecBase2d > * 0 8576 30 PointerToArray< LVecBase2d > * 30 PointerToArray< LVecBase2d > * 0 0 1507 0 0 0 0 0 0 0 0 0 0

1787 30 PointerToArray< LVecBase2f > * 0 8576 30 PointerToArray< LVecBase2f > * 30 PointerToArray< LVecBase2f > * 0 0 1508 0 0 0 0 0 0 0 0 0 0

1788 30 PointerToArray< LVecBase2i > * 0 8576 30 PointerToArray< LVecBase2i > * 30 PointerToArray< LVecBase2i > * 0 0 1509 0 0 0 0 0 0 0 0 0 0

1789 30 PointerToArray< LVecBase3d > * 0 8576 30 PointerToArray< LVecBase3d > * 30 PointerToArray< LVecBase3d > * 0 0 1510 0 0 0 0 0 0 0 0 0 0

1790 30 PointerToArray< LVecBase3f > * 0 8576 30 PointerToArray< LVecBase3f > * 30 PointerToArray< LVecBase3f > * 0 0 1511 0 0 0 0 0 0 0 0 0 0

1791 30 PointerToArray< LVecBase3i > * 0 8576 30 PointerToArray< LVecBase3i > * 30 PointerToArray< LVecBase3i > * 0 0 1512 0 0 0 0 0 0 0 0 0 0

1792 38 PointerToArray< UnalignedLMatrix4d > * 0 8576 38 PointerToArray< UnalignedLMatrix4d > * 38 PointerToArray< UnalignedLMatrix4d > * 0 0 1513 0 0 0 0 0 0 0 0 0 0

1793 38 PointerToArray< UnalignedLMatrix4f > * 0 8576 38 PointerToArray< UnalignedLMatrix4f > * 38 PointerToArray< UnalignedLMatrix4f > * 0 0 1514 0 0 0 0 0 0 0 0 0 0

1794 39 PointerToArray< UnalignedLVecBase4d > * 0 8576 39 PointerToArray< UnalignedLVecBase4d > * 39 PointerToArray< UnalignedLVecBase4d > * 0 0 1515 0 0 0 0 0 0 0 0 0 0

1795 39 PointerToArray< UnalignedLVecBase4f > * 0 8576 39 PointerToArray< UnalignedLVecBase4f > * 39 PointerToArray< UnalignedLVecBase4f > * 0 0 1516 0 0 0 0 0 0 0 0 0 0

1796 39 PointerToArray< UnalignedLVecBase4i > * 0 8576 39 PointerToArray< UnalignedLVecBase4i > * 39 PointerToArray< UnalignedLVecBase4i > * 0 0 1517 0 0 0 0 0 0 0 0 0 0

1797 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 1798 0 0 0 0 0 0 0 0 0 0

1798 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 1518 0 0 0 0 0 0 0 0 0 0

1799 16 BoundingVolume * 0 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 1518 0 0 0 0 0 0 0 0 0 0

1800 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1801 25 GeometricBoundingVolume * 0 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 1522 0 0 0 0 0 0 0 0 0 0

1802 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1803 0 0 0 0 0 0 0 0 0 0

1803 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1524 0 0 0 0 0 0 0 0 0 0

1804 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1524 0 0 0 0 0 0 0 0 0 0

1805 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1806 0 0 0 0 0 0 0 0 0 0

1806 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1807 0 0 0 0 0 0 0 0 0 0

1807 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1808 0 0 0 0 0 0 0 0 0 0

1808 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1809 28 FiniteBoundingVolume const * 0 8576 28 FiniteBoundingVolume const * 28 FiniteBoundingVolume const * 0 0 1810 0 0 0 0 0 0 0 0 0 0

1810 26 FiniteBoundingVolume const 0 8832 26 FiniteBoundingVolume const 26 FiniteBoundingVolume const 0 0 1523 0 0 0 0 0 0 0 0 0 0

1811 12 LParabolaf * 0 8576 12 LParabolaf * 12 LParabolaf * 0 0 1528 0 0 0 0 0 0 0 0 0 0

1812 18 LParabolaf const * 0 8576 18 LParabolaf const * 18 LParabolaf const * 0 0 1813 0 0 0 0 0 0 0 0 0 0

1813 16 LParabolaf const 0 8832 16 LParabolaf const 16 LParabolaf const 0 0 1528 0 0 0 0 0 0 0 0 0 0

1814 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 1815 0 0 0 0 0 0 0 0 0 0

1815 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 1808 0 0 0 0 0 0 0 0 0 0

1816 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1525 0 0 0 0 0 0 0 0 0 0

1817 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1818 0 0 0 0 0 0 0 0 0 0

1818 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

1819 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1820 0 0 0 0 0 0 0 0 0 0

1820 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 215
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 */

1821 12 LParabolad * 0 8576 12 LParabolad * 12 LParabolad * 0 0 1529 0 0 0 0 0 0 0 0 0 0

1822 18 LParabolad const * 0 8576 18 LParabolad const * 18 LParabolad const * 0 0 1823 0 0 0 0 0 0 0 0 0 0

1823 16 LParabolad const 0 8832 16 LParabolad const 16 LParabolad const 0 0 1529 0 0 0 0 0 0 0 0 0 0

1824 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 1825 0 0 0 0 0 0 0 0 0 0

1825 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 1826 0 0 0 0 0 0 0 0 0 0

1826 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1827 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1828 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 1625 0 0 0 0 0 0 0 0 0 0

1829 9 LPlanef * 0 8576 9 LPlanef * 9 LPlanef * 0 0 1531 0 0 0 0 0 0 0 0 0 0

1830 15 LPlanef const * 0 8576 15 LPlanef const * 15 LPlanef const * 0 0 1831 0 0 0 0 0 0 0 0 0 0

1831 13 LPlanef const 0 8832 13 LPlanef const 13 LPlanef const 0 0 1531 0 0 0 0 0 0 0 0 0 0

1832 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1833 0 0 0 0 0 0 0 0 0 0

1833 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1525 0 0 0 0 0 0 0 0 0 0

1834 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1835 0 0 0 0 0 0 0 0 0 0

1835 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1532 0 0 0 0 0 0 0 0 0 0

1836 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1837 0 0 0 0 0 0 0 0 0 0

1837 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1838 0 0 0 0 0 0 0 0 0 0

1838 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1839 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 1808 0 0 0 0 0 0 0 0 0 0

1840 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 1838 0 0 0 0 0 0 0 0 0 0

1841 9 LPlaned * 0 8576 9 LPlaned * 9 LPlaned * 0 0 1533 0 0 0 0 0 0 0 0 0 0

1842 15 LPlaned const * 0 8576 15 LPlaned const * 15 LPlaned const * 0 0 1626 0 0 0 0 0 0 0 0 0 0

1843 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 1624 0 0 0 0 0 0 0 0 0 0

1844 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 1845 0 0 0 0 0 0 0 0 0 0

1845 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 1534 0 0 0 0 0 0 0 0 0 0

1846 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 1847 0 0 0 0 0 0 0 0 0 0

1847 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 1848 0 0 0 0 0 0 0 0 0 0

1848 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1849 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 1826 0 0 0 0 0 0 0 0 0 0

1850 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 1848 0 0 0 0 0 0 0 0 0 0

1851 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1539 0 0 0 0 0 0 0 0 0 0

1852 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1633 0 0 0 0 0 0 0 0 0 0

1853 19 BoundingBox const * 0 8576 19 BoundingBox const * 19 BoundingBox const * 0 0 1854 0 0 0 0 0 0 0 0 0 0

1854 17 BoundingBox const 0 8832 17 BoundingBox const 17 BoundingBox const 0 0 1539 0 0 0 0 0 0 0 0 0 0

1855 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 1535 0 0 0 0 0 0 0 0 0 0

1856 11 LFrustumf * 0 8576 11 LFrustumf * 11 LFrustumf * 0 0 1540 0 0 0 0 0 0 0 0 0 0

1857 17 LFrustumf const * 0 8576 17 LFrustumf const * 17 LFrustumf const * 0 0 1858 0 0 0 0 0 0 0 0 0 0

1858 15 LFrustumf const 0 8832 15 LFrustumf const 15 LFrustumf const 0 0 1540 0 0 0 0 0 0 0 0 0 0

1859 11 LFrustumd * 0 8576 11 LFrustumd * 11 LFrustumd * 0 0 1541 0 0 0 0 0 0 0 0 0 0

1860 17 LFrustumd const * 0 8576 17 LFrustumd const * 17 LFrustumd const * 0 0 1861 0 0 0 0 0 0 0 0 0 0

1861 15 LFrustumd const 0 8832 15 LFrustumd const 15 LFrustumd const 0 0 1541 0 0 0 0 0 0 0 0 0 0

1862 16 LFrustum const * 0 8576 16 LFrustum const * 16 LFrustum const * 0 0 1863 0 0 0 0 0 0 0 0 0 0

1863 14 LFrustum const 0 8832 14 LFrustum const 14 LFrustum const 0 0 1542 0 0 0 0 0 0 0 0 0 0

1864 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 210
// The CS_default entry does not refer to a particular coordinate system,
// but rather to the value stored in default_coordinate_system, which in
// turn is loaded from the config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 21
// Z-Up, Right-handed
1 12 CS_yup_right 12 CS_yup_right 21
// Y-Up, Right-handed
2 11 CS_zup_left 11 CS_zup_left 20
// Z-Up, Left-handed
3 11 CS_yup_left 11 CS_yup_left 20
// Y-Up, Left-handed
4 10 CS_invalid 10 CS_invalid 156
// CS_invalid is not a coordinate system at all.  It can be used in user-
// input processing code to indicate a contradictory coordinate system
// request.
5 0 0

1865 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 1546 0 0 0 0 0 0 0 0 0 0

1866 26 BoundingHexahedron const * 0 8576 26 BoundingHexahedron const * 26 BoundingHexahedron const * 0 0 1867 0 0 0 0 0 0 0 0 0 0

1867 24 BoundingHexahedron const 0 8832 24 BoundingHexahedron const 24 BoundingHexahedron const 0 0 1546 0 0 0 0 0 0 0 0 0 0

1868 14 BoundingLine * 0 8576 14 BoundingLine * 14 BoundingLine * 0 0 1547 0 0 0 0 0 0 0 0 0 0

1869 20 BoundingLine const * 0 8576 20 BoundingLine const * 20 BoundingLine const * 0 0 1870 0 0 0 0 0 0 0 0 0 0

1870 18 BoundingLine const 0 8832 18 BoundingLine const 18 BoundingLine const 0 0 1547 0 0 0 0 0 0 0 0 0 0

1871 15 BoundingPlane * 0 8576 15 BoundingPlane * 15 BoundingPlane * 0 0 1548 0 0 0 0 0 0 0 0 0 0

1872 14 LPlane const * 0 8576 14 LPlane const * 14 LPlane const * 0 0 1549 0 0 0 0 0 0 0 0 0 0

1873 21 BoundingPlane const * 0 8576 21 BoundingPlane const * 21 BoundingPlane const * 0 0 1874 0 0 0 0 0 0 0 0 0 0

1874 19 BoundingPlane const 0 8832 19 BoundingPlane const 19 BoundingPlane const 0 0 1548 0 0 0 0 0 0 0 0 0 0

1875 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1550 0 0 0 0 0 0 0 0 0 0

1876 22 BoundingSphere const * 0 8576 22 BoundingSphere const * 22 BoundingSphere const * 0 0 1877 0 0 0 0 0 0 0 0 0 0

1877 20 BoundingSphere const 0 8832 20 BoundingSphere const 20 BoundingSphere const 0 0 1550 0 0 0 0 0 0 0 0 0 0

1878 28 IntersectionBoundingVolume * 0 8576 28 IntersectionBoundingVolume * 28 IntersectionBoundingVolume * 0 0 1551 0 0 0 0 0 0 0 0 0 0

1879 34 IntersectionBoundingVolume const * 0 8576 34 IntersectionBoundingVolume const * 34 IntersectionBoundingVolume const * 0 0 1880 0 0 0 0 0 0 0 0 0 0

1880 32 IntersectionBoundingVolume const 0 8832 32 IntersectionBoundingVolume const 32 IntersectionBoundingVolume const 0 0 1551 0 0 0 0 0 0 0 0 0 0

1881 16 Mersenne const * 0 8576 16 Mersenne const * 16 Mersenne const * 0 0 1882 0 0 0 0 0 0 0 0 0 0

1882 14 Mersenne const 0 8832 14 Mersenne const 14 Mersenne const 0 0 1554 0 0 0 0 0 0 0 0 0 0

1883 10 Mersenne * 0 8576 10 Mersenne * 10 Mersenne * 0 0 1554 0 0 0 0 0 0 0 0 0 0

1884 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1885 20 OmniBoundingVolume * 0 8576 20 OmniBoundingVolume * 20 OmniBoundingVolume * 0 0 1556 0 0 0 0 0 0 0 0 0 0

1886 21 UnionBoundingVolume * 0 8576 21 UnionBoundingVolume * 21 UnionBoundingVolume * 0 0 1557 0 0 0 0 0 0 0 0 0 0

1887 27 UnionBoundingVolume const * 0 8576 27 UnionBoundingVolume const * 27 UnionBoundingVolume const * 0 0 1888 0 0 0 0 0 0 0 0 0 0

1888 25 UnionBoundingVolume const 0 8832 25 UnionBoundingVolume const 25 UnionBoundingVolume const 0 0 1557 0 0 0 0 0 0 0 0 0 0

1889 18 Randomizer const * 0 8576 18 Randomizer const * 18 Randomizer const * 0 0 1890 0 0 0 0 0 0 0 0 0 0

1890 16 Randomizer const 0 8832 16 Randomizer const 16 Randomizer const 0 0 1558 0 0 0 0 0 0 0 0 0 0

1891 12 Randomizer * 0 8576 12 Randomizer * 12 Randomizer * 0 0 1558 0 0 0 0 0 0 0 0 0 0

1892 13 PerlinNoise * 0 8576 13 PerlinNoise * 13 PerlinNoise * 0 0 1559 0 0 0 0 0 0 0 0 0 0

1893 14 PerlinNoise2 * 0 8576 14 PerlinNoise2 * 14 PerlinNoise2 * 0 0 1560 0 0 0 0 0 0 0 0 0 0

1894 20 PerlinNoise2 const * 0 8576 20 PerlinNoise2 const * 20 PerlinNoise2 const * 0 0 1895 0 0 0 0 0 0 0 0 0 0

1895 18 PerlinNoise2 const 0 8832 18 PerlinNoise2 const 18 PerlinNoise2 const 0 0 1560 0 0 0 0 0 0 0 0 0 0

1896 14 PerlinNoise3 * 0 8576 14 PerlinNoise3 * 14 PerlinNoise3 * 0 0 1561 0 0 0 0 0 0 0 0 0 0

1897 20 PerlinNoise3 const * 0 8576 20 PerlinNoise3 const * 20 PerlinNoise3 const * 0 0 1898 0 0 0 0 0 0 0 0 0 0

1898 18 PerlinNoise3 const 0 8832 18 PerlinNoise3 const 18 PerlinNoise3 const 0 0 1561 0 0 0 0 0 0 0 0 0 0

1899 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 1618 0 0 0 0 0 0 0 0 0 0

1900 27 StackedPerlinNoise2 const * 0 8576 27 StackedPerlinNoise2 const * 27 StackedPerlinNoise2 const * 0 0 1901 0 0 0 0 0 0 0 0 0 0

1901 25 StackedPerlinNoise2 const 0 8832 25 StackedPerlinNoise2 const 25 StackedPerlinNoise2 const 0 0 1618 0 0 0 0 0 0 0 0 0 0

1902 21 StackedPerlinNoise3 * 0 8576 21 StackedPerlinNoise3 * 21 StackedPerlinNoise3 * 0 0 1619 0 0 0 0 0 0 0 0 0 0

1903 27 StackedPerlinNoise3 const * 0 8576 27 StackedPerlinNoise3 const * 27 StackedPerlinNoise3 const * 0 0 1904 0 0 0 0 0 0 0 0 0 0

1904 25 StackedPerlinNoise3 const 0 8832 25 StackedPerlinNoise3 const 25 StackedPerlinNoise3 const 0 0 1619 0 0 0 0 0 0 0 0 0 0

1905 14 Triangulator * 0 8576 14 Triangulator * 14 Triangulator * 0 0 1620 0 0 0 0 0 0 0 0 0 0

1906 20 Triangulator const * 0 8576 20 Triangulator const * 20 Triangulator const * 0 0 1907 0 0 0 0 0 0 0 0 0 0

1907 18 Triangulator const 0 8832 18 Triangulator const 18 Triangulator const 0 0 1620 0 0 0 0 0 0 0 0 0 0

1908 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 1621 0 0 0 0 0 0 0 0 0 0

1909 15 Triangulator3 * 0 8576 15 Triangulator3 * 15 Triangulator3 * 0 0 1623 0 0 0 0 0 0 0 0 0 0

1910 21 Triangulator3 const * 0 8576 21 Triangulator3 const * 21 Triangulator3 const * 0 0 1911 0 0 0 0 0 0 0 0 0 0

1911 19 Triangulator3 const 0 8832 19 Triangulator3 const 19 Triangulator3 const 0 0 1623 0 0 0 0 0 0 0 0 0 0

1912 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 1636 0 0 0 0 0 0 0 0 0 0

1913 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1656 0 0 0 0 0 0 0 0 0 0

1914 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 1915 0 0 0 0 0 0 0 0 0 0

1915 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1916 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1917 0 0 0 0 0 0 0 0 0 0

1917 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

0
15
1918 3 min 0 2 1524 1237 0 0 0 0 0 0 0 25 FiniteBoundingVolume::min 0

1919 3 max 0 2 1524 1238 0 0 0 0 0 0 0 25 FiniteBoundingVolume::max 0

1920 6 volume 0 2 1526 1239 0 0 0 0 0 0 0 28 FiniteBoundingVolume::volume 0

1921 6 points 0 66 1524 1316 0 0 0 0 1312 0 0 19 BoundingBox::points 0

1922 6 planes 0 66 1535 1317 0 0 0 0 1314 0 0 19 BoundingBox::planes 0

1923 6 points 0 66 1524 1342 0 0 0 0 1338 0 0 26 BoundingHexahedron::points 0

1924 6 planes 0 66 1535 1343 0 0 0 0 1340 0 0 26 BoundingHexahedron::planes 0

1925 5 plane 0 2 1549 1358 0 0 0 0 0 0 0 20 BoundingPlane::plane 0

1926 6 center 0 6 1524 1365 1367 0 0 0 0 0 0 22 BoundingSphere::center 0

1927 6 radius 0 6 1526 1366 1368 0 0 0 0 0 0 22 BoundingSphere::radius 0

1928 10 components 0 66 1552 1377 0 0 0 0 1375 0 0 38 IntersectionBoundingVolume::components 0

1929 10 components 0 66 1552 1396 0 0 0 0 1394 0 0 31 UnionBoundingVolume::components 0

1930 8 vertices 0 66 1621 1444 0 0 0 0 1442 0 0 22 Triangulator::vertices 0

1931 8 vertices 0 66 1624 1463 0 0 0 0 1459 0 0 23 Triangulator3::vertices 0

1932 5 plane 0 2 1626 1462 0 0 0 0 0 0 0 20 Triangulator3::plane 0

8
1933 10 get_points 0 1312 1313 23 BoundingBox::get_points 0

1934 10 get_planes 0 1314 1315 23 BoundingBox::get_planes 0

1935 10 get_points 0 1338 1339 30 BoundingHexahedron::get_points 0

1936 10 get_planes 0 1340 1341 30 BoundingHexahedron::get_planes 0

1937 14 get_components 0 1375 1376 42 IntersectionBoundingVolume::get_components 0

1938 14 get_components 0 1394 1395 35 UnionBoundingVolume::get_components 0

1939 12 get_vertices 0 1442 1443 26 Triangulator::get_vertices 0

1940 12 get_vertices 0 1459 1460 27 Triangulator3::get_vertices 0

