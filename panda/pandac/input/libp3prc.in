1565844118
3 3
8 libp3prc 4 Flsb 12 panda3d.core 
390
388 11 ConfigFlags 0 4 778 24 ConfigFlags::ConfigFlags 0 2 1 2 0
112
inline ConfigFlags::ConfigFlags(void) = default;
inline ConfigFlags::ConfigFlags(ConfigFlags const &) = default;

389 12 ~ConfigFlags 0 4 778 25 ConfigFlags::~ConfigFlags 0 0 0
32
ConfigFlags::~ConfigFlags(void);

390 16 get_default_page 0 4 781 28 ConfigPage::get_default_page 0 1 3 136
/**
 * Returns a pointer to the global "default page".  This is the ConfigPage
 * that lists all variables' original default values.
 */
54
static ConfigPage *ConfigPage::get_default_page(void);

391 14 get_local_page 0 4 781 26 ConfigPage::get_local_page 0 1 4 191
/**
 * Returns a pointer to the global "local page".  This is the ConfigPage that
 * lists the locally-assigned values for any variables in the world that have
 * such a local assignment.
 */
52
static ConfigPage *ConfigPage::get_local_page(void);

392 8 get_name 0 4 781 20 ConfigPage::get_name 0 1 5 115
/**
 * Returns the name of the page.  If the page was loaded from a .prc file,
 * this is usually the filename.
 */
59
inline std::string const &ConfigPage::get_name(void) const;

393 10 is_special 0 4 781 22 ConfigPage::is_special 0 1 6 248
/**
 * Returns true if this is the special "default" or "local" page, or false if
 * it is an ordinary page, e.g.  an implicit page loaded from a prc file at
 * startup, or an explicit page created by
 * ConfigPageManager::make_explicit_page().
 */
47
inline bool ConfigPage::is_special(void) const;

394 11 is_implicit 0 4 781 23 ConfigPage::is_implicit 0 1 7 180
/**
 * Returns true if the page was loaded by implicitly searching the config path
 * on startup, or false if it was explicitly loaded by dynamic code after
 * initial startup.
 */
48
inline bool ConfigPage::is_implicit(void) const;

395 8 set_sort 0 4 781 20 ConfigPage::set_sort 0 1 8 363
/**
 * Changes the explicit sort order of this particular ConfigPage.  Lower-
 * numbered pages supercede higher-numbered pages.  Initially, all explicitly-
 * loaded pages have sort value 0, and implicitly-loaded pages (found on disk)
 * have sort value 10; you may set an individual page higher or lower to
 * influence its priority relative to other pages.
 */
36
void ConfigPage::set_sort(int sort);

396 8 get_sort 0 4 781 20 ConfigPage::get_sort 0 1 9 93
/**
 * Returns the explicit sort order of this particular ConfigPage.  See
 * set_sort().
 */
44
inline int ConfigPage::get_sort(void) const;

397 12 get_page_seq 0 4 781 24 ConfigPage::get_page_seq 0 1 10 413
/**
 * Returns the sequence number of the page.
 *
 * Sequence numbers for a particular class (implicit vs.  explicit) of pages
 * are assigned as each page is loaded; each page is given a higher sequence
 * number than all the pages loaded before it.
 *
 * The implicit_load pages, which are discovered in the file system
 * automatically, have a different set of sequence numbers than the explicit
 * pages.
 */
48
inline int ConfigPage::get_page_seq(void) const;

398 15 get_trust_level 0 4 781 27 ConfigPage::get_trust_level 0 1 11 302
/**
 * Returns the trust level associated with this page.  An untrusted page is
 * trust level 0; if the page was loaded from a signed .prc file, its trust
 * level is the index number of the certificate that signed it.  Generally, a
 * higher trust level value represents a greater level of trust.
 */
51
inline int ConfigPage::get_trust_level(void) const;

399 15 set_trust_level 0 4 781 27 ConfigPage::set_trust_level 0 1 12 195
/**
 * Explicitly sets the trust level on this particular page.  Note that any
 * subsequent changes to the page, or to any variable declarations on it, will
 * reset the trust level to zero.
 */
57
inline void ConfigPage::set_trust_level(int trust_level);

400 13 get_signature 0 4 781 25 ConfigPage::get_signature 0 1 13 153
/**
 * Returns the raw binary signature that was found in the prc file, if any.
 * This method is probably not terribly useful for most applications.
 */
64
inline std::string const &ConfigPage::get_signature(void) const;

401 5 clear 0 4 781 17 ConfigPage::clear 0 1 14 57
/**
 * Removes all of the declarations from the page.
 */
29
void ConfigPage::clear(void);

402 8 read_prc 0 4 781 20 ConfigPage::read_prc 0 1 15 392
/**
 * Reads the contents of a complete prc file, as returned by the indicated
 * istream, into the current page file.  Returns true on success, or false on
 * some I/O error.
 *
 * This is a low-level interface.  Normally you do not need to call it
 * directly.  See the global functions load_prc_file() and unload_prc_file(),
 * defined in panda/src/putil, for a higher-level interface.
 */
44
bool ConfigPage::read_prc(std::istream &in);

403 18 read_encrypted_prc 0 4 781 30 ConfigPage::read_encrypted_prc 0 1 16 155
/**
 * Automatically decrypts and reads the stream, given the indicated password.
 * Note that if the password is incorrect, the result may be garbage.
 */
83
bool ConfigPage::read_encrypted_prc(std::istream &in, std::string const &password);

404 16 make_declaration 0 4 781 28 ConfigPage::make_declaration 0 2 17 18 168
/**
 * Adds the indicated variable/value pair as a new declaration on the page.
 */

/**
 * Adds the indicated variable/value pair as a new declaration on the page.
 */
208
ConfigDeclaration *ConfigPage::make_declaration(std::string const &variable, std::string const &value);
ConfigDeclaration *ConfigPage::make_declaration(ConfigVariableCore *variable, std::string const &value);

405 18 delete_declaration 0 4 781 30 ConfigPage::delete_declaration 0 1 19 171
/**
 * Removes the indicated declaration from the page and deletes it.  Returns
 * true if the declaration is successfully removed, false if it was not on the
 * page.
 */
61
bool ConfigPage::delete_declaration(ConfigDeclaration *decl);

406 20 get_num_declarations 0 4 781 32 ConfigPage::get_num_declarations 0 1 20 58
/**
 * Returns the number of declarations on the page.
 */
57
std::size_t ConfigPage::get_num_declarations(void) const;

407 15 get_declaration 0 4 781 27 ConfigPage::get_declaration 0 1 21 51
/**
 * Returns the nth declaration on the page.
 */
74
ConfigDeclaration const *ConfigPage::get_declaration(std::size_t n) const;

408 18 modify_declaration 0 4 781 30 ConfigPage::modify_declaration 0 1 22 180
/**
 * Returns a modifiable pointer to the nth declaration on the page.  Any
 * modifications will appear in the output, if the page is written out with
 * ConfigPage::write().
 */
65
ConfigDeclaration *ConfigPage::modify_declaration(std::size_t n);

409 17 get_variable_name 0 4 781 29 ConfigPage::get_variable_name 0 1 23 73
/**
 * Returns the variable named by the nth declaration on the page.
 */
63
std::string ConfigPage::get_variable_name(std::size_t n) const;

410 16 get_string_value 0 4 781 28 ConfigPage::get_string_value 0 1 24 73
/**
 * Returns the value assigned by the nth declaration on the page.
 */
62
std::string ConfigPage::get_string_value(std::size_t n) const;

411 16 is_variable_used 0 4 781 28 ConfigPage::is_variable_used 0 1 25 105
/**
 * Returns true if the nth active variable on the page has been used by code,
 * false otherwise.
 */
55
bool ConfigPage::is_variable_used(std::size_t n) const;

412 8 get_page 0 4 788 27 ConfigDeclaration::get_page 0 1 29 67
/**
 * Returns the page on which this declaration can be found.
 */
59
inline ConfigPage *ConfigDeclaration::get_page(void) const;

413 12 get_variable 0 4 788 31 ConfigDeclaration::get_variable 0 1 30 148
/**
 * Returns the variable that this declaration names.  This variable may or may
 * not have been defined by the time the declaration is read.
 */
71
inline ConfigVariableCore *ConfigDeclaration::get_variable(void) const;

414 8 get_name 0 4 791 28 ConfigVariableCore::get_name 0 1 53 44
/**
 * Returns the name of the variable.
 */
67
inline std::string const &ConfigVariableCore::get_name(void) const;

415 7 is_used 0 4 791 27 ConfigVariableCore::is_used 0 1 54 118
/**
 * Returns true if the variable has been referenced by a ConfigVariable
 * somewhere in code, false otherwise.
 */
52
inline bool ConfigVariableCore::is_used(void) const;

416 14 get_value_type 0 4 791 34 ConfigVariableCore::get_value_type 0 1 55 125
/**
 * Returns the stated type of this variable.  If the variable has not yet been
 * defined, this will be VT_undefined.
 */
77
inline ConfigFlags::ValueType ConfigVariableCore::get_value_type(void) const;

417 15 get_description 0 4 791 35 ConfigVariableCore::get_description 0 1 56 82
/**
 * Returns the brief description of this variable, if it has been defined.
 */
74
inline std::string const &ConfigVariableCore::get_description(void) const;

418 9 get_flags 0 4 791 29 ConfigVariableCore::get_flags 0 1 57 250
/**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */
53
inline int ConfigVariableCore::get_flags(void) const;

419 9 is_closed 0 4 791 29 ConfigVariableCore::is_closed 0 1 58 413
/**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
54
inline bool ConfigVariableCore::is_closed(void) const;

420 15 get_trust_level 0 4 791 35 ConfigVariableCore::get_trust_level 0 1 59 479
/**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
59
inline int ConfigVariableCore::get_trust_level(void) const;

421 10 is_dynamic 0 4 791 30 ConfigVariableCore::is_dynamic 0 1 60 232
/**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */
55
inline bool ConfigVariableCore::is_dynamic(void) const;

422 17 get_default_value 0 4 791 37 ConfigVariableCore::get_default_value 0 1 61 137
/**
 * Returns the default variable specified for this variable.  If the variable
 * has not yet been defined, this will return NULL.
 */
82
inline ConfigDeclaration const *ConfigVariableCore::get_default_value(void) const;

423 14 set_value_type 0 4 791 34 ConfigVariableCore::set_value_type 0 1 62 212
/**
 * Specifies the type of this variable.  See get_value_type().  It is not an
 * error to call this multiple times, but if the value changes once
 * get_declaration() has been called, a warning is printed.
 */
75
void ConfigVariableCore::set_value_type(ConfigFlags::ValueType value_type);

424 9 set_flags 0 4 791 29 ConfigVariableCore::set_flags 0 1 63 214
/**
 * Specifies the trust level of this variable.  See get_flags().  It is not an
 * error to call this multiple times, but if the value changes once
 * get_declaration() has been called, a warning is printed.
 */
46
void ConfigVariableCore::set_flags(int flags);

425 15 set_description 0 4 791 35 ConfigVariableCore::set_description 0 1 64 232
/**
 * Specifies the one-line description of this variable.  See
 * get_description().  It is not an error to call this multiple times, but if
 * the value changes once get_declaration() has been called, a warning is
 * printed.
 */
73
void ConfigVariableCore::set_description(std::string const &description);

426 17 set_default_value 0 4 791 37 ConfigVariableCore::set_default_value 0 1 65 97
/**
 * Specifies the default value for this variable if it is not defined in any
 * prc file.
 */
77
void ConfigVariableCore::set_default_value(std::string const &default_value);

427 8 set_used 0 4 791 28 ConfigVariableCore::set_used 0 1 66 75
/**
 * Marks that the variable has been "declared" by a ConfigVariable.
 */
47
inline void ConfigVariableCore::set_used(void);

428 16 make_local_value 0 4 791 36 ConfigVariableCore::make_local_value 0 1 67 324
/**
 * Creates a new local value for this variable, if there is not already one
 * specified.  This will shadow any values defined in the various .prc files.
 *
 * If there is already a local value defined for this variable, simply returns
 * that one.
 *
 * Use clear_local_value() to remove the local value definition.
 */
62
ConfigDeclaration *ConfigVariableCore::make_local_value(void);

429 17 clear_local_value 0 4 791 37 ConfigVariableCore::clear_local_value 0 1 68 240
/**
 * Removes the local value defined for this variable, and allows its value to
 * be once again retrieved from the .prc files.
 *
 * Returns true if the value was successfully removed, false if it did not
 * exist in the first place.
 */
49
bool ConfigVariableCore::clear_local_value(void);

430 15 has_local_value 0 4 791 35 ConfigVariableCore::has_local_value 0 1 69 148
/**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */
60
inline bool ConfigVariableCore::has_local_value(void) const;

431 9 has_value 0 4 791 29 ConfigVariableCore::has_value 0 1 70 149
/**
 * Returns true if this variable has an explicit value, either from a prc file
 * or locally set, or false if variable has its default value.
 */
47
bool ConfigVariableCore::has_value(void) const;

432 20 get_num_declarations 0 4 791 40 ConfigVariableCore::get_num_declarations 0 1 71 194
/**
 * Returns the number of declarations that contribute to this variable's
 * value.  If the variable has been defined, this will always be at least 1
 * (for the default value, at least).
 */
65
std::size_t ConfigVariableCore::get_num_declarations(void) const;

433 15 get_declaration 0 4 791 35 ConfigVariableCore::get_declaration 0 1 72 285
/**
 * Returns the nth declarations that contributes to this variable's value.
 * The declarations are arranged in order such that earlier declarations
 * shadow later declarations; thus, get_declaration(0) is always defined and
 * always returns the current value of the variable.
 */
82
ConfigDeclaration const *ConfigVariableCore::get_declaration(std::size_t n) const;

434 18 get_num_references 0 4 791 38 ConfigVariableCore::get_num_references 0 1 73 157
/**
 * Returns the number of prc files that reference this variable.  This is not
 * exactly the same as the number of declarations; see get_reference().
 */
70
inline std::size_t ConfigVariableCore::get_num_references(void) const;

435 13 get_reference 0 4 791 33 ConfigVariableCore::get_reference 0 1 74 335
/**
 * Returns the nth declaration in a prc file that references this variable.
 * This is similar, but not identical to, get_declaration().  The difference
 * is that this will list *only* true references in a prc file, and will not
 * list default values or locally-assigned values; it also will list even the
 * untrusted files.
 */
87
inline ConfigDeclaration const *ConfigVariableCore::get_reference(std::size_t n) const;

436 26 get_num_trusted_references 0 4 791 46 ConfigVariableCore::get_num_trusted_references 0 1 75 115
/**
 * Returns the number of trusted prc files that reference this variable.  See
 * also get_num_references().
 */
78
inline std::size_t ConfigVariableCore::get_num_trusted_references(void) const;

437 21 get_trusted_reference 0 4 791 41 ConfigVariableCore::get_trusted_reference 0 1 76 428
/**
 * Returns the nth declaration in a trusted prc file that references this
 * variable.  This is similar, but not identical to, get_declaration().  The
 * difference is that this will list *only* true references in a prc file, and
 * will not list default values or locally-assigned values.
 *
 * This is also similar to get_reference(), except that it only lists the
 * trusted declarations, omitting the untrusted ones.
 */
95
inline ConfigDeclaration const *ConfigVariableCore::get_trusted_reference(std::size_t n) const;

438 25 get_num_unique_references 0 4 791 45 ConfigVariableCore::get_num_unique_references 0 1 77 107
/**
 * Returns the number of trusted, unique (by string value) values there exist
 * for this variable.
 */
77
inline std::size_t ConfigVariableCore::get_num_unique_references(void) const;

439 20 get_unique_reference 0 4 791 40 ConfigVariableCore::get_unique_reference 0 1 78 157
/**
 * Returns the nth trusted, unique value for this variable.  This is similar
 * to get_trusted_reference(), except that duplicate values are removed.
 */
94
inline ConfigDeclaration const *ConfigVariableCore::get_unique_reference(std::size_t n) const;

440 0 0 0 0 0 0 0 0
0

441 6 output 0 4 791 26 ConfigVariableCore::output 0 1 79 10
/**
 *
 */
57
void ConfigVariableCore::output(std::ostream &out) const;

442 5 write 0 4 791 25 ConfigVariableCore::write 0 1 80 10
/**
 *
 */
56
void ConfigVariableCore::write(std::ostream &out) const;

443 0 0 0 0 0 0 0 0
0

444 0 0 0 0 0 0 0 0
0

445 0 0 0 0 0 0 0 0
0

446 16 get_string_value 0 4 788 35 ConfigDeclaration::get_string_value 0 1 31 186
/**
 * Returns the value assigned to this variable.  This is the original one-line
 * text defined for the variable in the .prc file (or passed to
 * ConfigPage::make_declaration()).
 */
74
inline std::string const &ConfigDeclaration::get_string_value(void) const;

447 16 set_string_value 0 4 788 35 ConfigDeclaration::set_string_value 0 1 32 55
/**
 * Changes the value assigned to this variable.
 */
74
inline void ConfigDeclaration::set_string_value(std::string const &value);

448 13 get_num_words 0 4 788 32 ConfigDeclaration::get_num_words 0 1 33 156
/**
 * Returns the number of words in the declaration's value.  A word is defined
 * as a sequence of non-whitespace characters delimited by whitespace.
 */
64
inline std::size_t ConfigDeclaration::get_num_words(void) const;

449 15 has_string_word 0 4 788 34 ConfigDeclaration::has_string_word 0 1 34 184
/**
 * Returns true if the declaration's value has a valid string value for the
 * nth word.  This is really the same thing as asking if there are at least n
 * words in the value.
 */
68
inline bool ConfigDeclaration::has_string_word(std::size_t n) const;

450 13 has_bool_word 0 4 788 32 ConfigDeclaration::has_bool_word 0 1 35 97
/**
 * Returns true if the declaration's value has a valid boolean value for the
 * nth word.
 */
66
inline bool ConfigDeclaration::has_bool_word(std::size_t n) const;

451 12 has_int_word 0 4 788 31 ConfigDeclaration::has_int_word 0 1 36 97
/**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */
65
inline bool ConfigDeclaration::has_int_word(std::size_t n) const;

452 14 has_int64_word 0 4 788 33 ConfigDeclaration::has_int64_word 0 1 37 95
/**
 * Returns true if the declaration's value has a valid int64 value for the nth
 * word.
 */
67
inline bool ConfigDeclaration::has_int64_word(std::size_t n) const;

453 15 has_double_word 0 4 788 34 ConfigDeclaration::has_double_word 0 1 38 97
/**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */
68
inline bool ConfigDeclaration::has_double_word(std::size_t n) const;

454 15 get_string_word 0 4 788 34 ConfigDeclaration::get_string_word 0 1 39 153
/**
 * Returns the string value of the nth word of the declaration's value, or
 * empty string if there is no nth value.  See also has_string_word().
 */
75
inline std::string ConfigDeclaration::get_string_word(std::size_t n) const;

455 13 get_bool_word 0 4 788 32 ConfigDeclaration::get_bool_word 0 1 40 145
/**
 * Returns the boolean value of the nth word of the declaration's value, or
 * false if there is no nth value.  See also has_bool_word().
 */
66
inline bool ConfigDeclaration::get_bool_word(std::size_t n) const;

456 12 get_int_word 0 4 788 31 ConfigDeclaration::get_int_word 0 1 41 140
/**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_int_word().
 */
64
inline int ConfigDeclaration::get_int_word(std::size_t n) const;

457 14 get_int64_word 0 4 788 33 ConfigDeclaration::get_int64_word 0 1 42 140
/**
 * Returns the int64 value of the nth word of the declaration's value, or 0 if
 * there is no nth value.  See also has_int64_word().
 */
70
inline int64_t ConfigDeclaration::get_int64_word(std::size_t n) const;

458 15 get_double_word 0 4 788 34 ConfigDeclaration::get_double_word 0 1 43 143
/**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_double_word().
 */
70
inline double ConfigDeclaration::get_double_word(std::size_t n) const;

459 15 set_string_word 0 4 788 34 ConfigDeclaration::set_string_word 0 1 44 92
/**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */
81
void ConfigDeclaration::set_string_word(std::size_t n, std::string const &value);

460 13 set_bool_word 0 4 788 32 ConfigDeclaration::set_bool_word 0 1 45 92
/**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */
65
void ConfigDeclaration::set_bool_word(std::size_t n, bool value);

461 12 set_int_word 0 4 788 31 ConfigDeclaration::set_int_word 0 1 46 92
/**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */
63
void ConfigDeclaration::set_int_word(std::size_t n, int value);

462 14 set_int64_word 0 4 788 33 ConfigDeclaration::set_int64_word 0 1 47 92
/**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */
69
void ConfigDeclaration::set_int64_word(std::size_t n, int64_t value);

463 15 set_double_word 0 4 788 34 ConfigDeclaration::set_double_word 0 1 48 92
/**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */
69
void ConfigDeclaration::set_double_word(std::size_t n, double value);

464 18 get_filename_value 0 4 788 37 ConfigDeclaration::get_filename_value 0 1 49 100
/**
 * Interprets the string value as a filename and returns it, with any
 * variables expanded.
 */
59
Filename ConfigDeclaration::get_filename_value(void) const;

465 12 get_decl_seq 0 4 788 31 ConfigDeclaration::get_decl_seq 0 1 50 254
/**
 * Returns the sequence number of the declaration within the page.  Sequence
 * numbers are assigned as each declaration is created; each declaration is
 * given a higher sequence number than all the declarations created in the
 * page before it.
 */
55
inline int ConfigDeclaration::get_decl_seq(void) const;

466 6 output 0 4 788 25 ConfigDeclaration::output 0 1 51 10
/**
 *
 */
56
void ConfigDeclaration::output(std::ostream &out) const;

467 5 write 0 4 788 24 ConfigDeclaration::write 0 1 52 10
/**
 *
 */
55
void ConfigDeclaration::write(std::ostream &out) const;

468 0 0 0 0 0 0 0 0
0

469 6 output 0 4 781 18 ConfigPage::output 0 1 26 10
/**
 *
 */
49
void ConfigPage::output(std::ostream &out) const;

470 22 output_brief_signature 0 4 781 34 ConfigPage::output_brief_signature 0 1 27 61
/**
 * Outputs the first few hex digits of the signature.
 */
65
void ConfigPage::output_brief_signature(std::ostream &out) const;

471 5 write 0 4 781 17 ConfigPage::write 0 1 28 10
/**
 *
 */
48
void ConfigPage::write(std::ostream &out) const;

472 6 Notify 0 4 795 14 Notify::Notify 0 2 81 82 10
/**
 *
 */
70
Notify::Notify(void);
inline Notify::Notify(Notify const &) = default;

473 7 ~Notify 0 4 795 15 Notify::~Notify 0 0 10
/**
 *
 */
22
Notify::~Notify(void);

474 15 set_ostream_ptr 0 4 795 23 Notify::set_ostream_ptr 0 1 83 250
/**
 * Changes the ostream that all subsequent Notify messages will be written to.
 * If the previous ostream was set with delete_later = true, this will delete
 * the previous ostream.  If ostream_ptr is NULL, this resets the default to
 * cerr.
 */
75
void Notify::set_ostream_ptr(std::ostream *ostream_ptr, bool delete_later);

475 15 get_ostream_ptr 0 4 795 23 Notify::get_ostream_ptr 0 1 84 67
/**
 * Returns the system-wide ostream for all Notify messages.
 */
50
std::ostream *Notify::get_ostream_ptr(void) const;

476 18 set_assert_handler 0 4 795 26 Notify::set_assert_handler 0 0 540
/**
 * Sets a pointer to a C function that will be called when an assertion test
 * fails.  This function may decide what to do when that happens: it may
 * choose to abort or return.  If it returns, it should return true to
 * indicate that the assertion should be respected (and the calling function
 * should return out of its block of code), or false to indicate that the
 * assertion should be completely ignored.
 *
 * If an assert handler is installed, it completely replaces the default
 * behavior of nassertr() and nassertv().
 */
71
void Notify::set_assert_handler(Notify::AssertHandler *assert_handler);

477 20 clear_assert_handler 0 4 795 28 Notify::clear_assert_handler 0 1 85 110
/**
 * Removes the installed assert handler and restores default behavior of
 * nassertr() and nassertv().
 */
40
void Notify::clear_assert_handler(void);

478 18 has_assert_handler 0 4 795 26 Notify::has_assert_handler 0 1 86 85
/**
 * Returns true if a user assert handler has been installed, false otherwise.
 */
44
bool Notify::has_assert_handler(void) const;

479 18 get_assert_handler 0 4 795 26 Notify::get_assert_handler 0 1 87 110
/**
 * Returns a pointer to the user-installed assert handler, if one was
 * installed, or NULL otherwise.
 */
62
Notify::AssertHandler *Notify::get_assert_handler(void) const;

480 17 has_assert_failed 0 4 795 25 Notify::has_assert_failed 0 1 88 637
/**
 * Returns true if an assertion test has failed (and not been ignored) since
 * the last call to clear_assert_failed().
 *
 * When an assertion test fails, the assert handler may decide either to
 * abort, return, or ignore the assertion.  Naturally, if it decides to abort,
 * this flag is irrelevant.  If it chooses to ignore the assertion, the flag
 * is not set.  However, if the assert handler chooses to return out of the
 * function (the normal case), it will also set this flag to indicate that an
 * assertion failure has occurred.
 *
 * This will also be the behavior in the absence of a user-defined assert
 * handler.
 */
50
inline bool Notify::has_assert_failed(void) const;

481 24 get_assert_error_message 0 4 795 32 Notify::get_assert_error_message 0 1 89 100
/**
 * Returns the error message that corresponds to the assertion that most
 * recently failed.
 */
71
inline std::string const &Notify::get_assert_error_message(void) const;

482 19 clear_assert_failed 0 4 795 27 Notify::clear_assert_failed 0 1 90 114
/**
 * Resets the assert_failed flag that is set whenever an assertion test fails.
 * See has_assert_failed().
 */
46
inline void Notify::clear_assert_failed(void);

483 16 get_top_category 0 4 795 24 Notify::get_top_category 0 1 91 129
/**
 * Returns the topmost Category in the hierarchy.  This may be used to
 * traverse the hierarchy of available Categories.
 */
47
NotifyCategory *Notify::get_top_category(void);

484 12 get_category 0 4 795 20 Notify::get_category 0 3 92 93 94 844
/**
 * Finds or creates a new Category given the basename of the category and its
 * parent in the category hierarchy.  The parent pointer may be NULL to
 * indicate this is a top-level Category.
 */

/**
 * Finds or creates a new Category given the basename of the category and the
 * fullname of its parent.  This is another way to create a category when you
 * don't have a pointer to its parent handy, but you know the name of its
 * parent.  If the parent Category does not already exist, it will be created.
 */

/**
 * Finds or creates a new Category given the fullname of the Category.  This
 * name should be a sequence of colon-separated names of parent Categories,
 * ending in the basename of this Category, e.g.  display:glxdisplay.  This is
 * a shorthand way to define a Category when a pointer to its parent is not
 * handy.
 */
269
NotifyCategory *Notify::get_category(std::string const &basename, NotifyCategory *parent_category);
NotifyCategory *Notify::get_category(std::string const &basename, std::string const &parent_fullname);
NotifyCategory *Notify::get_category(std::string const &fullname);

485 3 out 0 4 795 11 Notify::out 0 1 95 189
/**
 * A convenient way to get the ostream that should be written to for a Notify-
 * type message.  Also see Category::out() for a message that is specific to a
 * particular Category.
 */
39
static std::ostream &Notify::out(void);

486 4 null 0 4 795 12 Notify::null 0 1 96 159
/**
 * A convenient way to get an ostream that doesn't do anything.  Returned by
 * Category::out() when a particular Category and/or Severity is disabled.
 */
40
static std::ostream &Notify::null(void);

487 12 write_string 0 4 795 20 Notify::write_string 0 1 97 209
/**
 * A convenient way for scripting languages, which may know nothing about
 * ostreams, to write to Notify.  This writes a single string, followed by an
 * implicit newline, to the Notify output stream.
 */
57
static void Notify::write_string(std::string const &str);

488 3 ptr 0 4 795 11 Notify::ptr 0 1 98 104
/**
 * Returns the pointer to the global Notify object.  There is only one of
 * these in the world.
 */
33
static Notify *Notify::ptr(void);

489 21 loaded_implicit_pages 0 4 796 40 ConfigPageManager::loaded_implicit_pages 0 1 99 155
/**
 * Returns true if the implicit *.prc files have already been loaded, false
 * otherwise.  Normally this will only be false briefly before startup.
 */
65
inline bool ConfigPageManager::loaded_implicit_pages(void) const;

490 19 load_implicit_pages 0 4 796 38 ConfigPageManager::load_implicit_pages 0 1 100 250
/**
 * Searches the PRC_DIR and/or PRC_PATH directories for *.prc files and loads
 * them in as pages.  This is normally called automatically at startup time,
 * when the first variable's value is referenced.  See also
 * reload_implicit_pages().
 */
57
inline void ConfigPageManager::load_implicit_pages(void);

491 21 reload_implicit_pages 0 4 796 40 ConfigPageManager::reload_implicit_pages 0 1 101 211
/**
 * Searches the PRC_DIR and/or PRC_PATH directories for *.prc files and loads
 * them in as pages.
 *
 * This may be called after startup, to force the system to re-read all of the
 * implicit prc files.
 */
52
void ConfigPageManager::reload_implicit_pages(void);

492 15 get_search_path 0 4 796 34 ConfigPageManager::get_search_path 0 1 102 274
/**
 * Returns the search path used to locate implicit .prc files.  This is
 * determined by the PRC_DIR and PRC_PATH environment variables.  The object
 * returned by this method may be modified to change the path at runtime, and
 * then reload_implicit_pages() called.
 */
61
inline DSearchPath &ConfigPageManager::get_search_path(void);

493 20 get_num_prc_patterns 0 4 796 39 ConfigPageManager::get_num_prc_patterns 0 1 103 270
/**
 * Returns the number of patterns, like "*.prc", that are compiled in that
 * will be searched for as default config filenames.  Normally there is only
 * one pattern, and it is "*.prc", but others may be specified with the
 * PRC_FILENAME variable in Config.pp.
 */
71
inline std::size_t ConfigPageManager::get_num_prc_patterns(void) const;

494 15 get_prc_pattern 0 4 796 34 ConfigPageManager::get_prc_pattern 0 1 104 131
/**
 * Returns the nth filename pattern that will be considered a match as a valid
 * config file.  See get_num_prc_patterns().
 */
75
inline std::string ConfigPageManager::get_prc_pattern(std::size_t n) const;

495 30 get_num_prc_encrypted_patterns 0 4 796 49 ConfigPageManager::get_num_prc_encrypted_patterns 0 1 105 170
/**
 * Returns the number of patterns, like "*.pre", that are compiled in that
 * will be searched for as special config files that are understood to be
 * encrypted.
 */
81
inline std::size_t ConfigPageManager::get_num_prc_encrypted_patterns(void) const;

496 25 get_prc_encrypted_pattern 0 4 796 44 ConfigPageManager::get_prc_encrypted_pattern 0 1 106 151
/**
 * Returns the nth filename pattern that will be considered a match as a valid
 * encrypted config file.  See get_num_prc_encrypted_patterns().
 */
85
inline std::string ConfigPageManager::get_prc_encrypted_pattern(std::size_t n) const;

497 31 get_num_prc_executable_patterns 0 4 796 50 ConfigPageManager::get_num_prc_executable_patterns 0 1 107 232
/**
 * Returns the number of patterns, like "*.exe", that are compiled in that
 * will be searched for as special config files that are to be executed as a
 * program, and their output taken to be input.  This is normally empty.
 */
82
inline std::size_t ConfigPageManager::get_num_prc_executable_patterns(void) const;

498 26 get_prc_executable_pattern 0 4 796 45 ConfigPageManager::get_prc_executable_pattern 0 1 108 159
/**
 * Returns the nth filename pattern that will be considered a match as a valid
 * executable-style config file.  See get_num_prc_executable_patterns().
 */
86
inline std::string ConfigPageManager::get_prc_executable_pattern(std::size_t n) const;

499 18 make_explicit_page 0 4 796 37 ConfigPageManager::make_explicit_page 0 1 109 206
/**
 * Creates and returns a new, empty ConfigPage.  This page will be stacked on
 * top of any pages that were created before; it may shadow variable
 * declarations that are defined in previous pages.
 */
75
ConfigPage *ConfigPageManager::make_explicit_page(std::string const &name);

500 20 delete_explicit_page 0 4 796 39 ConfigPageManager::delete_explicit_page 0 1 110 318
/**
 * Removes a previously-constructed ConfigPage from the set of active pages,
 * and deletes it.  The ConfigPage object is no longer valid after this call.
 * Returns true if the page is successfully deleted, or false if it was
 * unknown (which should never happen if the page was legitimately
 * constructed).
 */
63
bool ConfigPageManager::delete_explicit_page(ConfigPage *page);

501 22 get_num_implicit_pages 0 4 796 41 ConfigPageManager::get_num_implicit_pages 0 1 111 174
/**
 * Returns the current number of implicitly-loaded ConfigPages in the world.
 * These represent files that were automatically discovered on the disk as
 * .prc files.
 */
73
inline std::size_t ConfigPageManager::get_num_implicit_pages(void) const;

502 17 get_implicit_page 0 4 796 36 ConfigPageManager::get_implicit_page 0 1 112 94
/**
 * Returns the nth implicit ConfigPage in the world.  See
 * get_num_implicit_pages().
 */
77
inline ConfigPage *ConfigPageManager::get_implicit_page(std::size_t n) const;

503 22 get_num_explicit_pages 0 4 796 41 ConfigPageManager::get_num_explicit_pages 0 1 113 214
/**
 * Returns the current number of explicitly-loaded ConfigPages in the world.
 * These represent pages that were loaded dynamically at runtime by explicit
 * calls to ConfigPageManager::make_explicit_page().
 */
73
inline std::size_t ConfigPageManager::get_num_explicit_pages(void) const;

504 17 get_explicit_page 0 4 796 36 ConfigPageManager::get_explicit_page 0 1 114 94
/**
 * Returns the nth explicit ConfigPage in the world.  See
 * get_num_explicit_pages().
 */
77
inline ConfigPage *ConfigPageManager::get_explicit_page(std::size_t n) const;

505 6 output 0 4 796 25 ConfigPageManager::output 0 1 115 10
/**
 *
 */
56
void ConfigPageManager::output(std::ostream &out) const;

506 5 write 0 4 796 24 ConfigPageManager::write 0 1 116 10
/**
 *
 */
55
void ConfigPageManager::write(std::ostream &out) const;

507 14 get_global_ptr 0 4 796 33 ConfigPageManager::get_global_ptr 0 1 117 10
/**
 *
 */
66
static ConfigPageManager *ConfigPageManager::get_global_ptr(void);

508 13 make_variable 0 4 797 36 ConfigVariableManager::make_variable 0 1 118 181
/**
 * Creates and returns a new, undefined ConfigVariableCore with the indicated
 * name; or if a variable with this name has already been created, returns
 * that one instead.
 */
82
ConfigVariableCore *ConfigVariableManager::make_variable(std::string const &name);

509 22 make_variable_template 0 4 797 45 ConfigVariableManager::make_variable_template 0 1 119 900
/**
 * Defines a variable "template" to match against dynamically-defined
 * variables that may or may not be created in the future.
 *
 * The template consists of a glob pattern, e.g.  "notify-level-*", which will
 * be tested against any config variable passed to a future call to
 * make_variable().  If the pattern matches, the returned ConfigVariableCore
 * is copied to define the new variable, instead of creating a default, empty
 * one.
 *
 * This is useful to pre-specify default values for a family of variables that
 * all have similar properties, and all may not be created at the same time.
 * It is especially useful to avoid cluttering up the list of available
 * variables with user-declared variables that have not been defined yet by
 * the application (e.g.  "egg-object-type-*").
 *
 * This method basically pre-defines all variables that match the specified
 * glob pattern.
 */
215
ConfigVariableCore *ConfigVariableManager::make_variable_template(std::string const &pattern, ConfigFlags::ValueType type, std::string const &default_value, std::string const &description = string(), int flags = 0);

510 17 get_num_variables 0 4 797 40 ConfigVariableManager::get_num_variables 0 1 120 81
/**
 * Returns the current number of active ConfigVariableCores in the world.
 */
72
inline std::size_t ConfigVariableManager::get_num_variables(void) const;

511 12 get_variable 0 4 797 35 ConfigVariableManager::get_variable 0 1 121 66
/**
 * Returns the nth active ConfigVariableCore in the world.
 */
84
inline ConfigVariableCore *ConfigVariableManager::get_variable(std::size_t n) const;

512 17 get_variable_name 0 4 797 40 ConfigVariableManager::get_variable_name 0 1 122 73
/**
 * Returns the name of the nth active ConfigVariable in the list.
 */
74
std::string ConfigVariableManager::get_variable_name(std::size_t n) const;

513 16 is_variable_used 0 4 797 39 ConfigVariableManager::is_variable_used 0 1 123 111
/**
 * Returns true if the nth active ConfigVariable in the list has been used by
 * code, false otherwise.
 */
66
bool ConfigVariableManager::is_variable_used(std::size_t n) const;

514 0 0 0 0 0 0 0 0
0

515 6 output 0 4 797 29 ConfigVariableManager::output 0 1 124 10
/**
 *
 */
60
void ConfigVariableManager::output(std::ostream &out) const;

516 5 write 0 4 797 28 ConfigVariableManager::write 0 1 125 10
/**
 *
 */
59
void ConfigVariableManager::write(std::ostream &out) const;

517 19 write_prc_variables 0 4 797 42 ConfigVariableManager::write_prc_variables 0 1 126 343
/**
 * Writes all of the prc-set config variables, as they appear in a prc file
 * somewhere, one per line, very concisely.  This lists the dominant value in
 * the prc file; it does not list shadowed values, and it does not list
 * locally-set values.
 *
 * This is mainly intended for generating a hash of the input config file
 * state.
 */
73
void ConfigVariableManager::write_prc_variables(std::ostream &out) const;

518 21 list_unused_variables 0 4 797 44 ConfigVariableManager::list_unused_variables 0 1 127 133
/**
 * Writes a list of all the variables that have been defined in a prc file
 * without having been declared somewhere in code.
 */
62
void ConfigVariableManager::list_unused_variables(void) const;

519 14 list_variables 0 4 797 37 ConfigVariableManager::list_variables 0 1 128 123
/**
 * Writes a list of all the variables that have been declared somewhere in
 * code, along with a brief description.
 */
55
void ConfigVariableManager::list_variables(void) const;

520 22 list_dynamic_variables 0 4 797 45 ConfigVariableManager::list_dynamic_variables 0 1 129 241
/**
 * Writes a list of all the "dynamic" variables that have been declared
 * somewhere in code, along with a brief description.  This is a (usually
 * large) list of config variables that are declared with a generated variable
 * name.
 */
63
void ConfigVariableManager::list_dynamic_variables(void) const;

521 14 get_global_ptr 0 4 797 37 ConfigVariableManager::get_global_ptr 0 1 130 10
/**
 *
 */
74
static ConfigVariableManager *ConfigVariableManager::get_global_ptr(void);

522 8 get_name 0 4 798 28 ConfigVariableBase::get_name 0 1 131 44
/**
 * Returns the name of the variable.
 */
67
inline std::string const &ConfigVariableBase::get_name(void) const;

523 14 get_value_type 0 4 798 34 ConfigVariableBase::get_value_type 0 1 132 132
/**
 * Returns the stated type of this variable.  This should be VT_list, unless a
 * later variable declaration has changed it.
 */
77
inline ConfigFlags::ValueType ConfigVariableBase::get_value_type(void) const;

524 15 get_description 0 4 798 35 ConfigVariableBase::get_description 0 1 133 82
/**
 * Returns the brief description of this variable, if it has been defined.
 */
74
inline std::string const &ConfigVariableBase::get_description(void) const;

525 9 get_flags 0 4 798 29 ConfigVariableBase::get_flags 0 1 134 250
/**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */
53
inline int ConfigVariableBase::get_flags(void) const;

526 9 is_closed 0 4 798 29 ConfigVariableBase::is_closed 0 1 135 413
/**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
54
inline bool ConfigVariableBase::is_closed(void) const;

527 15 get_trust_level 0 4 798 35 ConfigVariableBase::get_trust_level 0 1 136 479
/**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
59
inline int ConfigVariableBase::get_trust_level(void) const;

528 10 is_dynamic 0 4 798 30 ConfigVariableBase::is_dynamic 0 1 137 232
/**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */
55
inline bool ConfigVariableBase::is_dynamic(void) const;

529 17 clear_local_value 0 4 798 37 ConfigVariableBase::clear_local_value 0 1 138 240
/**
 * Removes the local value defined for this variable, and allows its value to
 * be once again retrieved from the .prc files.
 *
 * Returns true if the value was successfully removed, false if it did not
 * exist in the first place.
 */
56
inline bool ConfigVariableBase::clear_local_value(void);

530 15 has_local_value 0 4 798 35 ConfigVariableBase::has_local_value 0 1 139 148
/**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */
60
inline bool ConfigVariableBase::has_local_value(void) const;

531 9 has_value 0 4 798 29 ConfigVariableBase::has_value 0 1 140 149
/**
 * Returns true if this variable has an explicit value, either from a prc file
 * or locally set, or false if variable has its default value.
 */
54
inline bool ConfigVariableBase::has_value(void) const;

532 6 output 0 4 798 26 ConfigVariableBase::output 0 1 141 10
/**
 *
 */
64
inline void ConfigVariableBase::output(std::ostream &out) const;

533 5 write 0 4 798 25 ConfigVariableBase::write 0 1 142 10
/**
 *
 */
63
inline void ConfigVariableBase::write(std::ostream &out) const;

534 14 ConfigVariable 0 4 799 30 ConfigVariable::ConfigVariable 0 2 143 144 458
/**
 * This constructor is only intended to be called from a specialized
 * ConfigVariableFoo derived class.
 */

/**
 * This constructor is only intended to be called from a specialized
 * ConfigVariableFoo derived class.
 */

/**
 * Use this constructor to make a ConfigVariable of an unspecified type.
 * Usually you'd want to do this just to reference a previously-defined
 * ConfigVariable of a specific type, without having to know what type it is.
 */
145
inline explicit ConfigVariable::ConfigVariable(std::string const &name);
inline ConfigVariable::ConfigVariable(ConfigVariable const &) = default;

535 15 ~ConfigVariable 0 4 799 31 ConfigVariable::~ConfigVariable 0 0 10
/**
 *
 */
45
inline ConfigVariable::~ConfigVariable(void);

536 16 get_string_value 0 4 799 32 ConfigVariable::get_string_value 0 1 145 77
/**
 * Returns the toplevel value of the variable, formatted as a string.
 */
71
inline std::string const &ConfigVariable::get_string_value(void) const;

537 16 set_string_value 0 4 799 32 ConfigVariable::set_string_value 0 1 146 177
/**
 * Changes the value assigned to this variable.  This creates a local value
 * that shadows any values defined in the .prc files, until
 * clear_local_value() is called.
 */
71
inline void ConfigVariable::set_string_value(std::string const &value);

538 11 clear_value 0 4 799 27 ConfigVariable::clear_value 0 1 147 129
/**
 * Removes the value assigned to this variable, and lets its original value
 * (as read from the prc files) show through.
 */
46
inline void ConfigVariable::clear_value(void);

539 13 get_num_words 0 4 799 29 ConfigVariable::get_num_words 0 1 148 153
/**
 * Returns the number of words in the variable's value.  A word is defined as
 * a sequence of non-whitespace characters delimited by whitespace.
 */
61
inline std::size_t ConfigVariable::get_num_words(void) const;

540 18 ConfigVariableBool 0 4 800 38 ConfigVariableBool::ConfigVariableBool 0 4 149 150 151 152 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
470
inline ConfigVariableBool::ConfigVariableBool(std::string const &name);
inline ConfigVariableBool::ConfigVariableBool(std::string const &name, bool default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableBool::ConfigVariableBool(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableBool::ConfigVariableBool(ConfigVariableBool const &) = default;

541 10 operator = 0 4 800 30 ConfigVariableBool::operator = 0 1 153 0
55
inline void ConfigVariableBool::operator =(bool value);

542 22 operator typecast bool 0 132 800 42 ConfigVariableBool::operator typecast bool 0 1 161 0
34
inline operator bool (void) const;

543 4 size 0 4 800 24 ConfigVariableBool::size 0 1 154 62
/**
 * Returns the number of unique words in the variable.
 */
56
inline std::size_t ConfigVariableBool::size(void) const;

544 11 operator [] 0 4 800 31 ConfigVariableBool::operator [] 0 1 155 0
65
inline bool ConfigVariableBool::operator [](std::size_t n) const;

545 9 set_value 0 4 800 29 ConfigVariableBool::set_value 0 1 156 48
/**
 * Reassigns the variable's local value.
 */
54
inline void ConfigVariableBool::set_value(bool value);

546 9 get_value 0 4 800 29 ConfigVariableBool::get_value 0 1 157 40
/**
 * Returns the variable's value.
 */
54
inline bool ConfigVariableBool::get_value(void) const;

547 17 get_default_value 0 4 800 37 ConfigVariableBool::get_default_value 0 1 158 48
/**
 * Returns the variable's default value.
 */
62
inline bool ConfigVariableBool::get_default_value(void) const;

548 8 get_word 0 4 800 28 ConfigVariableBool::get_word 0 1 159 44
/**
 * Returns the variable's nth value.
 */
62
inline bool ConfigVariableBool::get_word(std::size_t n) const;

549 8 set_word 0 4 800 28 ConfigVariableBool::set_word 0 1 160 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
68
inline void ConfigVariableBool::set_word(std::size_t n, bool value);

550 19 ~ConfigVariableBool 0 4 800 39 ConfigVariableBool::~ConfigVariableBool 0 0 0
46
ConfigVariableBool::~ConfigVariableBool(void);

551 20 ConfigVariableDouble 0 4 801 42 ConfigVariableDouble::ConfigVariableDouble 0 4 162 163 164 165 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
490
inline ConfigVariableDouble::ConfigVariableDouble(std::string const &name);
inline ConfigVariableDouble::ConfigVariableDouble(std::string const &name, double default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableDouble::ConfigVariableDouble(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableDouble::ConfigVariableDouble(ConfigVariableDouble const &) = default;

552 10 operator = 0 4 801 32 ConfigVariableDouble::operator = 0 1 166 0
59
inline void ConfigVariableDouble::operator =(double value);

553 24 operator typecast double 0 132 801 46 ConfigVariableDouble::operator typecast double 0 1 174 0
36
inline operator double (void) const;

554 4 size 0 4 801 26 ConfigVariableDouble::size 0 1 167 62
/**
 * Returns the number of unique words in the variable.
 */
58
inline std::size_t ConfigVariableDouble::size(void) const;

555 11 operator [] 0 4 801 33 ConfigVariableDouble::operator [] 0 1 168 0
69
inline double ConfigVariableDouble::operator [](std::size_t n) const;

556 9 set_value 0 4 801 31 ConfigVariableDouble::set_value 0 1 169 48
/**
 * Reassigns the variable's local value.
 */
58
inline void ConfigVariableDouble::set_value(double value);

557 9 get_value 0 4 801 31 ConfigVariableDouble::get_value 0 1 170 40
/**
 * Returns the variable's value.
 */
58
inline double ConfigVariableDouble::get_value(void) const;

558 17 get_default_value 0 4 801 39 ConfigVariableDouble::get_default_value 0 1 171 48
/**
 * Returns the variable's default value.
 */
66
inline double ConfigVariableDouble::get_default_value(void) const;

559 8 get_word 0 4 801 30 ConfigVariableDouble::get_word 0 1 172 44
/**
 * Returns the variable's nth value.
 */
66
inline double ConfigVariableDouble::get_word(std::size_t n) const;

560 8 set_word 0 4 801 30 ConfigVariableDouble::set_word 0 1 173 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
72
inline void ConfigVariableDouble::set_word(std::size_t n, double value);

561 21 ~ConfigVariableDouble 0 4 801 43 ConfigVariableDouble::~ConfigVariableDouble 0 0 0
50
ConfigVariableDouble::~ConfigVariableDouble(void);

562 22 ConfigVariableFilename 0 4 803 46 ConfigVariableFilename::ConfigVariableFilename 0 3 175 176 177 22
/**
 *
 */

/**
 *
 */
345
inline ConfigVariableFilename::ConfigVariableFilename(std::string const &name);
inline ConfigVariableFilename::ConfigVariableFilename(std::string const &name, Filename const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableFilename::ConfigVariableFilename(ConfigVariableFilename const &) = default;

563 10 operator = 0 4 803 34 ConfigVariableFilename::operator = 0 1 178 0
70
inline void ConfigVariableFilename::operator =(Filename const &value);

564 17 operator typecast 0 132 803 41 ConfigVariableFilename::operator typecast 0 1 197 0
45
inline operator Filename const &(void) const;

565 5 c_str 0 4 803 29 ConfigVariableFilename::c_str 0 1 179 88
// These methods help the ConfigVariableFilename act like a Filename object.

/**
 *
 */
61
inline char const *ConfigVariableFilename::c_str(void) const;

566 5 empty 0 4 803 29 ConfigVariableFilename::empty 0 1 180 10
/**
 *
 */
54
inline bool ConfigVariableFilename::empty(void) const;

567 6 length 0 4 803 30 ConfigVariableFilename::length 0 1 181 10
/**
 *
 */
62
inline std::size_t ConfigVariableFilename::length(void) const;

568 11 operator [] 0 4 803 35 ConfigVariableFilename::operator [] 0 1 182 0
69
inline char ConfigVariableFilename::operator [](std::size_t n) const;

569 12 get_fullpath 0 4 803 36 ConfigVariableFilename::get_fullpath 0 1 183 183
/**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator, so this function is a
 * little redundant.
 */
68
inline std::string ConfigVariableFilename::get_fullpath(void) const;

570 11 get_dirname 0 4 803 35 ConfigVariableFilename::get_dirname 0 1 184 139
/**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */
67
inline std::string ConfigVariableFilename::get_dirname(void) const;

571 12 get_basename 0 4 803 36 ConfigVariableFilename::get_basename 0 1 185 145
/**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */
68
inline std::string ConfigVariableFilename::get_basename(void) const;

572 25 get_fullpath_wo_extension 0 4 803 49 ConfigVariableFilename::get_fullpath_wo_extension 0 1 186 96
/**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */
81
inline std::string ConfigVariableFilename::get_fullpath_wo_extension(void) const;

573 25 get_basename_wo_extension 0 4 803 49 ConfigVariableFilename::get_basename_wo_extension 0 1 187 81
/**
 * Returns the basename part of the filename, without the file extension.
 */
81
inline std::string ConfigVariableFilename::get_basename_wo_extension(void) const;

574 13 get_extension 0 4 803 37 ConfigVariableFilename::get_extension 0 1 188 140
/**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */
69
inline std::string ConfigVariableFilename::get_extension(void) const;

575 11 operator == 0 4 803 35 ConfigVariableFilename::operator == 0 1 189 34
// Comparison operators are handy.
77
inline bool ConfigVariableFilename::operator ==(Filename const &other) const;

576 11 operator != 0 4 803 35 ConfigVariableFilename::operator != 0 1 190 0
77
inline bool ConfigVariableFilename::operator !=(Filename const &other) const;

577 10 operator < 0 4 803 34 ConfigVariableFilename::operator < 0 1 191 0
76
inline bool ConfigVariableFilename::operator <(Filename const &other) const;

578 9 set_value 0 4 803 33 ConfigVariableFilename::set_value 0 1 192 48
/**
 * Reassigns the variable's local value.
 */
69
inline void ConfigVariableFilename::set_value(Filename const &value);

579 9 get_value 0 4 803 33 ConfigVariableFilename::get_value 0 1 193 40
/**
 * Returns the variable's value.
 */
62
inline Filename ConfigVariableFilename::get_value(void) const;

580 17 get_default_value 0 4 803 41 ConfigVariableFilename::get_default_value 0 1 194 48
/**
 * Returns the variable's default value.
 */
70
inline Filename ConfigVariableFilename::get_default_value(void) const;

581 8 get_word 0 4 803 32 ConfigVariableFilename::get_word 0 1 195 44
/**
 * Returns the variable's nth value.
 */
70
inline Filename ConfigVariableFilename::get_word(std::size_t n) const;

582 8 set_word 0 4 803 32 ConfigVariableFilename::set_word 0 1 196 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
83
inline void ConfigVariableFilename::set_word(std::size_t n, Filename const &value);

583 23 ~ConfigVariableFilename 0 4 803 47 ConfigVariableFilename::~ConfigVariableFilename 0 0 0
54
ConfigVariableFilename::~ConfigVariableFilename(void);

584 17 ConfigVariableInt 0 4 805 36 ConfigVariableInt::ConfigVariableInt 0 4 198 199 200 201 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
460
inline ConfigVariableInt::ConfigVariableInt(std::string const &name);
inline ConfigVariableInt::ConfigVariableInt(std::string const &name, int default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt::ConfigVariableInt(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt::ConfigVariableInt(ConfigVariableInt const &) = default;

585 10 operator = 0 4 805 29 ConfigVariableInt::operator = 0 1 202 0
53
inline void ConfigVariableInt::operator =(int value);

586 21 operator typecast int 0 132 805 40 ConfigVariableInt::operator typecast int 0 1 210 0
33
inline operator int (void) const;

587 4 size 0 4 805 23 ConfigVariableInt::size 0 1 203 62
/**
 * Returns the number of unique words in the variable.
 */
55
inline std::size_t ConfigVariableInt::size(void) const;

588 11 operator [] 0 4 805 30 ConfigVariableInt::operator [] 0 1 204 0
63
inline int ConfigVariableInt::operator [](std::size_t n) const;

589 9 set_value 0 4 805 28 ConfigVariableInt::set_value 0 1 205 48
/**
 * Reassigns the variable's local value.
 */
52
inline void ConfigVariableInt::set_value(int value);

590 9 get_value 0 4 805 28 ConfigVariableInt::get_value 0 1 206 40
/**
 * Returns the variable's value.
 */
52
inline int ConfigVariableInt::get_value(void) const;

591 17 get_default_value 0 4 805 36 ConfigVariableInt::get_default_value 0 1 207 48
/**
 * Returns the variable's default value.
 */
60
inline int ConfigVariableInt::get_default_value(void) const;

592 8 get_word 0 4 805 27 ConfigVariableInt::get_word 0 1 208 44
/**
 * Returns the variable's nth value.
 */
60
inline int ConfigVariableInt::get_word(std::size_t n) const;

593 8 set_word 0 4 805 27 ConfigVariableInt::set_word 0 1 209 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
66
inline void ConfigVariableInt::set_word(std::size_t n, int value);

594 18 ~ConfigVariableInt 0 4 805 37 ConfigVariableInt::~ConfigVariableInt 0 0 0
44
ConfigVariableInt::~ConfigVariableInt(void);

595 19 ConfigVariableInt64 0 4 806 40 ConfigVariableInt64::ConfigVariableInt64 0 4 211 212 213 214 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
482
inline ConfigVariableInt64::ConfigVariableInt64(std::string const &name);
inline ConfigVariableInt64::ConfigVariableInt64(std::string const &name, int64_t default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt64::ConfigVariableInt64(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt64::ConfigVariableInt64(ConfigVariableInt64 const &) = default;

596 10 operator = 0 4 806 31 ConfigVariableInt64::operator = 0 1 215 0
59
inline void ConfigVariableInt64::operator =(int64_t value);

597 25 operator typecast int64_t 0 132 806 46 ConfigVariableInt64::operator typecast int64_t 0 1 223 0
37
inline operator int64_t (void) const;

598 4 size 0 4 806 25 ConfigVariableInt64::size 0 1 216 62
/**
 * Returns the number of unique words in the variable.
 */
57
inline std::size_t ConfigVariableInt64::size(void) const;

599 11 operator [] 0 4 806 32 ConfigVariableInt64::operator [] 0 1 217 0
69
inline int64_t ConfigVariableInt64::operator [](std::size_t n) const;

600 9 set_value 0 4 806 30 ConfigVariableInt64::set_value 0 1 218 48
/**
 * Reassigns the variable's local value.
 */
58
inline void ConfigVariableInt64::set_value(int64_t value);

601 9 get_value 0 4 806 30 ConfigVariableInt64::get_value 0 1 219 40
/**
 * Returns the variable's value.
 */
58
inline int64_t ConfigVariableInt64::get_value(void) const;

602 17 get_default_value 0 4 806 38 ConfigVariableInt64::get_default_value 0 1 220 48
/**
 * Returns the variable's default value.
 */
66
inline int64_t ConfigVariableInt64::get_default_value(void) const;

603 8 get_word 0 4 806 29 ConfigVariableInt64::get_word 0 1 221 44
/**
 * Returns the variable's nth value.
 */
66
inline int64_t ConfigVariableInt64::get_word(std::size_t n) const;

604 8 set_word 0 4 806 29 ConfigVariableInt64::set_word 0 1 222 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
72
inline void ConfigVariableInt64::set_word(std::size_t n, int64_t value);

605 20 ~ConfigVariableInt64 0 4 806 41 ConfigVariableInt64::~ConfigVariableInt64 0 0 0
48
ConfigVariableInt64::~ConfigVariableInt64(void);

606 18 ConfigVariableList 0 4 809 38 ConfigVariableList::ConfigVariableList 0 2 224 225 10
/**
 *
 */
214
inline ConfigVariableList::ConfigVariableList(std::string const &name, std::string const &description = string(), int flags = 0);
inline ConfigVariableList::ConfigVariableList(ConfigVariableList const &) = default;

607 19 ~ConfigVariableList 0 4 809 39 ConfigVariableList::~ConfigVariableList 0 0 10
/**
 *
 */
53
inline ConfigVariableList::~ConfigVariableList(void);

608 14 get_num_values 0 4 809 34 ConfigVariableList::get_num_values 0 1 226 56
/**
 * Returns the number of values in the variable.
 */
66
inline std::size_t ConfigVariableList::get_num_values(void) const;

609 16 get_string_value 0 4 809 36 ConfigVariableList::get_string_value 0 1 227 49
/**
 * Returns the nth value of the variable.
 */
77
inline std::string ConfigVariableList::get_string_value(std::size_t n) const;

610 21 get_num_unique_values 0 4 809 41 ConfigVariableList::get_num_unique_values 0 1 228 63
/**
 * Returns the number of unique values in the variable.
 */
73
inline std::size_t ConfigVariableList::get_num_unique_values(void) const;

611 16 get_unique_value 0 4 809 36 ConfigVariableList::get_unique_value 0 1 229 56
/**
 * Returns the nth unique value of the variable.
 */
77
inline std::string ConfigVariableList::get_unique_value(std::size_t n) const;

612 4 size 0 4 809 24 ConfigVariableList::size 0 1 230 63
/**
 * Returns the number of unique values of the variable.
 */
56
inline std::size_t ConfigVariableList::size(void) const;

613 11 operator [] 0 4 809 31 ConfigVariableList::operator [] 0 1 231 0
72
inline std::string ConfigVariableList::operator [](std::size_t n) const;

614 6 output 0 4 809 26 ConfigVariableList::output 0 1 232 10
/**
 *
 */
57
void ConfigVariableList::output(std::ostream &out) const;

615 5 write 0 4 809 25 ConfigVariableList::write 0 1 233 10
/**
 *
 */
56
void ConfigVariableList::write(std::ostream &out) const;

616 24 ConfigVariableSearchPath 0 4 810 50 ConfigVariableSearchPath::ConfigVariableSearchPath 0 3 234 235 236 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
471
inline ConfigVariableSearchPath::ConfigVariableSearchPath(std::string const &name, std::string const &description = string(), int flags = 0);
inline ConfigVariableSearchPath::ConfigVariableSearchPath(std::string const &name, DSearchPath const &default_value, std::string const &description, int flags = 0);
inline ConfigVariableSearchPath::ConfigVariableSearchPath(std::string const &name, std::string const &default_value, std::string const &description, int flags = 0);

617 25 ~ConfigVariableSearchPath 0 4 810 51 ConfigVariableSearchPath::~ConfigVariableSearchPath 0 0 10
/**
 *
 */
65
inline ConfigVariableSearchPath::~ConfigVariableSearchPath(void);

618 29 operator typecast DSearchPath 0 132 810 55 ConfigVariableSearchPath::operator typecast DSearchPath 0 1 254 0
41
inline operator DSearchPath (void) const;

619 9 get_value 0 4 810 35 ConfigVariableSearchPath::get_value 0 1 237 10
/**
 *
 */
67
inline DSearchPath ConfigVariableSearchPath::get_value(void) const;

620 17 get_default_value 0 4 810 43 ConfigVariableSearchPath::get_default_value 0 1 238 10
/**
 *
 */
82
inline DSearchPath const &ConfigVariableSearchPath::get_default_value(void) const;

621 17 clear_local_value 0 4 810 43 ConfigVariableSearchPath::clear_local_value 0 1 239 113
/**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */
62
inline bool ConfigVariableSearchPath::clear_local_value(void);

622 5 clear 0 4 810 31 ConfigVariableSearchPath::clear 0 1 240 113
/**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */
50
inline void ConfigVariableSearchPath::clear(void);

623 16 append_directory 0 4 810 42 ConfigVariableSearchPath::append_directory 0 1 241 62
/**
 * Adds a new directory to the end of the search list.
 */
82
inline void ConfigVariableSearchPath::append_directory(Filename const &directory);

624 17 prepend_directory 0 4 810 43 ConfigVariableSearchPath::prepend_directory 0 1 242 64
/**
 * Adds a new directory to the front of the search list.
 */
83
inline void ConfigVariableSearchPath::prepend_directory(Filename const &directory);

625 11 append_path 0 4 810 37 ConfigVariableSearchPath::append_path 0 2 243 244 198
/**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */

/**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */
192
inline void ConfigVariableSearchPath::append_path(std::string const &path, std::string const &separator = string());
inline void ConfigVariableSearchPath::append_path(DSearchPath const &path);

626 12 prepend_path 0 4 810 38 ConfigVariableSearchPath::prepend_path 0 1 245 104
/**
 * Adds all of the directories listed in the search path to the beginning of
 * the search list.
 */
76
inline void ConfigVariableSearchPath::prepend_path(DSearchPath const &path);

627 8 is_empty 0 4 810 34 ConfigVariableSearchPath::is_empty 0 1 246 69
/**
 * Returns true if the search list is empty, false otherwise.
 */
59
inline bool ConfigVariableSearchPath::is_empty(void) const;

628 19 get_num_directories 0 4 810 45 ConfigVariableSearchPath::get_num_directories 0 1 247 64
/**
 * Returns the number of directories on the search list.
 */
77
inline std::size_t ConfigVariableSearchPath::get_num_directories(void) const;

629 13 get_directory 0 4 810 39 ConfigVariableSearchPath::get_directory 0 1 248 56
/**
 * Returns the nth directory on the search list.
 */
77
inline Filename ConfigVariableSearchPath::get_directory(std::size_t n) const;

630 0 0 0 0 0 0 0 0
0

631 9 find_file 0 4 810 35 ConfigVariableSearchPath::find_file 0 1 249 197
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Returns the full matching pathname of the first match if found, or
 * the empty string if not found.
 */
84
inline Filename ConfigVariableSearchPath::find_file(Filename const &filename) const;

632 14 find_all_files 0 4 810 40 ConfigVariableSearchPath::find_all_files 0 2 250 251 549
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */

/**
 * This variant of find_all_files() returns the new Results object, instead of
 * filling on in on the parameter list.  This is a little more convenient to
 * call from Python.
 */
225
inline std::size_t ConfigVariableSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;
inline DSearchPath::Results ConfigVariableSearchPath::find_all_files(Filename const &filename) const;

633 6 output 0 4 810 32 ConfigVariableSearchPath::output 0 1 252 10
/**
 *
 */
70
inline void ConfigVariableSearchPath::output(std::ostream &out) const;

634 5 write 0 4 810 31 ConfigVariableSearchPath::write 0 1 253 10
/**
 *
 */
69
inline void ConfigVariableSearchPath::write(std::ostream &out) const;

635 20 ConfigVariableString 0 4 813 42 ConfigVariableString::ConfigVariableString 0 3 255 256 257 22
/**
 *
 */

/**
 *
 */
334
inline ConfigVariableString::ConfigVariableString(std::string const &name);
inline ConfigVariableString::ConfigVariableString(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableString::ConfigVariableString(ConfigVariableString const &) = default;

636 10 operator = 0 4 813 32 ConfigVariableString::operator = 0 1 258 0
71
inline void ConfigVariableString::operator =(std::string const &value);

637 17 operator typecast 0 132 813 39 ConfigVariableString::operator typecast 0 1 271 0
48
inline operator std::string const &(void) const;

638 5 c_str 0 4 813 27 ConfigVariableString::c_str 0 1 259 88
// These methods help the ConfigVariableString act like a C++ string object.

/**
 *
 */
59
inline char const *ConfigVariableString::c_str(void) const;

639 5 empty 0 4 813 27 ConfigVariableString::empty 0 1 260 10
/**
 *
 */
52
inline bool ConfigVariableString::empty(void) const;

640 6 length 0 4 813 28 ConfigVariableString::length 0 1 261 10
/**
 *
 */
60
inline std::size_t ConfigVariableString::length(void) const;

641 11 operator [] 0 4 813 33 ConfigVariableString::operator [] 0 1 262 0
67
inline char ConfigVariableString::operator [](std::size_t n) const;

642 11 operator == 0 4 813 33 ConfigVariableString::operator == 0 1 263 34
// Comparison operators are handy.
78
inline bool ConfigVariableString::operator ==(std::string const &other) const;

643 11 operator != 0 4 813 33 ConfigVariableString::operator != 0 1 264 0
78
inline bool ConfigVariableString::operator !=(std::string const &other) const;

644 10 operator < 0 4 813 32 ConfigVariableString::operator < 0 1 265 0
77
inline bool ConfigVariableString::operator <(std::string const &other) const;

645 9 set_value 0 4 813 31 ConfigVariableString::set_value 0 1 266 48
/**
 * Reassigns the variable's local value.
 */
70
inline void ConfigVariableString::set_value(std::string const &value);

646 9 get_value 0 4 813 31 ConfigVariableString::get_value 0 1 267 40
/**
 * Returns the variable's value.
 */
70
inline std::string const &ConfigVariableString::get_value(void) const;

647 17 get_default_value 0 4 813 39 ConfigVariableString::get_default_value 0 1 268 48
/**
 * Returns the variable's default value.
 */
71
inline std::string ConfigVariableString::get_default_value(void) const;

648 8 get_word 0 4 813 30 ConfigVariableString::get_word 0 1 269 44
/**
 * Returns the variable's nth value.
 */
71
inline std::string ConfigVariableString::get_word(std::size_t n) const;

649 8 set_word 0 4 813 30 ConfigVariableString::set_word 0 1 270 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
84
inline void ConfigVariableString::set_word(std::size_t n, std::string const &value);

650 21 ~ConfigVariableString 0 4 813 43 ConfigVariableString::~ConfigVariableString 0 0 0
50
ConfigVariableString::~ConfigVariableString(void);

651 20 upcast_to_MemoryBase 0 12 814 36 NotifyCategory::upcast_to_MemoryBase 0 1 294 40
upcast from NotifyCategory to MemoryBase
55
MemoryBase *NotifyCategory::upcast_to_MemoryBase(void);

652 26 downcast_to_NotifyCategory 0 12 815 38 MemoryBase::downcast_to_NotifyCategory 0 0 42
downcast from MemoryBase to NotifyCategory
61
NotifyCategory *MemoryBase::downcast_to_NotifyCategory(void);

653 21 upcast_to_ConfigFlags 0 12 814 37 NotifyCategory::upcast_to_ConfigFlags 0 1 295 41
upcast from NotifyCategory to ConfigFlags
57
ConfigFlags *NotifyCategory::upcast_to_ConfigFlags(void);

654 26 downcast_to_NotifyCategory 0 12 778 39 ConfigFlags::downcast_to_NotifyCategory 0 0 43
downcast from ConfigFlags to NotifyCategory
62
NotifyCategory *ConfigFlags::downcast_to_NotifyCategory(void);

655 12 get_fullname 0 4 814 28 NotifyCategory::get_fullname 0 1 273 10
/**
 *
 */
60
inline std::string NotifyCategory::get_fullname(void) const;

656 12 get_basename 0 4 814 28 NotifyCategory::get_basename 0 1 274 10
/**
 *
 */
60
inline std::string NotifyCategory::get_basename(void) const;

657 12 get_severity 0 4 814 28 NotifyCategory::get_severity 0 1 275 10
/**
 *
 */
63
inline NotifySeverity NotifyCategory::get_severity(void) const;

658 12 set_severity 0 4 814 28 NotifyCategory::set_severity 0 1 276 150
/**
 * Sets the severity level of messages that will be reported from this
 * Category.  This allows any message of this severity level or higher.
 */
66
inline void NotifyCategory::set_severity(NotifySeverity severity);

659 5 is_on 0 4 814 21 NotifyCategory::is_on 0 1 277 110
/**
 * Returns true if messages of the indicated severity level ought to be
 * reported for this Category.
 */
65
inline bool NotifyCategory::is_on(NotifySeverity severity) const;

660 7 is_spam 0 4 814 23 NotifyCategory::is_spam 0 1 278 51
/**
 * A shorthand way to write is_on(NS_spam).
 */
48
inline bool NotifyCategory::is_spam(void) const;

661 8 is_debug 0 4 814 24 NotifyCategory::is_debug 0 1 279 52
/**
 * A shorthand way to write is_on(NS_debug).
 */
49
inline bool NotifyCategory::is_debug(void) const;

662 7 is_info 0 4 814 23 NotifyCategory::is_info 0 1 280 51
/**
 * A shorthand way to write is_on(NS_info).
 */
48
inline bool NotifyCategory::is_info(void) const;

663 10 is_warning 0 4 814 26 NotifyCategory::is_warning 0 1 281 54
/**
 * A shorthand way to write is_on(NS_warning).
 */
51
inline bool NotifyCategory::is_warning(void) const;

664 8 is_error 0 4 814 24 NotifyCategory::is_error 0 1 282 52
/**
 * A shorthand way to write is_on(NS_error).
 */
49
inline bool NotifyCategory::is_error(void) const;

665 8 is_fatal 0 4 814 24 NotifyCategory::is_fatal 0 1 283 52
/**
 * A shorthand way to write is_on(NS_fatal).
 */
49
inline bool NotifyCategory::is_fatal(void) const;

666 3 out 0 4 814 19 NotifyCategory::out 0 1 284 277
/**
 * Begins a new message to this Category at the indicated severity level.  If
 * the indicated severity level is enabled, this writes a prefixing string to
 * the Notify::out() stream and returns that.  If the severity level is
 * disabled, this returns Notify::null().
 */
85
std::ostream &NotifyCategory::out(NotifySeverity severity, bool prefix = true) const;

667 4 spam 0 4 814 20 NotifyCategory::spam 0 1 285 49
/**
 * A shorthand way to write out(NS_spam).
 */
68
inline std::ostream &NotifyCategory::spam(bool prefix = true) const;

668 5 debug 0 4 814 21 NotifyCategory::debug 0 1 286 50
/**
 * A shorthand way to write out(NS_debug).
 */
69
inline std::ostream &NotifyCategory::debug(bool prefix = true) const;

669 4 info 0 4 814 20 NotifyCategory::info 0 1 287 49
/**
 * A shorthand way to write out(NS_info).
 */
68
inline std::ostream &NotifyCategory::info(bool prefix = true) const;

670 7 warning 0 4 814 23 NotifyCategory::warning 0 1 288 52
/**
 * A shorthand way to write out(NS_warning).
 */
71
inline std::ostream &NotifyCategory::warning(bool prefix = true) const;

671 5 error 0 4 814 21 NotifyCategory::error 0 1 289 50
/**
 * A shorthand way to write out(NS_error).
 */
69
inline std::ostream &NotifyCategory::error(bool prefix = true) const;

672 5 fatal 0 4 814 21 NotifyCategory::fatal 0 1 290 50
/**
 * A shorthand way to write out(NS_fatal).
 */
69
inline std::ostream &NotifyCategory::fatal(bool prefix = true) const;

673 16 get_num_children 0 4 814 32 NotifyCategory::get_num_children 0 1 291 78
/**
 * Returns the number of child Categories of this particular Category.
 */
57
std::size_t NotifyCategory::get_num_children(void) const;

674 9 get_child 0 4 814 25 NotifyCategory::get_child 0 1 292 70
/**
 * Returns the nth child Category of this particular Category.
 */
63
NotifyCategory *NotifyCategory::get_child(std::size_t i) const;

675 0 0 0 0 0 0 0 0
0

676 16 set_server_delta 0 4 814 32 NotifyCategory::set_server_delta 0 1 293 207
/**
 * Sets a global delta (in seconds) between the local time and the server's
 * time, for the purpose of synchronizing the time stamps in the log messages
 * of the client with that of a known server.
 */
61
static void NotifyCategory::set_server_delta(long int delta);

677 14 NotifyCategory 0 4 814 30 NotifyCategory::NotifyCategory 0 1 272 10
/**
 *
 */
72
inline NotifyCategory::NotifyCategory(NotifyCategory const &) = default;

678 15 ~NotifyCategory 0 4 814 31 NotifyCategory::~NotifyCategory 0 0 0
38
NotifyCategory::~NotifyCategory(void);

679 14 IDecryptStream 0 4 817 30 IDecryptStream::IDecryptStream 0 2 296 297 22
/**
 *
 */

/**
 *
 */
161
inline IDecryptStream::IDecryptStream(void);
inline explicit IDecryptStream::IDecryptStream(std::istream *source, bool owns_source, std::string const &password);

680 4 open 0 4 817 20 IDecryptStream::open 0 1 298 10
/**
 *
 */
113
inline IDecryptStream &IDecryptStream::open(std::istream *source, bool owns_source, std::string const &password);

681 5 close 0 4 817 21 IDecryptStream::close 0 1 299 124
/**
 * Resets the EncryptStream to empty, but does not actually close the source
 * istream unless owns_source was true.
 */
51
inline IDecryptStream &IDecryptStream::close(void);

682 13 get_algorithm 0 4 817 29 IDecryptStream::get_algorithm 0 1 300 74
/**
 * Returns the encryption algorithm that was read from the stream.
 */
68
inline std::string const &IDecryptStream::get_algorithm(void) const;

683 14 get_key_length 0 4 817 30 IDecryptStream::get_key_length 0 1 301 85
/**
 * Returns the encryption key length, in bits, that was read from the stream.
 */
54
inline int IDecryptStream::get_key_length(void) const;

684 19 get_iteration_count 0 4 817 35 IDecryptStream::get_iteration_count 0 1 302 63
/**
 * Returns the value that was was read from the stream.
 */
59
inline int IDecryptStream::get_iteration_count(void) const;

685 15 ~IDecryptStream 0 4 817 31 IDecryptStream::~IDecryptStream 0 0 0
38
IDecryptStream::~IDecryptStream(void);

686 14 OEncryptStream 0 4 819 30 OEncryptStream::OEncryptStream 0 2 303 304 22
/**
 *
 */

/**
 *
 */
157
inline OEncryptStream::OEncryptStream(void);
inline explicit OEncryptStream::OEncryptStream(std::ostream *dest, bool owns_dest, std::string const &password);

687 4 open 0 4 819 20 OEncryptStream::open 0 1 305 10
/**
 *
 */
109
inline OEncryptStream &OEncryptStream::open(std::ostream *dest, bool owns_dest, std::string const &password);

688 5 close 0 4 819 21 OEncryptStream::close 0 1 306 120
/**
 * Resets the EncryptStream to empty, but does not actually close the dest
 * ostream unless owns_dest was true.
 */
51
inline OEncryptStream &OEncryptStream::close(void);

689 13 set_algorithm 0 4 819 29 OEncryptStream::set_algorithm 0 1 307 383
/**
 * Specifies the encryption algorithm that should be used for future calls to
 * open().  The default is whatever is specified by the encryption-algorithm
 * config variable.  The complete set of available algorithms is defined by
 * the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but open() will fail.
 */
72
inline void OEncryptStream::set_algorithm(std::string const &algorithm);

690 14 set_key_length 0 4 819 30 OEncryptStream::set_key_length 0 1 308 347
/**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to open().  The default is whatever is specified
 * by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but open() will fail.
 */
59
inline void OEncryptStream::set_key_length(int key_length);

691 19 set_iteration_count 0 4 819 35 OEncryptStream::set_iteration_count 0 1 309 495
/**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to open().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the encryption-iteration-count
 * config variable.
 */
69
inline void OEncryptStream::set_iteration_count(int iteration_count);

692 13 get_algorithm 0 4 819 29 OEncryptStream::get_algorithm 0 0 74
/**
 * Returns the encryption algorithm that was read from the stream.
 */
68
inline std::string const &OEncryptStream::get_algorithm(void) const;

693 14 get_key_length 0 4 819 30 OEncryptStream::get_key_length 0 0 85
/**
 * Returns the encryption key length, in bits, that was read from the stream.
 */
54
inline int OEncryptStream::get_key_length(void) const;

694 19 get_iteration_count 0 4 819 35 OEncryptStream::get_iteration_count 0 0 63
/**
 * Returns the value that was was read from the stream.
 */
59
inline int OEncryptStream::get_iteration_count(void) const;

695 15 ~OEncryptStream 0 4 819 31 OEncryptStream::~OEncryptStream 0 0 0
38
OEncryptStream::~OEncryptStream(void);

696 12 StreamReader 0 4 821 26 StreamReader::StreamReader 0 3 310 311 312 254
/**
 *
 */

/**
 * If owns_stream is true, the stream pointer will be deleted when the
 * StreamReader destructs.
 */

/**
 * The copy constructor does not copy ownership of the stream.
 */

/**
 * The move constructor steals ownership of the stream.
 */
205
inline explicit StreamReader::StreamReader(std::istream *in, bool owns_stream);
inline StreamReader::StreamReader(StreamReader const &copy);
inline StreamReader::StreamReader(StreamReader &&from) noexcept;

697 10 operator = 0 4 821 24 StreamReader::operator = 0 2 313 314 0
131
inline void StreamReader::operator =(StreamReader const &copy);
inline void StreamReader::operator =(StreamReader &&from) noexcept;

698 13 ~StreamReader 0 4 821 27 StreamReader::~StreamReader 0 0 10
/**
 *
 */
41
inline StreamReader::~StreamReader(void);

699 11 get_istream 0 4 821 25 StreamReader::get_istream 0 1 315 37
/**
 * Returns the stream in use.
 */
59
inline std::istream *StreamReader::get_istream(void) const;

700 8 get_bool 0 4 821 22 StreamReader::get_bool 0 1 316 36
/**
 * Extracts a boolean value.
 */
41
inline bool StreamReader::get_bool(void);

701 8 get_int8 0 4 821 22 StreamReader::get_int8 0 1 317 43
/**
 * Extracts a signed 8-bit integer.
 */
43
inline int8_t StreamReader::get_int8(void);

702 9 get_uint8 0 4 821 23 StreamReader::get_uint8 0 1 318 46
/**
 * Extracts an unsigned 8-bit integer.
 */
45
inline uint8_t StreamReader::get_uint8(void);

703 9 get_int16 0 4 821 23 StreamReader::get_int16 0 1 319 44
/**
 * Extracts a signed 16-bit integer.
 */
45
inline int16_t StreamReader::get_int16(void);

704 9 get_int32 0 4 821 23 StreamReader::get_int32 0 1 320 44
/**
 * Extracts a signed 32-bit integer.
 */
45
inline int32_t StreamReader::get_int32(void);

705 9 get_int64 0 4 821 23 StreamReader::get_int64 0 1 321 44
/**
 * Extracts a signed 64-bit integer.
 */
45
inline int64_t StreamReader::get_int64(void);

706 10 get_uint16 0 4 821 24 StreamReader::get_uint16 0 1 322 47
/**
 * Extracts an unsigned 16-bit integer.
 */
47
inline uint16_t StreamReader::get_uint16(void);

707 10 get_uint32 0 4 821 24 StreamReader::get_uint32 0 1 323 47
/**
 * Extracts an unsigned 32-bit integer.
 */
47
inline uint32_t StreamReader::get_uint32(void);

708 10 get_uint64 0 4 821 24 StreamReader::get_uint64 0 1 324 47
/**
 * Extracts an unsigned 64-bit integer.
 */
47
inline uint64_t StreamReader::get_uint64(void);

709 11 get_float32 0 4 821 25 StreamReader::get_float32 0 1 325 186
/**
 * Extracts a 32-bit single-precision floating-point number.  Since this kind
 * of float is not necessarily portable across different architectures,
 * special care is required.
 */
45
inline float StreamReader::get_float32(void);

710 11 get_float64 0 4 821 25 StreamReader::get_float64 0 1 326 51
/**
 * Extracts a 64-bit floating-point number.
 */
50
inline PN_float64 StreamReader::get_float64(void);

711 12 get_be_int16 0 4 821 26 StreamReader::get_be_int16 0 1 327 55
/**
 * Extracts a signed big-endian 16-bit integer.
 */
48
inline int16_t StreamReader::get_be_int16(void);

712 12 get_be_int32 0 4 821 26 StreamReader::get_be_int32 0 1 328 55
/**
 * Extracts a signed big-endian 32-bit integer.
 */
48
inline int32_t StreamReader::get_be_int32(void);

713 12 get_be_int64 0 4 821 26 StreamReader::get_be_int64 0 1 329 55
/**
 * Extracts a signed big-endian 64-bit integer.
 */
48
inline int64_t StreamReader::get_be_int64(void);

714 13 get_be_uint16 0 4 821 27 StreamReader::get_be_uint16 0 1 330 58
/**
 * Extracts an unsigned big-endian 16-bit integer.
 */
50
inline uint16_t StreamReader::get_be_uint16(void);

715 13 get_be_uint32 0 4 821 27 StreamReader::get_be_uint32 0 1 331 58
/**
 * Extracts an unsigned big-endian 32-bit integer.
 */
50
inline uint32_t StreamReader::get_be_uint32(void);

716 13 get_be_uint64 0 4 821 27 StreamReader::get_be_uint64 0 1 332 58
/**
 * Extracts an unsigned big-endian 64-bit integer.
 */
50
inline uint64_t StreamReader::get_be_uint64(void);

717 14 get_be_float32 0 4 821 28 StreamReader::get_be_float32 0 1 333 197
/**
 * Extracts a 32-bit single-precision big-endian floating-point number.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
48
inline float StreamReader::get_be_float32(void);

718 14 get_be_float64 0 4 821 28 StreamReader::get_be_float64 0 1 334 62
/**
 * Extracts a 64-bit big-endian floating-point number.
 */
53
inline PN_float64 StreamReader::get_be_float64(void);

719 10 get_string 0 4 821 24 StreamReader::get_string 0 1 335 45
/**
 * Extracts a variable-length string.
 */
43
std::string StreamReader::get_string(void);

720 12 get_string32 0 4 821 26 StreamReader::get_string32 0 1 336 72
/**
 * Extracts a variable-length string with a 32-bit length field.
 */
45
std::string StreamReader::get_string32(void);

721 12 get_z_string 0 4 821 26 StreamReader::get_z_string 0 1 337 74
/**
 * Extracts a variable-length string, as a NULL-terminated string.
 */
45
std::string StreamReader::get_z_string(void);

722 16 get_fixed_string 0 4 821 30 StreamReader::get_fixed_string 0 1 338 128
/**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */
61
std::string StreamReader::get_fixed_string(std::size_t size);

723 10 skip_bytes 0 4 821 24 StreamReader::skip_bytes 0 1 339 66
/**
 * Skips over the indicated number of bytes in the stream.
 */
48
void StreamReader::skip_bytes(std::size_t size);

724 13 extract_bytes 0 4 821 27 StreamReader::extract_bytes 0 1 340 380
/**
 * Extracts the indicated number of bytes in the stream into the given
 * character buffer.  Assumes that the buffer is big enough to hold the
 * requested number of bytes.  Returns the number of bytes that were
 * successfully written.
 */

/**
 * Extracts the indicated number of bytes in the stream and returns them as a
 * string.  Returns empty string at end-of-file.
 */
136
std::size_t StreamReader::extract_bytes(unsigned char *into, std::size_t size);
PyObject *StreamReader::extract_bytes(std::size_t size);

725 8 readline 0 4 821 22 StreamReader::readline 0 1 341 303
/**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's File.readline() function.
 */
39
PyObject *StreamReader::readline(void);

726 9 readlines 0 4 821 23 StreamReader::readlines 0 1 342 0
40
PyObject *StreamReader::readlines(void);

727 12 StreamWriter 0 4 823 26 StreamWriter::StreamWriter 0 3 343 344 345 159
/**
 *
 */

/**
 *
 */

/**
 * The copy constructor does not copy ownership of the stream.
 */

/**
 * The move constructor steals ownership of the stream.
 */
206
inline explicit StreamWriter::StreamWriter(std::ostream *out, bool owns_stream);
inline StreamWriter::StreamWriter(StreamWriter const &copy);
inline StreamWriter::StreamWriter(StreamWriter &&from) noexcept;

728 10 operator = 0 4 823 24 StreamWriter::operator = 0 2 346 347 0
131
inline void StreamWriter::operator =(StreamWriter const &copy);
inline void StreamWriter::operator =(StreamWriter &&from) noexcept;

729 13 ~StreamWriter 0 4 823 27 StreamWriter::~StreamWriter 0 0 10
/**
 *
 */
41
inline StreamWriter::~StreamWriter(void);

730 11 get_ostream 0 4 823 25 StreamWriter::get_ostream 0 1 348 37
/**
 * Returns the stream in use.
 */
59
inline std::ostream *StreamWriter::get_ostream(void) const;

731 8 add_bool 0 4 823 22 StreamWriter::add_bool 0 1 349 46
/**
 * Adds a boolean value to the stream.
 */
47
inline void StreamWriter::add_bool(bool value);

732 8 add_int8 0 4 823 22 StreamWriter::add_int8 0 1 350 53
/**
 * Adds a signed 8-bit integer to the stream.
 */
49
inline void StreamWriter::add_int8(int8_t value);

733 9 add_uint8 0 4 823 23 StreamWriter::add_uint8 0 1 351 56
/**
 * Adds an unsigned 8-bit integer to the stream.
 */
51
inline void StreamWriter::add_uint8(uint8_t value);

734 9 add_int16 0 4 823 23 StreamWriter::add_int16 0 1 352 104
// The default numeric packing is little-endian.

/**
 * Adds a signed 16-bit integer to the stream.
 */
51
inline void StreamWriter::add_int16(int16_t value);

735 9 add_int32 0 4 823 23 StreamWriter::add_int32 0 1 353 54
/**
 * Adds a signed 32-bit integer to the stream.
 */
51
inline void StreamWriter::add_int32(int32_t value);

736 9 add_int64 0 4 823 23 StreamWriter::add_int64 0 1 354 54
/**
 * Adds a signed 64-bit integer to the stream.
 */
51
inline void StreamWriter::add_int64(int64_t value);

737 10 add_uint16 0 4 823 24 StreamWriter::add_uint16 0 1 355 57
/**
 * Adds an unsigned 16-bit integer to the stream.
 */
53
inline void StreamWriter::add_uint16(uint16_t value);

738 10 add_uint32 0 4 823 24 StreamWriter::add_uint32 0 1 356 57
/**
 * Adds an unsigned 32-bit integer to the stream.
 */
53
inline void StreamWriter::add_uint32(uint32_t value);

739 10 add_uint64 0 4 823 24 StreamWriter::add_uint64 0 1 357 57
/**
 * Adds an unsigned 64-bit integer to the stream.
 */
53
inline void StreamWriter::add_uint64(uint64_t value);

740 11 add_float32 0 4 823 25 StreamWriter::add_float32 0 1 358 196
/**
 * Adds a 32-bit single-precision floating-point number to the stream.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
51
inline void StreamWriter::add_float32(float value);

741 11 add_float64 0 4 823 25 StreamWriter::add_float64 0 1 359 61
/**
 * Adds a 64-bit floating-point number to the stream.
 */
56
inline void StreamWriter::add_float64(PN_float64 value);

742 12 add_be_int16 0 4 823 26 StreamWriter::add_be_int16 0 1 360 140
// These functions pack numbers big-endian, in case that's desired.

/**
 * Adds a signed 16-bit big-endian integer to the streamWriter.
 */
54
inline void StreamWriter::add_be_int16(int16_t value);

743 12 add_be_int32 0 4 823 26 StreamWriter::add_be_int32 0 1 361 71
/**
 * Adds a signed 32-bit big-endian integer to the streamWriter.
 */
54
inline void StreamWriter::add_be_int32(int32_t value);

744 12 add_be_int64 0 4 823 26 StreamWriter::add_be_int64 0 1 362 71
/**
 * Adds a signed 64-bit big-endian integer to the streamWriter.
 */
54
inline void StreamWriter::add_be_int64(int64_t value);

745 13 add_be_uint16 0 4 823 27 StreamWriter::add_be_uint16 0 1 363 74
/**
 * Adds an unsigned 16-bit big-endian integer to the streamWriter.
 */
56
inline void StreamWriter::add_be_uint16(uint16_t value);

746 13 add_be_uint32 0 4 823 27 StreamWriter::add_be_uint32 0 1 364 74
/**
 * Adds an unsigned 32-bit big-endian integer to the streamWriter.
 */
56
inline void StreamWriter::add_be_uint32(uint32_t value);

747 13 add_be_uint64 0 4 823 27 StreamWriter::add_be_uint64 0 1 365 74
/**
 * Adds an unsigned 64-bit big-endian integer to the streamWriter.
 */
56
inline void StreamWriter::add_be_uint64(uint64_t value);

748 14 add_be_float32 0 4 823 28 StreamWriter::add_be_float32 0 1 366 207
/**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * stream.  Since this kind of float is not necessarily portable across
 * different architectures, special care is required.
 */
54
inline void StreamWriter::add_be_float32(float value);

749 14 add_be_float64 0 4 823 28 StreamWriter::add_be_float64 0 1 367 78
/**
 * Adds a 64-bit big-endian floating-point number to the streamWriter.
 */
59
inline void StreamWriter::add_be_float64(PN_float64 value);

750 10 add_string 0 4 823 24 StreamWriter::add_string 0 1 368 107
/**
 * Adds a variable-length string to the stream.  This actually adds a count
 * followed by n bytes.
 */
61
inline void StreamWriter::add_string(std::string const &str);

751 12 add_string32 0 4 823 26 StreamWriter::add_string32 0 1 369 84
/**
 * Adds a variable-length string to the stream, using a 32-bit length field.
 */
63
inline void StreamWriter::add_string32(std::string const &str);

752 12 add_z_string 0 4 823 26 StreamWriter::add_z_string 0 1 370 84
/**
 * Adds a variable-length string to the stream, as a NULL-terminated string.
 */
56
inline void StreamWriter::add_z_string(std::string str);

753 16 add_fixed_string 0 4 823 30 StreamWriter::add_fixed_string 0 1 371 236
/**
 * Adds a fixed-length string to the stream.  If the string given is less than
 * the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */
85
inline void StreamWriter::add_fixed_string(std::string const &str, std::size_t size);

754 9 pad_bytes 0 4 823 23 StreamWriter::pad_bytes 0 1 372 65
/**
 * Adds the indicated number of zero bytes to the stream.
 */
47
void StreamWriter::pad_bytes(std::size_t size);

755 11 append_data 0 4 823 25 StreamWriter::append_data 0 1 373 140
/**
 * Appends some more raw data to the end of the streamWriter.
 */

/**
 * Appends some more raw data to the end of the streamWriter.
 */
47
void StreamWriter::append_data(PyObject *data);

756 5 flush 0 4 823 19 StreamWriter::flush 0 1 374 50
/**
 * Calls flush() on the underlying stream.
 */
38
inline void StreamWriter::flush(void);

757 5 write 0 4 823 19 StreamWriter::write 0 1 375 132
/**
 * A synonym of append_data().  This is useful when assigning the StreamWriter
 * to sys.stderr and/or sys.stdout in Python.
 */
56
inline void StreamWriter::write(std::string const &str);

758 13 get_softspace 0 20 823 27 StreamWriter::get_softspace 0 0 39
getter for int StreamWriter::softspace;
44
int StreamWriter::get_softspace(void) const;

759 13 set_softspace 0 36 823 27 StreamWriter::set_softspace 0 0 39
setter for int StreamWriter::softspace;
44
void StreamWriter::set_softspace(int value);

760 7 acquire 0 4 825 26 StreamWrapperBase::acquire 0 1 376 572
/**
 * Acquires the internal lock.
 *
 * User code should call this to take temporary possession of the stream and
 * perform direct I/O operations on it, for instance to make several
 * sequential atomic reads.  You may not call any of the StreamWrapper methods
 * while the lock is held, other than release().
 *
 * Use with extreme caution!  This is a very low-level, non-recursive lock.
 * You must call acquire() only once, and you must later call release()
 * exactly once.  Failing to do so may result in a hard deadlock with no
 * available debugging features.
 */
45
inline void StreamWrapperBase::acquire(void);

761 7 release 0 4 825 26 StreamWrapperBase::release 0 1 377 135
/**
 * Releases the internal lock.  Must be called exactly once following a call
 * to acquire().  See the cautions with acquire().
 */
45
inline void StreamWrapperBase::release(void);

762 18 ~StreamWrapperBase 0 4 825 37 StreamWrapperBase::~StreamWrapperBase 0 0 0
44
StreamWrapperBase::~StreamWrapperBase(void);

763 27 upcast_to_StreamWrapperBase 0 12 826 43 IStreamWrapper::upcast_to_StreamWrapperBase 0 1 380 47
upcast from IStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *IStreamWrapper::upcast_to_StreamWrapperBase(void);

764 14 IStreamWrapper 0 4 826 30 IStreamWrapper::IStreamWrapper 0 1 378 22
/**
 *
 */

/**
 *
 */
69
inline explicit IStreamWrapper::IStreamWrapper(std::istream &stream);

765 15 ~IStreamWrapper 0 4 826 31 IStreamWrapper::~IStreamWrapper 0 0 10
/**
 *
 */
38
IStreamWrapper::~IStreamWrapper(void);

766 11 get_istream 0 4 826 27 IStreamWrapper::get_istream 0 1 379 55
/**
 * Returns the istream this object is wrapping.
 */
61
inline std::istream *IStreamWrapper::get_istream(void) const;

767 27 upcast_to_StreamWrapperBase 0 12 827 43 OStreamWrapper::upcast_to_StreamWrapperBase 0 1 383 47
upcast from OStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *OStreamWrapper::upcast_to_StreamWrapperBase(void);

768 14 OStreamWrapper 0 4 827 30 OStreamWrapper::OStreamWrapper 0 1 381 22
/**
 *
 */

/**
 *
 */
69
inline explicit OStreamWrapper::OStreamWrapper(std::ostream &stream);

769 15 ~OStreamWrapper 0 4 827 31 OStreamWrapper::~OStreamWrapper 0 0 10
/**
 *
 */
38
OStreamWrapper::~OStreamWrapper(void);

770 11 get_ostream 0 4 827 27 OStreamWrapper::get_ostream 0 1 382 55
/**
 * Returns the ostream this object is wrapping.
 */
61
inline std::ostream *OStreamWrapper::get_ostream(void) const;

771 24 upcast_to_IStreamWrapper 0 12 828 39 StreamWrapper::upcast_to_IStreamWrapper 0 1 386 43
upcast from StreamWrapper to IStreamWrapper
62
IStreamWrapper *StreamWrapper::upcast_to_IStreamWrapper(void);

772 25 downcast_to_StreamWrapper 0 12 826 41 IStreamWrapper::downcast_to_StreamWrapper 0 0 45
downcast from IStreamWrapper to StreamWrapper
63
StreamWrapper *IStreamWrapper::downcast_to_StreamWrapper(void);

773 24 upcast_to_OStreamWrapper 0 12 828 39 StreamWrapper::upcast_to_OStreamWrapper 0 1 387 43
upcast from StreamWrapper to OStreamWrapper
62
OStreamWrapper *StreamWrapper::upcast_to_OStreamWrapper(void);

774 25 downcast_to_StreamWrapper 0 12 827 41 OStreamWrapper::downcast_to_StreamWrapper 0 0 45
downcast from OStreamWrapper to StreamWrapper
63
StreamWrapper *OStreamWrapper::downcast_to_StreamWrapper(void);

775 13 StreamWrapper 0 4 828 28 StreamWrapper::StreamWrapper 0 1 384 22
/**
 *
 */

/**
 *
 */
68
inline explicit StreamWrapper::StreamWrapper(std::iostream &stream);

776 14 ~StreamWrapper 0 4 828 29 StreamWrapper::~StreamWrapper 0 0 10
/**
 *
 */
36
StreamWrapper::~StreamWrapper(void);

777 12 get_iostream 0 4 828 27 StreamWrapper::get_iostream 0 1 385 56
/**
 * Returns the iostream this object is wrapping.
 */
62
inline std::iostream *StreamWrapper::get_iostream(void) const;

387
1 0 0 7 4 831 389 0 0 0 
2 0 0 7 4 831 389 0 0 1 6 param0 0 832  
3 0 0 6 7 789 0 0 136 /**
 * Returns a pointer to the global "default page".  This is the ConfigPage
 * that lists all variables' original default values.
 */ 0 
4 0 0 6 8 789 0 0 191 /**
 * Returns a pointer to the global "local page".  This is the ConfigPage that
 * lists the locally-assigned values for any variables in the world that have
 * such a local assignment.
 */ 0 
5 0 0 6 9 836 0 0 115 /**
 * Returns the name of the page.  If the page was loaded from a .prc file,
 * this is usually the filename.
 */ 1 4 this 3 834  
6 0 0 6 14 785 0 0 248 /**
 * Returns true if this is the special "default" or "local" page, or false if
 * it is an ordinary page, e.g.  an implicit page loaded from a prc file at
 * startup, or an explicit page created by
 * ConfigPageManager::make_explicit_page().
 */ 1 4 this 3 834  
7 0 0 6 15 785 0 0 180 /**
 * Returns true if the page was loaded by implicitly searching the config path
 * on startup, or false if it was explicitly loaded by dynamic code after
 * initial startup.
 */ 1 4 this 3 834  
8 0 0 4 19 837 0 0 363 /**
 * Changes the explicit sort order of this particular ConfigPage.  Lower-
 * numbered pages supercede higher-numbered pages.  Initially, all explicitly-
 * loaded pages have sort value 0, and implicitly-loaded pages (found on disk)
 * have sort value 10; you may set an individual page higher or lower to
 * influence its priority relative to other pages.
 */ 2 4 this 3 789  4 sort 1 786  
9 0 0 6 20 786 0 0 93 /**
 * Returns the explicit sort order of this particular ConfigPage.  See
 * set_sort().
 */ 1 4 this 3 834  
10 0 0 6 23 786 0 0 413 /**
 * Returns the sequence number of the page.
 *
 * Sequence numbers for a particular class (implicit vs.  explicit) of pages
 * are assigned as each page is loaded; each page is given a higher sequence
 * number than all the pages loaded before it.
 *
 * The implicit_load pages, which are discovered in the file system
 * automatically, have a different set of sequence numbers than the explicit
 * pages.
 */ 1 4 this 3 834  
11 0 0 6 24 786 0 0 302 /**
 * Returns the trust level associated with this page.  An untrusted page is
 * trust level 0; if the page was loaded from a signed .prc file, its trust
 * level is the index number of the certificate that signed it.  Generally, a
 * higher trust level value represents a greater level of trust.
 */ 1 4 this 3 834  
12 0 0 4 25 837 0 0 195 /**
 * Explicitly sets the trust level on this particular page.  Note that any
 * subsequent changes to the page, or to any variable declarations on it, will
 * reset the trust level to zero.
 */ 2 4 this 3 789  11 trust_level 1 786  
13 0 0 6 26 836 0 0 153 /**
 * Returns the raw binary signature that was found in the prc file, if any.
 * This method is probably not terribly useful for most applications.
 */ 1 4 this 3 834  
14 0 0 4 30 837 0 0 57 /**
 * Removes all of the declarations from the page.
 */ 1 4 this 3 789  
15 0 0 6 31 785 0 0 392 /**
 * Reads the contents of a complete prc file, as returned by the indicated
 * istream, into the current page file.  Returns true on success, or false on
 * some I/O error.
 *
 * This is a low-level interface.  Normally you do not need to call it
 * directly.  See the global functions load_prc_file() and unload_prc_file(),
 * defined in panda/src/putil, for a higher-level interface.
 */ 2 4 this 3 789  2 in 1 822  
16 0 0 6 32 785 0 0 155 /**
 * Automatically decrypts and reads the stream, given the indicated password.
 * Note that if the password is incorrect, the result may be garbage.
 */ 3 4 this 3 789  2 in 1 822  8 password 1 836  
17 0 0 6 33 787 0 0 83 /**
 * Adds the indicated variable/value pair as a new declaration on the page.
 */ 3 4 this 3 789  8 variable 1 790  5 value 1 836  
18 0 0 6 33 787 0 0 83 /**
 * Adds the indicated variable/value pair as a new declaration on the page.
 */ 3 4 this 3 789  8 variable 1 836  5 value 1 836  
19 0 0 6 34 785 0 0 171 /**
 * Removes the indicated declaration from the page and deletes it.  Returns
 * true if the declaration is successfully removed, false if it was not on the
 * page.
 */ 2 4 this 3 789  4 decl 1 787  
20 0 0 6 35 838 0 0 58 /**
 * Returns the number of declarations on the page.
 */ 1 4 this 3 834  
21 0 0 6 36 792 0 0 51 /**
 * Returns the nth declaration on the page.
 */ 2 4 this 3 834  1 n 1 838  
22 0 0 6 37 787 0 0 180 /**
 * Returns a modifiable pointer to the nth declaration on the page.  Any
 * modifications will appear in the output, if the page is written out with
 * ConfigPage::write().
 */ 2 4 this 3 789  1 n 1 838  
23 0 0 6 38 836 0 0 73 /**
 * Returns the variable named by the nth declaration on the page.
 */ 2 4 this 3 834  1 n 1 838  
24 0 0 6 39 836 0 0 73 /**
 * Returns the value assigned by the nth declaration on the page.
 */ 2 4 this 3 834  1 n 1 838  
25 0 0 6 40 785 0 0 105 /**
 * Returns true if the nth active variable on the page has been used by code,
 * false otherwise.
 */ 2 4 this 3 834  1 n 1 838  
26 0 0 4 124 837 0 0 10 /**
 *
 */ 2 4 this 3 834  3 out 1 824  
27 0 0 4 125 837 0 0 61 /**
 * Outputs the first few hex digits of the signature.
 */ 2 4 this 3 834  3 out 1 824  
28 0 0 4 126 837 0 0 10 /**
 *
 */ 2 4 this 3 834  3 out 1 824  
29 0 0 6 44 789 0 0 67 /**
 * Returns the page on which this declaration can be found.
 */ 1 4 this 3 792  
30 0 0 6 45 790 0 0 148 /**
 * Returns the variable that this declaration names.  This variable may or may
 * not have been defined by the time the declaration is read.
 */ 1 4 this 3 792  
31 0 0 6 101 836 0 0 186 /**
 * Returns the value assigned to this variable.  This is the original one-line
 * text defined for the variable in the .prc file (or passed to
 * ConfigPage::make_declaration()).
 */ 1 4 this 3 792  
32 0 0 4 102 837 0 0 55 /**
 * Changes the value assigned to this variable.
 */ 2 4 this 3 787  5 value 1 836  
33 0 0 6 103 838 0 0 156 /**
 * Returns the number of words in the declaration's value.  A word is defined
 * as a sequence of non-whitespace characters delimited by whitespace.
 */ 1 4 this 3 792  
34 0 0 6 104 785 0 0 184 /**
 * Returns true if the declaration's value has a valid string value for the
 * nth word.  This is really the same thing as asking if there are at least n
 * words in the value.
 */ 2 4 this 3 792  1 n 1 838  
35 0 0 6 105 785 0 0 97 /**
 * Returns true if the declaration's value has a valid boolean value for the
 * nth word.
 */ 2 4 this 3 792  1 n 1 838  
36 0 0 6 106 785 0 0 97 /**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */ 2 4 this 3 792  1 n 1 838  
37 0 0 6 107 785 0 0 95 /**
 * Returns true if the declaration's value has a valid int64 value for the nth
 * word.
 */ 2 4 this 3 792  1 n 1 838  
38 0 0 6 108 785 0 0 97 /**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */ 2 4 this 3 792  1 n 1 838  
39 0 0 6 109 836 0 0 153 /**
 * Returns the string value of the nth word of the declaration's value, or
 * empty string if there is no nth value.  See also has_string_word().
 */ 2 4 this 3 792  1 n 1 838  
40 0 0 6 110 785 0 0 145 /**
 * Returns the boolean value of the nth word of the declaration's value, or
 * false if there is no nth value.  See also has_bool_word().
 */ 2 4 this 3 792  1 n 1 838  
41 0 0 6 111 786 0 0 140 /**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_int_word().
 */ 2 4 this 3 792  1 n 1 838  
42 0 0 6 112 807 0 0 140 /**
 * Returns the int64 value of the nth word of the declaration's value, or 0 if
 * there is no nth value.  See also has_int64_word().
 */ 2 4 this 3 792  1 n 1 838  
43 0 0 6 113 802 0 0 143 /**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_double_word().
 */ 2 4 this 3 792  1 n 1 838  
44 0 0 4 114 837 0 0 92 /**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */ 3 4 this 3 787  1 n 1 838  5 value 1 836  
45 0 0 4 115 837 0 0 92 /**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */ 3 4 this 3 787  1 n 1 838  5 value 1 785  
46 0 0 4 116 837 0 0 92 /**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */ 3 4 this 3 787  1 n 1 838  5 value 1 786  
47 0 0 4 117 837 0 0 92 /**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */ 3 4 this 3 787  1 n 1 838  5 value 1 807  
48 0 0 4 118 837 0 0 92 /**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */ 3 4 this 3 787  1 n 1 838  5 value 1 802  
49 0 0 7 119 840 0 0 100 /**
 * Interprets the string value as a filename and returns it, with any
 * variables expanded.
 */ 1 4 this 3 792  
50 0 0 6 120 786 0 0 254 /**
 * Returns the sequence number of the declaration within the page.  Sequence
 * numbers are assigned as each declaration is created; each declaration is
 * given a higher sequence number than all the declarations created in the
 * page before it.
 */ 1 4 this 3 792  
51 0 0 4 121 837 0 0 10 /**
 *
 */ 2 4 this 3 792  3 out 1 824  
52 0 0 4 122 837 0 0 10 /**
 *
 */ 2 4 this 3 792  3 out 1 824  
53 0 0 6 51 836 0 0 44 /**
 * Returns the name of the variable.
 */ 1 4 this 3 841  
54 0 0 6 52 785 0 0 118 /**
 * Returns true if the variable has been referenced by a ConfigVariable
 * somewhere in code, false otherwise.
 */ 1 4 this 3 841  
55 0 0 6 53 779 0 0 125 /**
 * Returns the stated type of this variable.  If the variable has not yet been
 * defined, this will be VT_undefined.
 */ 1 4 this 3 841  
56 0 0 6 54 836 0 0 82 /**
 * Returns the brief description of this variable, if it has been defined.
 */ 1 4 this 3 841  
57 0 0 6 55 786 0 0 250 /**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */ 1 4 this 3 841  
58 0 0 6 56 785 0 0 413 /**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 841  
59 0 0 6 57 786 0 0 479 /**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 841  
60 0 0 6 58 785 0 0 232 /**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */ 1 4 this 3 841  
61 0 0 6 59 792 0 0 137 /**
 * Returns the default variable specified for this variable.  If the variable
 * has not yet been defined, this will return NULL.
 */ 1 4 this 3 841  
62 0 0 4 60 837 0 0 212 /**
 * Specifies the type of this variable.  See get_value_type().  It is not an
 * error to call this multiple times, but if the value changes once
 * get_declaration() has been called, a warning is printed.
 */ 2 4 this 3 790  10 value_type 1 779  
63 0 0 4 61 837 0 0 214 /**
 * Specifies the trust level of this variable.  See get_flags().  It is not an
 * error to call this multiple times, but if the value changes once
 * get_declaration() has been called, a warning is printed.
 */ 2 4 this 3 790  5 flags 1 786  
64 0 0 4 62 837 0 0 232 /**
 * Specifies the one-line description of this variable.  See
 * get_description().  It is not an error to call this multiple times, but if
 * the value changes once get_declaration() has been called, a warning is
 * printed.
 */ 2 4 this 3 790  11 description 1 836  
65 0 0 4 63 837 0 0 97 /**
 * Specifies the default value for this variable if it is not defined in any
 * prc file.
 */ 2 4 this 3 790  13 default_value 1 836  
66 0 0 4 64 837 0 0 75 /**
 * Marks that the variable has been "declared" by a ConfigVariable.
 */ 1 4 this 3 790  
67 0 0 6 65 787 0 0 324 /**
 * Creates a new local value for this variable, if there is not already one
 * specified.  This will shadow any values defined in the various .prc files.
 *
 * If there is already a local value defined for this variable, simply returns
 * that one.
 *
 * Use clear_local_value() to remove the local value definition.
 */ 1 4 this 3 790  
68 0 0 6 66 785 0 0 240 /**
 * Removes the local value defined for this variable, and allows its value to
 * be once again retrieved from the .prc files.
 *
 * Returns true if the value was successfully removed, false if it did not
 * exist in the first place.
 */ 1 4 this 3 790  
69 0 0 6 67 785 0 0 148 /**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */ 1 4 this 3 841  
70 0 0 6 68 785 0 0 149 /**
 * Returns true if this variable has an explicit value, either from a prc file
 * or locally set, or false if variable has its default value.
 */ 1 4 this 3 841  
71 0 0 6 69 838 0 0 194 /**
 * Returns the number of declarations that contribute to this variable's
 * value.  If the variable has been defined, this will always be at least 1
 * (for the default value, at least).
 */ 1 4 this 3 841  
72 0 0 6 70 792 0 0 285 /**
 * Returns the nth declarations that contributes to this variable's value.
 * The declarations are arranged in order such that earlier declarations
 * shadow later declarations; thus, get_declaration(0) is always defined and
 * always returns the current value of the variable.
 */ 2 4 this 3 841  1 n 1 838  
73 0 0 6 72 838 0 0 157 /**
 * Returns the number of prc files that reference this variable.  This is not
 * exactly the same as the number of declarations; see get_reference().
 */ 1 4 this 3 841  
74 0 0 6 73 792 0 0 335 /**
 * Returns the nth declaration in a prc file that references this variable.
 * This is similar, but not identical to, get_declaration().  The difference
 * is that this will list *only* true references in a prc file, and will not
 * list default values or locally-assigned values; it also will list even the
 * untrusted files.
 */ 2 4 this 3 841  1 n 1 838  
75 0 0 6 75 838 0 0 115 /**
 * Returns the number of trusted prc files that reference this variable.  See
 * also get_num_references().
 */ 1 4 this 3 841  
76 0 0 6 76 792 0 0 428 /**
 * Returns the nth declaration in a trusted prc file that references this
 * variable.  This is similar, but not identical to, get_declaration().  The
 * difference is that this will list *only* true references in a prc file, and
 * will not list default values or locally-assigned values.
 *
 * This is also similar to get_reference(), except that it only lists the
 * trusted declarations, omitting the untrusted ones.
 */ 2 4 this 3 841  1 n 1 838  
77 0 0 6 78 838 0 0 107 /**
 * Returns the number of trusted, unique (by string value) values there exist
 * for this variable.
 */ 1 4 this 3 841  
78 0 0 6 79 792 0 0 157 /**
 * Returns the nth trusted, unique value for this variable.  This is similar
 * to get_trusted_reference(), except that duplicate values are removed.
 */ 2 4 this 3 841  1 n 1 838  
79 0 0 4 85 837 0 0 10 /**
 *
 */ 2 4 this 3 841  3 out 1 824  
80 0 0 4 86 837 0 0 10 /**
 *
 */ 2 4 this 3 841  3 out 1 824  
81 0 0 7 129 843 473 0 10 /**
 *
 */ 0 
82 0 0 7 129 843 473 0 0 1 6 param0 0 844  
83 0 0 4 131 837 0 0 250 /**
 * Changes the ostream that all subsequent Notify messages will be written to.
 * If the previous ostream was set with delete_later = true, this will delete
 * the previous ostream.  If ostream_ptr is NULL, this resets the default to
 * cerr.
 */ 3 4 this 3 843  11 ostream_ptr 1 824  12 delete_later 1 785  
84 0 0 6 132 824 0 0 67 /**
 * Returns the system-wide ostream for all Notify messages.
 */ 1 4 this 3 844  
85 0 0 4 134 837 0 0 110 /**
 * Removes the installed assert handler and restores default behavior of
 * nassertr() and nassertv().
 */ 1 4 this 3 843  
86 0 0 6 135 785 0 0 85 /**
 * Returns true if a user assert handler has been installed, false otherwise.
 */ 1 4 this 3 844  
87 0 0 4 136 837 0 0 110 /**
 * Returns a pointer to the user-installed assert handler, if one was
 * installed, or NULL otherwise.
 */ 1 4 this 3 844  
88 0 0 6 137 785 0 0 637 /**
 * Returns true if an assertion test has failed (and not been ignored) since
 * the last call to clear_assert_failed().
 *
 * When an assertion test fails, the assert handler may decide either to
 * abort, return, or ignore the assertion.  Naturally, if it decides to abort,
 * this flag is irrelevant.  If it chooses to ignore the assertion, the flag
 * is not set.  However, if the assert handler chooses to return out of the
 * function (the normal case), it will also set this flag to indicate that an
 * assertion failure has occurred.
 *
 * This will also be the behavior in the absence of a user-defined assert
 * handler.
 */ 1 4 this 3 844  
89 0 0 6 138 836 0 0 100 /**
 * Returns the error message that corresponds to the assertion that most
 * recently failed.
 */ 1 4 this 3 844  
90 0 0 4 139 837 0 0 114 /**
 * Resets the assert_failed flag that is set whenever an assertion test fails.
 * See has_assert_failed().
 */ 1 4 this 3 843  
91 0 0 6 140 816 0 0 129 /**
 * Returns the topmost Category in the hierarchy.  This may be used to
 * traverse the hierarchy of available Categories.
 */ 1 4 this 3 843  
92 0 0 6 141 816 0 0 325 /**
 * Finds or creates a new Category given the fullname of the Category.  This
 * name should be a sequence of colon-separated names of parent Categories,
 * ending in the basename of this Category, e.g.  display:glxdisplay.  This is
 * a shorthand way to define a Category when a pointer to its parent is not
 * handy.
 */ 2 4 this 3 843  8 fullname 1 836  
93 0 0 6 141 816 0 0 199 /**
 * Finds or creates a new Category given the basename of the category and its
 * parent in the category hierarchy.  The parent pointer may be NULL to
 * indicate this is a top-level Category.
 */ 3 4 this 3 843  8 basename 1 836  15 parent_category 1 816  
94 0 0 6 141 816 0 0 316 /**
 * Finds or creates a new Category given the basename of the category and the
 * fullname of its parent.  This is another way to create a category when you
 * don't have a pointer to its parent handy, but you know the name of its
 * parent.  If the parent Category does not already exist, it will be created.
 */ 3 4 this 3 843  8 basename 1 836  15 parent_fullname 1 836  
95 0 0 6 142 824 0 0 189 /**
 * A convenient way to get the ostream that should be written to for a Notify-
 * type message.  Also see Category::out() for a message that is specific to a
 * particular Category.
 */ 0 
96 0 0 6 143 824 0 0 159 /**
 * A convenient way to get an ostream that doesn't do anything.  Returned by
 * Category::out() when a particular Category and/or Severity is disabled.
 */ 0 
97 0 0 4 144 837 0 0 209 /**
 * A convenient way for scripting languages, which may know nothing about
 * ostreams, to write to Notify.  This writes a single string, followed by an
 * implicit newline, to the Notify output stream.
 */ 1 3 str 1 836  
98 0 0 6 145 843 0 0 104 /**
 * Returns the pointer to the global Notify object.  There is only one of
 * these in the world.
 */ 0 
99 0 0 6 147 785 0 0 155 /**
 * Returns true if the implicit *.prc files have already been loaded, false
 * otherwise.  Normally this will only be false briefly before startup.
 */ 1 4 this 3 846  
100 0 0 4 148 837 0 0 250 /**
 * Searches the PRC_DIR and/or PRC_PATH directories for *.prc files and loads
 * them in as pages.  This is normally called automatically at startup time,
 * when the first variable's value is referenced.  See also
 * reload_implicit_pages().
 */ 1 4 this 3 848  
101 0 0 4 149 837 0 0 211 /**
 * Searches the PRC_DIR and/or PRC_PATH directories for *.prc files and loads
 * them in as pages.
 *
 * This may be called after startup, to force the system to re-read all of the
 * implicit prc files.
 */ 1 4 this 3 848  
102 0 0 6 150 849 0 0 274 /**
 * Returns the search path used to locate implicit .prc files.  This is
 * determined by the PRC_DIR and PRC_PATH environment variables.  The object
 * returned by this method may be modified to change the path at runtime, and
 * then reload_implicit_pages() called.
 */ 1 4 this 3 848  
103 0 0 6 151 838 0 0 270 /**
 * Returns the number of patterns, like "*.prc", that are compiled in that
 * will be searched for as default config filenames.  Normally there is only
 * one pattern, and it is "*.prc", but others may be specified with the
 * PRC_FILENAME variable in Config.pp.
 */ 1 4 this 3 846  
104 0 0 6 152 836 0 0 131 /**
 * Returns the nth filename pattern that will be considered a match as a valid
 * config file.  See get_num_prc_patterns().
 */ 2 4 this 3 846  1 n 1 838  
105 0 0 6 153 838 0 0 170 /**
 * Returns the number of patterns, like "*.pre", that are compiled in that
 * will be searched for as special config files that are understood to be
 * encrypted.
 */ 1 4 this 3 846  
106 0 0 6 154 836 0 0 151 /**
 * Returns the nth filename pattern that will be considered a match as a valid
 * encrypted config file.  See get_num_prc_encrypted_patterns().
 */ 2 4 this 3 846  1 n 1 838  
107 0 0 6 155 838 0 0 232 /**
 * Returns the number of patterns, like "*.exe", that are compiled in that
 * will be searched for as special config files that are to be executed as a
 * program, and their output taken to be input.  This is normally empty.
 */ 1 4 this 3 846  
108 0 0 6 156 836 0 0 159 /**
 * Returns the nth filename pattern that will be considered a match as a valid
 * executable-style config file.  See get_num_prc_executable_patterns().
 */ 2 4 this 3 846  1 n 1 838  
109 0 0 6 157 789 0 0 206 /**
 * Creates and returns a new, empty ConfigPage.  This page will be stacked on
 * top of any pages that were created before; it may shadow variable
 * declarations that are defined in previous pages.
 */ 2 4 this 3 848  4 name 1 836  
110 0 0 6 158 785 0 0 318 /**
 * Removes a previously-constructed ConfigPage from the set of active pages,
 * and deletes it.  The ConfigPage object is no longer valid after this call.
 * Returns true if the page is successfully deleted, or false if it was
 * unknown (which should never happen if the page was legitimately
 * constructed).
 */ 2 4 this 3 848  4 page 1 789  
111 0 0 6 159 838 0 0 174 /**
 * Returns the current number of implicitly-loaded ConfigPages in the world.
 * These represent files that were automatically discovered on the disk as
 * .prc files.
 */ 1 4 this 3 846  
112 0 0 6 160 789 0 0 94 /**
 * Returns the nth implicit ConfigPage in the world.  See
 * get_num_implicit_pages().
 */ 2 4 this 3 846  1 n 1 838  
113 0 0 6 161 838 0 0 214 /**
 * Returns the current number of explicitly-loaded ConfigPages in the world.
 * These represent pages that were loaded dynamically at runtime by explicit
 * calls to ConfigPageManager::make_explicit_page().
 */ 1 4 this 3 846  
114 0 0 6 162 789 0 0 94 /**
 * Returns the nth explicit ConfigPage in the world.  See
 * get_num_explicit_pages().
 */ 2 4 this 3 846  1 n 1 838  
115 0 0 4 163 837 0 0 10 /**
 *
 */ 2 4 this 3 846  3 out 1 824  
116 0 0 4 164 837 0 0 10 /**
 *
 */ 2 4 this 3 846  3 out 1 824  
117 0 0 6 165 848 0 0 10 /**
 *
 */ 0 
118 0 0 6 167 790 0 0 181 /**
 * Creates and returns a new, undefined ConfigVariableCore with the indicated
 * name; or if a variable with this name has already been created, returns
 * that one instead.
 */ 2 4 this 3 850  4 name 1 836  
119 0 0 6 168 790 0 0 900 /**
 * Defines a variable "template" to match against dynamically-defined
 * variables that may or may not be created in the future.
 *
 * The template consists of a glob pattern, e.g.  "notify-level-*", which will
 * be tested against any config variable passed to a future call to
 * make_variable().  If the pattern matches, the returned ConfigVariableCore
 * is copied to define the new variable, instead of creating a default, empty
 * one.
 *
 * This is useful to pre-specify default values for a family of variables that
 * all have similar properties, and all may not be created at the same time.
 * It is especially useful to avoid cluttering up the list of available
 * variables with user-declared variables that have not been defined yet by
 * the application (e.g.  "egg-object-type-*").
 *
 * This method basically pre-defines all variables that match the specified
 * glob pattern.
 */ 6 4 this 3 850  7 pattern 1 836  4 type 1 779  13 default_value 1 836  11 description 1 836  5 flags 1 786  
120 0 0 6 169 838 0 0 81 /**
 * Returns the current number of active ConfigVariableCores in the world.
 */ 1 4 this 3 851  
121 0 0 6 170 790 0 0 66 /**
 * Returns the nth active ConfigVariableCore in the world.
 */ 2 4 this 3 851  1 n 1 838  
122 0 0 6 172 836 0 0 73 /**
 * Returns the name of the nth active ConfigVariable in the list.
 */ 2 4 this 3 851  1 n 1 838  
123 0 0 6 173 785 0 0 111 /**
 * Returns true if the nth active ConfigVariable in the list has been used by
 * code, false otherwise.
 */ 2 4 this 3 851  1 n 1 838  
124 0 0 4 176 837 0 0 10 /**
 *
 */ 2 4 this 3 851  3 out 1 824  
125 0 0 4 177 837 0 0 10 /**
 *
 */ 2 4 this 3 851  3 out 1 824  
126 0 0 4 178 837 0 0 343 /**
 * Writes all of the prc-set config variables, as they appear in a prc file
 * somewhere, one per line, very concisely.  This lists the dominant value in
 * the prc file; it does not list shadowed values, and it does not list
 * locally-set values.
 *
 * This is mainly intended for generating a hash of the input config file
 * state.
 */ 2 4 this 3 851  3 out 1 824  
127 0 0 4 179 837 0 0 133 /**
 * Writes a list of all the variables that have been defined in a prc file
 * without having been declared somewhere in code.
 */ 1 4 this 3 851  
128 0 0 4 180 837 0 0 123 /**
 * Writes a list of all the variables that have been declared somewhere in
 * code, along with a brief description.
 */ 1 4 this 3 851  
129 0 0 4 181 837 0 0 241 /**
 * Writes a list of all the "dynamic" variables that have been declared
 * somewhere in code, along with a brief description.  This is a (usually
 * large) list of config variables that are declared with a generated variable
 * name.
 */ 1 4 this 3 851  
130 0 0 6 182 850 0 0 10 /**
 *
 */ 0 
131 0 0 6 184 836 0 0 44 /**
 * Returns the name of the variable.
 */ 1 4 this 3 853  
132 0 0 6 185 779 0 0 132 /**
 * Returns the stated type of this variable.  This should be VT_list, unless a
 * later variable declaration has changed it.
 */ 1 4 this 3 853  
133 0 0 6 186 836 0 0 82 /**
 * Returns the brief description of this variable, if it has been defined.
 */ 1 4 this 3 853  
134 0 0 6 187 786 0 0 250 /**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */ 1 4 this 3 853  
135 0 0 6 188 785 0 0 413 /**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 853  
136 0 0 6 189 786 0 0 479 /**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 853  
137 0 0 6 190 785 0 0 232 /**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */ 1 4 this 3 853  
138 0 0 6 197 785 0 0 240 /**
 * Removes the local value defined for this variable, and allows its value to
 * be once again retrieved from the .prc files.
 *
 * Returns true if the value was successfully removed, false if it did not
 * exist in the first place.
 */ 1 4 this 3 855  
139 0 0 6 198 785 0 0 148 /**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */ 1 4 this 3 853  
140 0 0 6 199 785 0 0 149 /**
 * Returns true if this variable has an explicit value, either from a prc file
 * or locally set, or false if variable has its default value.
 */ 1 4 this 3 853  
141 0 0 4 200 837 0 0 10 /**
 *
 */ 2 4 this 3 853  3 out 1 824  
142 0 0 4 201 837 0 0 10 /**
 *
 */ 2 4 this 3 853  3 out 1 824  
143 0 0 7 203 858 535 0 0 1 6 param0 0 856  
144 0 0 7 203 858 535 0 230 /**
 * Use this constructor to make a ConfigVariable of an unspecified type.
 * Usually you'd want to do this just to reference a previously-defined
 * ConfigVariable of a specific type, without having to know what type it is.
 */ 1 4 name 1 836  
145 0 0 6 205 836 0 0 77 /**
 * Returns the toplevel value of the variable, formatted as a string.
 */ 1 4 this 3 856  
146 0 0 4 206 837 0 0 177 /**
 * Changes the value assigned to this variable.  This creates a local value
 * that shadows any values defined in the .prc files, until
 * clear_local_value() is called.
 */ 2 4 this 3 858  5 value 1 836  
147 0 0 4 207 837 0 0 129 /**
 * Removes the value assigned to this variable, and lets its original value
 * (as read from the prc files) show through.
 */ 1 4 this 3 858  
148 0 0 6 208 838 0 0 153 /**
 * Returns the number of words in the variable's value.  A word is defined as
 * a sequence of non-whitespace characters delimited by whitespace.
 */ 1 4 this 3 856  
149 0 0 7 210 861 550 0 0 1 6 param0 0 859  
150 0 0 7 210 861 550 0 10 /**
 *
 */ 1 4 name 1 836  
151 0 0 7 210 861 550 0 10 /**
 *
 */ 4 4 name 1 836  13 default_value 1 785  11 description 1 836  5 flags 1 786  
152 0 0 7 210 861 550 0 10 /**
 *
 */ 4 4 name 1 836  13 default_value 1 836  11 description 1 836  5 flags 1 786  
153 0 0 6 211 861 0 0 0 2 4 this 3 861  5 value 1 785  
154 0 0 6 213 838 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 859  
155 0 0 6 214 785 0 0 0 2 4 this 3 859  1 n 1 838  
156 0 0 4 215 837 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 861  5 value 1 785  
157 0 0 6 216 785 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 859  
158 0 0 6 217 785 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 859  
159 0 0 6 220 785 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 859  1 n 1 838  
160 0 0 4 221 837 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 861  1 n 1 838  5 value 1 785  
161 0 0 6 212 785 0 0 0 1 4 this 3 859  
162 0 0 7 224 864 561 0 0 1 6 param0 0 862  
163 0 0 7 224 864 561 0 10 /**
 *
 */ 1 4 name 1 836  
164 0 0 7 224 864 561 0 10 /**
 *
 */ 4 4 name 1 836  13 default_value 1 802  11 description 1 836  5 flags 1 786  
165 0 0 7 224 864 561 0 10 /**
 *
 */ 4 4 name 1 836  13 default_value 1 836  11 description 1 836  5 flags 1 786  
166 0 0 6 225 864 0 0 0 2 4 this 3 864  5 value 1 802  
167 0 0 6 227 838 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 862  
168 0 0 6 228 802 0 0 0 2 4 this 3 862  1 n 1 838  
169 0 0 4 229 837 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 864  5 value 1 802  
170 0 0 6 230 802 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 862  
171 0 0 6 231 802 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 862  
172 0 0 6 235 802 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 862  1 n 1 838  
173 0 0 4 236 837 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 864  1 n 1 838  5 value 1 802  
174 0 0 6 226 802 0 0 0 1 4 this 3 862  
175 0 0 7 239 867 583 0 0 1 6 param0 0 865  
176 0 0 7 239 867 583 0 10 /**
 *
 */ 1 4 name 1 836  
177 0 0 7 239 867 583 0 10 /**
 *
 */ 4 4 name 1 836  13 default_value 1 868  11 description 1 836  5 flags 1 786  
178 0 0 6 240 867 0 0 0 2 4 this 3 867  5 value 1 868  
179 0 0 6 242 836 0 0 76 // These methods help the ConfigVariableFilename act like a Filename object. 1 4 this 3 865  
180 0 0 6 243 785 0 0 10 /**
 *
 */ 1 4 this 3 865  
181 0 0 6 244 838 0 0 10 /**
 *
 */ 1 4 this 3 865  
182 0 0 6 245 870 0 0 0 2 4 this 3 865  1 n 1 838  
183 0 0 6 246 836 0 0 183 /**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator, so this function is a
 * little redundant.
 */ 1 4 this 3 865  
184 0 0 6 247 836 0 0 139 /**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */ 1 4 this 3 865  
185 0 0 6 248 836 0 0 145 /**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */ 1 4 this 3 865  
186 0 0 6 249 836 0 0 96 /**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */ 1 4 this 3 865  
187 0 0 6 250 836 0 0 81 /**
 * Returns the basename part of the filename, without the file extension.
 */ 1 4 this 3 865  
188 0 0 6 251 836 0 0 140 /**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */ 1 4 this 3 865  
189 0 0 6 252 785 0 0 34 // Comparison operators are handy. 2 4 this 3 865  5 other 1 868  
190 0 0 6 253 785 0 0 0 2 4 this 3 865  5 other 1 868  
191 0 0 6 254 785 0 0 0 2 4 this 3 865  5 other 1 868  
192 0 0 4 255 837 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 867  5 value 1 868  
193 0 0 7 256 840 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 865  
194 0 0 7 257 840 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 865  
195 0 0 7 261 840 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 865  1 n 1 838  
196 0 0 4 262 837 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 867  1 n 1 838  5 value 1 868  
197 0 0 6 241 868 0 0 0 1 4 this 3 865  
198 0 0 7 265 873 594 0 0 1 6 param0 0 871  
199 0 0 7 265 873 594 0 10 /**
 *
 */ 1 4 name 1 836  
200 0 0 7 265 873 594 0 10 /**
 *
 */ 4 4 name 1 836  13 default_value 1 786  11 description 1 836  5 flags 1 786  
201 0 0 7 265 873 594 0 10 /**
 *
 */ 4 4 name 1 836  13 default_value 1 836  11 description 1 836  5 flags 1 786  
202 0 0 6 266 873 0 0 0 2 4 this 3 873  5 value 1 786  
203 0 0 6 268 838 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 871  
204 0 0 6 269 786 0 0 0 2 4 this 3 871  1 n 1 838  
205 0 0 4 270 837 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 873  5 value 1 786  
206 0 0 6 271 786 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 871  
207 0 0 6 272 786 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 871  
208 0 0 6 275 786 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 871  1 n 1 838  
209 0 0 4 276 837 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 873  1 n 1 838  5 value 1 786  
210 0 0 6 267 786 0 0 0 1 4 this 3 871  
211 0 0 7 279 876 605 0 0 1 6 param0 0 874  
212 0 0 7 279 876 605 0 10 /**
 *
 */ 1 4 name 1 836  
213 0 0 7 279 876 605 0 10 /**
 *
 */ 4 4 name 1 836  13 default_value 1 807  11 description 1 836  5 flags 1 786  
214 0 0 7 279 876 605 0 10 /**
 *
 */ 4 4 name 1 836  13 default_value 1 836  11 description 1 836  5 flags 1 786  
215 0 0 6 280 876 0 0 0 2 4 this 3 876  5 value 1 807  
216 0 0 6 282 838 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 874  
217 0 0 6 283 807 0 0 0 2 4 this 3 874  1 n 1 838  
218 0 0 4 284 837 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 876  5 value 1 807  
219 0 0 6 285 807 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 874  
220 0 0 6 286 807 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 874  
221 0 0 6 291 807 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 874  1 n 1 838  
222 0 0 4 292 837 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 876  1 n 1 838  5 value 1 807  
223 0 0 6 281 807 0 0 0 1 4 this 3 874  
224 0 0 7 295 879 607 0 0 1 6 param0 0 877  
225 0 0 7 295 879 607 0 10 /**
 *
 */ 3 4 name 1 836  11 description 1 836  5 flags 1 786  
226 0 0 6 297 838 0 0 56 /**
 * Returns the number of values in the variable.
 */ 1 4 this 3 877  
227 0 0 6 298 836 0 0 49 /**
 * Returns the nth value of the variable.
 */ 2 4 this 3 877  1 n 1 838  
228 0 0 6 299 838 0 0 63 /**
 * Returns the number of unique values in the variable.
 */ 1 4 this 3 877  
229 0 0 6 300 836 0 0 56 /**
 * Returns the nth unique value of the variable.
 */ 2 4 this 3 877  1 n 1 838  
230 0 0 6 301 838 0 0 63 /**
 * Returns the number of unique values of the variable.
 */ 1 4 this 3 877  
231 0 0 6 302 836 0 0 0 2 4 this 3 877  1 n 1 838  
232 0 0 4 303 837 0 0 10 /**
 *
 */ 2 4 this 3 877  3 out 1 824  
233 0 0 4 304 837 0 0 10 /**
 *
 */ 2 4 this 3 877  3 out 1 824  
234 0 0 7 306 881 617 0 10 /**
 *
 */ 4 4 name 1 836  13 default_value 1 880  11 description 1 836  5 flags 1 786  
235 0 0 7 306 881 617 0 10 /**
 *
 */ 3 4 name 1 836  11 description 1 836  5 flags 1 786  
236 0 0 7 306 881 617 0 10 /**
 *
 */ 4 4 name 1 836  13 default_value 1 836  11 description 1 836  5 flags 1 786  
237 0 0 7 309 849 0 0 10 /**
 *
 */ 1 4 this 3 882  
238 0 0 6 310 880 0 0 10 /**
 *
 */ 1 4 this 3 882  
239 0 0 6 315 785 0 0 113 /**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */ 1 4 this 3 881  
240 0 0 4 316 837 0 0 113 /**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */ 1 4 this 3 881  
241 0 0 4 317 837 0 0 62 /**
 * Adds a new directory to the end of the search list.
 */ 2 4 this 3 881  9 directory 1 868  
242 0 0 4 318 837 0 0 64 /**
 * Adds a new directory to the front of the search list.
 */ 2 4 this 3 881  9 directory 1 868  
243 0 0 4 319 837 0 0 98 /**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */ 2 4 this 3 881  4 path 1 880  
244 0 0 4 319 837 0 0 98 /**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */ 3 4 this 3 881  4 path 1 836  9 separator 1 836  
245 0 0 4 320 837 0 0 104 /**
 * Adds all of the directories listed in the search path to the beginning of
 * the search list.
 */ 2 4 this 3 881  4 path 1 880  
246 0 0 6 321 785 0 0 69 /**
 * Returns true if the search list is empty, false otherwise.
 */ 1 4 this 3 882  
247 0 0 6 322 838 0 0 64 /**
 * Returns the number of directories on the search list.
 */ 1 4 this 3 882  
248 0 0 7 323 840 0 0 56 /**
 * Returns the nth directory on the search list.
 */ 2 4 this 3 882  1 n 1 838  
249 0 0 7 327 840 0 0 197 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Returns the full matching pathname of the first match if found, or
 * the empty string if not found.
 */ 2 4 this 3 882  8 filename 1 868  
250 0 0 7 328 885 0 0 184 /**
 * This variant of find_all_files() returns the new Results object, instead of
 * filling on in on the parameter list.  This is a little more convenient to
 * call from Python.
 */ 2 4 this 3 882  8 filename 1 868  
251 0 0 6 328 838 0 0 363 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */ 3 4 this 3 882  8 filename 1 868  7 results 1 885  
252 0 0 4 329 837 0 0 10 /**
 *
 */ 2 4 this 3 882  3 out 1 824  
253 0 0 4 330 837 0 0 10 /**
 *
 */ 2 4 this 3 882  3 out 1 824  
254 0 0 7 308 849 0 0 0 1 4 this 3 882  
255 0 0 7 332 888 650 0 0 1 6 param0 0 886  
256 0 0 7 332 888 650 0 10 /**
 *
 */ 1 4 name 1 836  
257 0 0 7 332 888 650 0 10 /**
 *
 */ 4 4 name 1 836  13 default_value 1 836  11 description 1 836  5 flags 1 786  
258 0 0 6 333 888 0 0 0 2 4 this 3 888  5 value 1 836  
259 0 0 6 335 836 0 0 76 // These methods help the ConfigVariableString act like a C++ string object. 1 4 this 3 886  
260 0 0 6 336 785 0 0 10 /**
 *
 */ 1 4 this 3 886  
261 0 0 6 337 838 0 0 10 /**
 *
 */ 1 4 this 3 886  
262 0 0 6 338 870 0 0 0 2 4 this 3 886  1 n 1 838  
263 0 0 6 339 785 0 0 34 // Comparison operators are handy. 2 4 this 3 886  5 other 1 836  
264 0 0 6 340 785 0 0 0 2 4 this 3 886  5 other 1 836  
265 0 0 6 341 785 0 0 0 2 4 this 3 886  5 other 1 836  
266 0 0 4 342 837 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 888  5 value 1 836  
267 0 0 6 343 836 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 886  
268 0 0 6 344 836 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 886  
269 0 0 6 347 836 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 886  1 n 1 838  
270 0 0 4 348 837 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 888  1 n 1 838  5 value 1 836  
271 0 0 6 334 836 0 0 0 1 4 this 3 886  
272 0 0 7 384 816 678 0 0 1 6 param0 0 889  
273 0 0 6 356 836 0 0 10 /**
 *
 */ 1 4 this 3 889  
274 0 0 6 357 836 0 0 10 /**
 *
 */ 1 4 this 3 889  
275 0 0 6 358 794 0 0 10 /**
 *
 */ 1 4 this 3 889  
276 0 0 4 359 837 0 0 150 /**
 * Sets the severity level of messages that will be reported from this
 * Category.  This allows any message of this severity level or higher.
 */ 2 4 this 3 816  8 severity 1 794  
277 0 0 6 363 785 0 0 110 /**
 * Returns true if messages of the indicated severity level ought to be
 * reported for this Category.
 */ 2 4 this 3 889  8 severity 1 794  
278 0 0 6 364 785 0 0 51 /**
 * A shorthand way to write is_on(NS_spam).
 */ 1 4 this 3 889  
279 0 0 6 365 785 0 0 52 /**
 * A shorthand way to write is_on(NS_debug).
 */ 1 4 this 3 889  
280 0 0 6 366 785 0 0 51 /**
 * A shorthand way to write is_on(NS_info).
 */ 1 4 this 3 889  
281 0 0 6 367 785 0 0 54 /**
 * A shorthand way to write is_on(NS_warning).
 */ 1 4 this 3 889  
282 0 0 6 368 785 0 0 52 /**
 * A shorthand way to write is_on(NS_error).
 */ 1 4 this 3 889  
283 0 0 6 369 785 0 0 52 /**
 * A shorthand way to write is_on(NS_fatal).
 */ 1 4 this 3 889  
284 0 0 6 370 824 0 0 277 /**
 * Begins a new message to this Category at the indicated severity level.  If
 * the indicated severity level is enabled, this writes a prefixing string to
 * the Notify::out() stream and returns that.  If the severity level is
 * disabled, this returns Notify::null().
 */ 3 4 this 3 889  8 severity 1 794  6 prefix 1 785  
285 0 0 6 371 824 0 0 49 /**
 * A shorthand way to write out(NS_spam).
 */ 2 4 this 3 889  6 prefix 1 785  
286 0 0 6 372 824 0 0 50 /**
 * A shorthand way to write out(NS_debug).
 */ 2 4 this 3 889  6 prefix 1 785  
287 0 0 6 373 824 0 0 49 /**
 * A shorthand way to write out(NS_info).
 */ 2 4 this 3 889  6 prefix 1 785  
288 0 0 6 374 824 0 0 52 /**
 * A shorthand way to write out(NS_warning).
 */ 2 4 this 3 889  6 prefix 1 785  
289 0 0 6 375 824 0 0 50 /**
 * A shorthand way to write out(NS_error).
 */ 2 4 this 3 889  6 prefix 1 785  
290 0 0 6 376 824 0 0 50 /**
 * A shorthand way to write out(NS_fatal).
 */ 2 4 this 3 889  6 prefix 1 785  
291 0 0 6 377 838 0 0 78 /**
 * Returns the number of child Categories of this particular Category.
 */ 1 4 this 3 889  
292 0 0 6 378 816 0 0 70 /**
 * Returns the nth child Category of this particular Category.
 */ 2 4 this 3 889  1 i 1 838  
293 0 0 4 383 837 0 0 207 /**
 * Sets a global delta (in seconds) between the local time and the server's
 * time, for the purpose of synchronizing the time stamps in the log messages
 * of the client with that of a known server.
 */ 1 5 delta 1 891  
294 0 0 6 352 892 0 0 0 1 4 this 3 816  
295 0 0 6 354 831 0 0 0 1 4 this 3 816  
296 0 0 7 388 893 685 0 10 /**
 *
 */ 0 
297 0 0 7 388 893 685 0 10 /**
 *
 */ 3 6 source 1 822  11 owns_source 1 785  8 password 1 836  
298 0 0 6 389 893 0 0 10 /**
 *
 */ 4 4 this 3 893  6 source 1 822  11 owns_source 1 785  8 password 1 836  
299 0 0 6 390 893 0 0 124 /**
 * Resets the EncryptStream to empty, but does not actually close the source
 * istream unless owns_source was true.
 */ 1 4 this 3 893  
300 0 0 6 391 836 0 0 74 /**
 * Returns the encryption algorithm that was read from the stream.
 */ 1 4 this 3 894  
301 0 0 6 392 786 0 0 85 /**
 * Returns the encryption key length, in bits, that was read from the stream.
 */ 1 4 this 3 894  
302 0 0 6 393 786 0 0 63 /**
 * Returns the value that was was read from the stream.
 */ 1 4 this 3 894  
303 0 0 7 400 896 695 0 10 /**
 *
 */ 0 
304 0 0 7 400 896 695 0 10 /**
 *
 */ 3 4 dest 1 824  9 owns_dest 1 785  8 password 1 836  
305 0 0 6 401 896 0 0 10 /**
 *
 */ 4 4 this 3 896  4 dest 1 824  9 owns_dest 1 785  8 password 1 836  
306 0 0 6 402 896 0 0 120 /**
 * Resets the EncryptStream to empty, but does not actually close the dest
 * ostream unless owns_dest was true.
 */ 1 4 this 3 896  
307 0 0 4 403 837 0 0 383 /**
 * Specifies the encryption algorithm that should be used for future calls to
 * open().  The default is whatever is specified by the encryption-algorithm
 * config variable.  The complete set of available algorithms is defined by
 * the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but open() will fail.
 */ 2 4 this 3 896  9 algorithm 1 836  
308 0 0 4 404 837 0 0 347 /**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to open().  The default is whatever is specified
 * by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but open() will fail.
 */ 2 4 this 3 896  10 key_length 1 786  
309 0 0 4 405 837 0 0 495 /**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to open().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the encryption-iteration-count
 * config variable.
 */ 2 4 this 3 896  15 iteration_count 1 786  
310 0 0 7 414 897 698 0 63 /**
 * The move constructor steals ownership of the stream.
 */ 1 4 from 1 897  
311 0 0 7 414 897 698 0 70 /**
 * The copy constructor does not copy ownership of the stream.
 */ 1 4 copy 1 898  
312 0 0 7 414 897 698 0 105 /**
 * If owns_stream is true, the stream pointer will be deleted when the
 * StreamReader destructs.
 */ 2 2 in 1 822  11 owns_stream 1 785  
313 0 0 6 415 897 0 0 0 2 4 this 3 897  4 from 1 897  
314 0 0 6 415 897 0 0 0 2 4 this 3 897  4 copy 1 898  
315 0 0 6 417 822 0 0 37 /**
 * Returns the stream in use.
 */ 1 4 this 3 898  
316 0 0 6 420 785 0 0 36 /**
 * Extracts a boolean value.
 */ 1 4 this 3 897  
317 0 0 6 421 900 0 0 43 /**
 * Extracts a signed 8-bit integer.
 */ 1 4 this 3 897  
318 0 0 6 422 902 0 0 46 /**
 * Extracts an unsigned 8-bit integer.
 */ 1 4 this 3 897  
319 0 0 6 423 904 0 0 44 /**
 * Extracts a signed 16-bit integer.
 */ 1 4 this 3 897  
320 0 0 6 424 906 0 0 44 /**
 * Extracts a signed 32-bit integer.
 */ 1 4 this 3 897  
321 0 0 6 425 807 0 0 44 /**
 * Extracts a signed 64-bit integer.
 */ 1 4 this 3 897  
322 0 0 6 426 907 0 0 47 /**
 * Extracts an unsigned 16-bit integer.
 */ 1 4 this 3 897  
323 0 0 6 427 909 0 0 47 /**
 * Extracts an unsigned 32-bit integer.
 */ 1 4 this 3 897  
324 0 0 6 428 911 0 0 47 /**
 * Extracts an unsigned 64-bit integer.
 */ 1 4 this 3 897  
325 0 0 6 429 912 0 0 186 /**
 * Extracts a 32-bit single-precision floating-point number.  Since this kind
 * of float is not necessarily portable across different architectures,
 * special care is required.
 */ 1 4 this 3 897  
326 0 0 6 430 913 0 0 51 /**
 * Extracts a 64-bit floating-point number.
 */ 1 4 this 3 897  
327 0 0 6 431 904 0 0 55 /**
 * Extracts a signed big-endian 16-bit integer.
 */ 1 4 this 3 897  
328 0 0 6 432 906 0 0 55 /**
 * Extracts a signed big-endian 32-bit integer.
 */ 1 4 this 3 897  
329 0 0 6 433 807 0 0 55 /**
 * Extracts a signed big-endian 64-bit integer.
 */ 1 4 this 3 897  
330 0 0 6 434 907 0 0 58 /**
 * Extracts an unsigned big-endian 16-bit integer.
 */ 1 4 this 3 897  
331 0 0 6 435 909 0 0 58 /**
 * Extracts an unsigned big-endian 32-bit integer.
 */ 1 4 this 3 897  
332 0 0 6 436 911 0 0 58 /**
 * Extracts an unsigned big-endian 64-bit integer.
 */ 1 4 this 3 897  
333 0 0 6 437 912 0 0 197 /**
 * Extracts a 32-bit single-precision big-endian floating-point number.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 1 4 this 3 897  
334 0 0 6 438 913 0 0 62 /**
 * Extracts a 64-bit big-endian floating-point number.
 */ 1 4 this 3 897  
335 0 0 6 439 836 0 0 45 /**
 * Extracts a variable-length string.
 */ 1 4 this 3 897  
336 0 0 6 440 836 0 0 72 /**
 * Extracts a variable-length string with a 32-bit length field.
 */ 1 4 this 3 897  
337 0 0 6 441 836 0 0 74 /**
 * Extracts a variable-length string, as a NULL-terminated string.
 */ 1 4 this 3 897  
338 0 0 6 442 836 0 0 128 /**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */ 2 4 this 3 897  4 size 1 838  
339 0 0 4 443 837 0 0 66 /**
 * Skips over the indicated number of bytes in the stream.
 */ 2 4 this 3 897  4 size 1 838  
340 0 0 6 444 914 0 0 134 /**
 * Extracts the indicated number of bytes in the stream and returns them as a
 * string.  Returns empty string at end-of-file.
 */ 2 4 this 3 897  4 size 1 838  
341 0 0 6 445 914 0 0 303 /**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's File.readline() function.
 */ 1 4 this 3 897  
342 0 0 6 446 914 0 0 0 1 4 this 3 897  
343 0 0 7 448 917 729 0 63 /**
 * The move constructor steals ownership of the stream.
 */ 1 4 from 1 917  
344 0 0 7 448 917 729 0 70 /**
 * The copy constructor does not copy ownership of the stream.
 */ 1 4 copy 1 918  
345 0 0 7 448 917 729 0 10 /**
 *
 */ 2 3 out 1 824  11 owns_stream 1 785  
346 0 0 6 449 917 0 0 0 2 4 this 3 917  4 from 1 917  
347 0 0 6 449 917 0 0 0 2 4 this 3 917  4 copy 1 918  
348 0 0 6 451 824 0 0 37 /**
 * Returns the stream in use.
 */ 1 4 this 3 918  
349 0 0 4 454 837 0 0 46 /**
 * Adds a boolean value to the stream.
 */ 2 4 this 3 917  5 value 1 785  
350 0 0 4 455 837 0 0 53 /**
 * Adds a signed 8-bit integer to the stream.
 */ 2 4 this 3 917  5 value 1 900  
351 0 0 4 456 837 0 0 56 /**
 * Adds an unsigned 8-bit integer to the stream.
 */ 2 4 this 3 917  5 value 1 902  
352 0 0 4 457 837 0 0 54 /**
 * Adds a signed 16-bit integer to the stream.
 */ 2 4 this 3 917  5 value 1 904  
353 0 0 4 458 837 0 0 54 /**
 * Adds a signed 32-bit integer to the stream.
 */ 2 4 this 3 917  5 value 1 906  
354 0 0 4 459 837 0 0 54 /**
 * Adds a signed 64-bit integer to the stream.
 */ 2 4 this 3 917  5 value 1 807  
355 0 0 4 460 837 0 0 57 /**
 * Adds an unsigned 16-bit integer to the stream.
 */ 2 4 this 3 917  5 value 1 907  
356 0 0 4 461 837 0 0 57 /**
 * Adds an unsigned 32-bit integer to the stream.
 */ 2 4 this 3 917  5 value 1 909  
357 0 0 4 462 837 0 0 57 /**
 * Adds an unsigned 64-bit integer to the stream.
 */ 2 4 this 3 917  5 value 1 911  
358 0 0 4 463 837 0 0 196 /**
 * Adds a 32-bit single-precision floating-point number to the stream.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 2 4 this 3 917  5 value 1 912  
359 0 0 4 464 837 0 0 61 /**
 * Adds a 64-bit floating-point number to the stream.
 */ 2 4 this 3 917  5 value 1 913  
360 0 0 4 465 837 0 0 71 /**
 * Adds a signed 16-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 917  5 value 1 904  
361 0 0 4 466 837 0 0 71 /**
 * Adds a signed 32-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 917  5 value 1 906  
362 0 0 4 467 837 0 0 71 /**
 * Adds a signed 64-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 917  5 value 1 807  
363 0 0 4 468 837 0 0 74 /**
 * Adds an unsigned 16-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 917  5 value 1 907  
364 0 0 4 469 837 0 0 74 /**
 * Adds an unsigned 32-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 917  5 value 1 909  
365 0 0 4 470 837 0 0 74 /**
 * Adds an unsigned 64-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 917  5 value 1 911  
366 0 0 4 471 837 0 0 207 /**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * stream.  Since this kind of float is not necessarily portable across
 * different architectures, special care is required.
 */ 2 4 this 3 917  5 value 1 912  
367 0 0 4 472 837 0 0 78 /**
 * Adds a 64-bit big-endian floating-point number to the streamWriter.
 */ 2 4 this 3 917  5 value 1 913  
368 0 0 4 473 837 0 0 107 /**
 * Adds a variable-length string to the stream.  This actually adds a count
 * followed by n bytes.
 */ 2 4 this 3 917  3 str 1 836  
369 0 0 4 474 837 0 0 84 /**
 * Adds a variable-length string to the stream, using a 32-bit length field.
 */ 2 4 this 3 917  3 str 1 836  
370 0 0 4 475 837 0 0 84 /**
 * Adds a variable-length string to the stream, as a NULL-terminated string.
 */ 2 4 this 3 917  3 str 1 836  
371 0 0 4 476 837 0 0 236 /**
 * Adds a fixed-length string to the stream.  If the string given is less than
 * the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */ 3 4 this 3 917  3 str 1 836  4 size 1 838  
372 0 0 4 477 837 0 0 65 /**
 * Adds the indicated number of zero bytes to the stream.
 */ 2 4 this 3 917  4 size 1 838  
373 0 0 4 478 837 0 0 0 2 4 this 3 917  4 data 1 914  
374 0 0 4 479 837 0 0 50 /**
 * Calls flush() on the underlying stream.
 */ 1 4 this 3 917  
375 0 0 4 480 837 0 0 132 /**
 * A synonym of append_data().  This is useful when assigning the StreamWriter
 * to sys.stderr and/or sys.stdout in Python.
 */ 2 4 this 3 917  3 str 1 836  
376 0 0 4 485 837 0 0 572 /**
 * Acquires the internal lock.
 *
 * User code should call this to take temporary possession of the stream and
 * perform direct I/O operations on it, for instance to make several
 * sequential atomic reads.  You may not call any of the StreamWrapper methods
 * while the lock is held, other than release().
 *
 * Use with extreme caution!  This is a very low-level, non-recursive lock.
 * You must call acquire() only once, and you must later call release()
 * exactly once.  Failing to do so may result in a hard deadlock with no
 * available debugging features.
 */ 1 4 this 3 920  
377 0 0 4 486 837 0 0 135 /**
 * Releases the internal lock.  Must be called exactly once following a call
 * to acquire().  See the cautions with acquire().
 */ 1 4 this 3 920  
378 0 0 7 490 921 765 0 10 /**
 *
 */ 1 6 stream 1 822  
379 0 0 6 492 822 0 0 55 /**
 * Returns the istream this object is wrapping.
 */ 1 4 this 3 922  
380 0 0 6 489 920 0 0 0 1 4 this 3 921  
381 0 0 7 495 924 769 0 10 /**
 *
 */ 1 6 stream 1 824  
382 0 0 6 497 824 0 0 55 /**
 * Returns the ostream this object is wrapping.
 */ 1 4 this 3 925  
383 0 0 6 494 920 0 0 0 1 4 this 3 924  
384 0 0 7 503 927 776 0 10 /**
 *
 */ 1 6 stream 1 829  
385 0 0 6 505 829 0 0 56 /**
 * Returns the iostream this object is wrapping.
 */ 1 4 this 3 928  
386 0 0 6 499 921 0 0 0 1 4 this 3 927  
387 0 0 6 501 924 0 0 0 1 4 this 3 927  
152
778 11 ConfigFlags 0 141313 11 ConfigFlags 11 ConfigFlags 0 0 0 1 388 389 0 0 0 0 0 0 2 779 780 195
/**
 * This class is the base class of both ConfigVariable and ConfigVariableCore.
 * It exists only to provide a convenient name scoping for some enumerated
 * values common to both classes.
 */

779 9 ValueType 0 794624 22 ConfigFlags::ValueType 22 ConfigFlags::ValueType 778 0 0 0 0 0 0 0 0 0 11 12 VT_undefined 25 ConfigFlags::VT_undefined 0
0 7 VT_list 20 ConfigFlags::VT_list 0
1 9 VT_string 22 ConfigFlags::VT_string 0
2 11 VT_filename 24 ConfigFlags::VT_filename 0
3 7 VT_bool 20 ConfigFlags::VT_bool 0
4 6 VT_int 19 ConfigFlags::VT_int 0
5 9 VT_double 22 ConfigFlags::VT_double 0
6 7 VT_enum 20 ConfigFlags::VT_enum 0
7 14 VT_search_path 27 ConfigFlags::VT_search_path 0
8 8 VT_int64 21 ConfigFlags::VT_int64 0
9 8 VT_color 21 ConfigFlags::VT_color 0
10 0 0

780 13 VariableFlags 0 794624 26 ConfigFlags::VariableFlags 26 ConfigFlags::VariableFlags 778 0 0 0 0 0 0 0 0 0 5 18 F_trust_level_mask 31 ConfigFlags::F_trust_level_mask 138
// Trust level.  We have the bottom twelve bits reserved for a trust level
// indicator; then the open and closed bits are a special case.
4095 6 F_open 19 ConfigFlags::F_open 0
4096 8 F_closed 21 ConfigFlags::F_closed 0
8192 9 F_dynamic 22 ConfigFlags::F_dynamic 171
// F_dynamic means that the variable name is generated dynamically
// (possibly from a very large pool) and should not be included in the
// normal list of variable names.
16384 9 F_dconfig 22 ConfigFlags::F_dconfig 162
// F_dconfig means that the variable was constructed from the legacy
// DConfig system, rather than directly by the user.  You shouldn't pass
// this in directly.
32768 0 0

781 10 ConfigPage 0 43009 10 ConfigPage 10 ConfigPage 0 0 0 0 0 8 930 931 932 933 934 935 936 937 25 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 469 470 471 0 0 0 0 0 262
/**
 * A page of ConfigDeclarations that may be loaded or unloaded.  Typically
 * this represents a single .prc file that is read from disk at runtime, but
 * it may also represent a list of declarations built up by application code
 * and explicitly loaded.
 */

782 12 string const 0 8832 17 std::string const 17 std::string const 0 0 783 0 0 0 0 0 0 0 0 0 0

783 6 string 0 2105344 11 std::string 11 std::string 0 0 784 0 0 0 0 0 0 0 0 0 0

784 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

785 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

786 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

787 19 ConfigDeclaration * 0 8576 19 ConfigDeclaration * 19 ConfigDeclaration * 0 0 788 0 0 0 0 0 0 0 0 0 0

788 17 ConfigDeclaration 0 43009 17 ConfigDeclaration 17 ConfigDeclaration 0 0 0 0 0 2 938 939 24 412 413 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 0 0 1 0 778 0 0 0 0 249
/**
 * A single declaration of a config variable, typically defined as one line in
 * a .prc file, e.g.  "show-frame-rate-meter 1".  This is really just a
 * pairing of a string name (actually, a ConfigVariableCore pointer) to a
 * string value.
 */

789 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 781 0 0 0 0 0 0 0 0 0 0

790 20 ConfigVariableCore * 0 8576 20 ConfigVariableCore * 20 ConfigVariableCore * 0 0 791 0 0 0 0 0 0 0 0 0 0

791 18 ConfigVariableCore 0 43009 18 ConfigVariableCore 18 ConfigVariableCore 0 0 0 0 0 12 940 941 942 943 944 945 946 947 948 949 950 951 28 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 441 442 4 988 989 990 991 0 1 0 778 0 0 0 0 345
/**
 * The internal definition of a ConfigVariable.  This object is shared between
 * all instances of a ConfigVariable that use the same variable name.
 *
 * You cannot create a ConfigVariableCore instance directly; instead, use the
 * make() method, which may return a shared instance.  Once created, these
 * objects are never destructed.
 */

792 25 ConfigDeclaration const * 0 8576 25 ConfigDeclaration const * 25 ConfigDeclaration const * 0 0 793 0 0 0 0 0 0 0 0 0 0

793 23 ConfigDeclaration const 0 8832 23 ConfigDeclaration const 23 ConfigDeclaration const 0 0 788 0 0 0 0 0 0 0 0 0 0

794 14 NotifySeverity 0 532481 14 NotifySeverity 14 NotifySeverity 0 0 0 0 0 0 0 0 0 0 7 14 NS_unspecified 14 NS_unspecified 41
// Never used, a special case internally.
0 7 NS_spam 7 NS_spam 0
1 8 NS_debug 8 NS_debug 0
2 7 NS_info 7 NS_info 0
3 10 NS_warning 10 NS_warning 0
4 8 NS_error 8 NS_error 37
// Specifically, a recoverable error.
5 8 NS_fatal 8 NS_fatal 55
// A nonrecoverable error--expect abort() or core dump.
6 0 0

795 6 Notify 0 26625 6 Notify 6 Notify 0 0 0 1 472 473 0 15 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 0 0 0 0 0 529
/**
 * An object that handles general error reporting to the user.  It contains a
 * pointer to an ostream, initially cerr, which can be reset at will to point
 * to different output devices, according to the needs of the application.
 * All output generated within Panda should vector through the Notify ostream.
 *
 * This also includes a collection of Categories and Severities, which may be
 * independently enabled or disabled, so that error messages may be squelched
 * or respected according to the wishes of the user.
 */

796 17 ConfigPageManager 0 43009 17 ConfigPageManager 17 ConfigPageManager 0 0 0 0 0 0 19 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 0 0 1 0 778 0 0 0 0 124
/**
 * A global object that maintains the set of ConfigPages everywhere in the
 * world, and keeps them in sorted order.
 */

797 21 ConfigVariableManager 0 43009 21 ConfigVariableManager 21 ConfigVariableManager 0 0 0 0 0 1 952 13 508 509 510 511 512 513 515 516 517 518 519 520 521 1 992 0 0 0 0 163
/**
 * A global object that maintains the set of ConfigVariables (actually,
 * ConfigVariableCores) everywhere in the world, and keeps them in sorted
 * order.
 */

798 18 ConfigVariableBase 0 43009 18 ConfigVariableBase 18 ConfigVariableBase 0 0 0 0 0 6 953 954 955 956 957 958 12 522 523 524 525 526 527 528 529 530 531 532 533 0 0 1 0 778 0 0 0 0 417
/**
 * This class is the base class for both ConfigVariableList and ConfigVariable
 * (and hence for all of the ConfigVariableBool, ConfigVaribleString, etc.
 * classes).  It collects together the common interface for all generic
 * ConfigVariables.
 *
 * Mostly, this class serves as a thin wrapper around ConfigVariableCore
 * and/or ConfigDeclaration, more or less duplicating the interface presented
 * there.
 */

799 14 ConfigVariable 0 26625 14 ConfigVariable 14 ConfigVariable 0 0 0 1 534 535 0 4 536 537 538 539 0 0 1 0 798 0 0 0 0 415
/**
 * This is a generic, untyped ConfigVariable.  It is also the base class for
 * the typed ConfigVariables, and contains all of the code common to
 * ConfigVariables of all types (except ConfigVariableList, which is a bit of
 * a special case).
 *
 * Mostly, this class serves as a thin wrapper around ConfigVariableCore
 * and/or ConfigDeclaration, more or less duplicating the interface presented
 * there.
 */

800 18 ConfigVariableBool 0 141313 18 ConfigVariableBool 18 ConfigVariableBool 0 0 0 1 540 550 2 959 960 8 541 543 544 545 546 547 548 549 0 1 542 1 0 799 0 0 0 0 86
/**
 * This is a convenience class to specialize ConfigVariable as a boolean type.
 */

801 20 ConfigVariableDouble 0 141313 20 ConfigVariableDouble 20 ConfigVariableDouble 0 0 0 1 551 561 2 961 962 8 552 554 555 556 557 558 559 560 0 1 553 1 0 799 0 0 0 0 97
/**
 * This is a convenience class to specialize ConfigVariable as a floating-
 * point type.
 */

802 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

803 22 ConfigVariableFilename 0 141313 22 ConfigVariableFilename 22 ConfigVariableFilename 0 0 0 1 562 583 2 963 964 19 563 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 0 1 564 1 0 799 0 0 0 0 327
/**
 * This is a convenience class to specialize ConfigVariable as a Filename
 * type.  It is almost the same thing as ConfigVariableString, except it
 * handles an implicit Filename::expand_from() operation so that the user may
 * put OS-specific filenames, or filenames based on environment variables, in
 * the prc file.
 */

804 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

805 17 ConfigVariableInt 0 141313 17 ConfigVariableInt 17 ConfigVariableInt 0 0 0 1 584 594 2 965 966 8 585 587 588 589 590 591 592 593 0 1 586 1 0 799 0 0 0 0 90
/**
 * This is a convenience class to specialize ConfigVariable as an integer
 * type.
 */

806 19 ConfigVariableInt64 0 141313 19 ConfigVariableInt64 19 ConfigVariableInt64 0 0 0 1 595 605 2 967 968 8 596 598 599 600 601 602 603 604 0 1 597 1 0 799 0 0 0 0 96
/**
 * This is a convenience class to specialize ConfigVariable as a 64-bit
 * integer type.
 */

807 7 int64_t 0 2105344 7 int64_t 7 int64_t 0 0 808 0 0 0 0 0 0 0 0 0 0

808 13 long long int 0 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

809 18 ConfigVariableList 0 26625 18 ConfigVariableList 18 ConfigVariableList 0 0 0 1 606 607 0 8 608 609 610 611 612 613 614 615 0 0 1 0 798 0 0 0 0 481
/**
 * This class is similar to ConfigVariable, but it reports its value as a list
 * of strings.  In this special case, all of the declarations of the variable
 * are returned as the elements of this list, in order.
 *
 * Note that this is different from a normal ConfigVariableString, which just
 * returns its topmost value, which can optionally be treated as a number of
 * discrete words by dividing it at the spaces.
 *
 * A ConfigVariableList cannot be modified locally.
 */

810 24 ConfigVariableSearchPath 0 26625 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 1 616 617 3 969 970 971 15 619 620 621 622 623 624 625 626 627 628 629 631 632 633 634 1 993 1 618 1 0 798 0 0 0 0 731
/**
 * This is similar to a ConfigVariableList, but it returns its list as a
 * DSearchPath, as a list of directories.
 *
 * You may locally append directories to the end of the search path with the
 * methods here, or prepend them to the beginning.  Use these methods to make
 * adjustments to the path; do not attempt to directly modify the const
 * DSearchPath object returned by get_value().
 *
 * Unlike other ConfigVariable types, local changes (made by calling
 * append_directory() and prepend_directory()) are specific to this particular
 * instance of the ConfigVariableSearchPath.  A separate instance of the same
 * variable, created by using the same name to the constructor, will not
 * reflect the local changes.
 */

811 11 DSearchPath 0 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 304
/**
 * This class stores a list of directories that can be searched, in order, to
 * locate a particular file.  It is normally constructed by passing it a
 * traditional searchpath-style string, e.g.  a list of directory names
 * delimited by spaces or colons, but it can also be built up explicitly.
 */

812 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 811 0 0 0 0 0 0 0 0 0 0

813 20 ConfigVariableString 0 141313 20 ConfigVariableString 20 ConfigVariableString 0 0 0 1 635 650 2 972 973 13 636 638 639 640 641 642 643 644 645 646 647 648 649 0 1 637 1 0 799 0 0 0 0 85
/**
 * This is a convenience class to specialize ConfigVariable as a string type.
 */

814 14 NotifyCategory 0 141313 14 NotifyCategory 14 NotifyCategory 0 0 0 1 677 678 4 974 975 976 977 21 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 676 1 994 0 2 3 815 651 652 3 778 653 654 0 0 284
/**
 * A particular category of error messages.  Typically there will be one of
 * these per package, so that we can turn on or off error messages at least at
 * a package level; further nested categories can be created within a package
 * if a finer grain of control is required.
 */

815 10 MemoryBase 0 2048 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 428
/**
 * This class is intended to be the base class of all objects in Panda that
 * might be allocated and deleted via the new and delete operators.  It
 * redefines these operators to provide some memory tracking support.
 *
 * We used to try to override the global operator new and delete methods, but
 * that seems to cause problems when including header files for C++-based
 * system libraries (such as are found on OSX).
 */

816 16 NotifyCategory * 0 8576 16 NotifyCategory * 16 NotifyCategory * 0 0 814 0 0 0 0 0 0 0 0 0 0

817 14 IDecryptStream 0 141313 14 IDecryptStream 14 IDecryptStream 0 0 0 1 679 685 3 978 979 980 5 680 681 682 683 684 0 0 1 0 818 0 0 0 0 340
/**
 * An input stream object that uses OpenSSL to decrypt the input from another
 * source stream on-the-fly.
 *
 * Attach an IDecryptStream to an existing istream that provides encrypted
 * data, as generated by an OEncryptStream, and read the corresponding
 * unencrypted data from the IDecryptStream.
 *
 * Seeking is not supported.
 */

818 7 istream 0 2048 12 std::istream 12 std::istream 0 0 0 0 0 0 0 0 0 0 0 0 0

819 14 OEncryptStream 0 141313 14 OEncryptStream 14 OEncryptStream 0 0 0 1 686 695 3 981 982 983 5 687 688 689 690 691 0 0 1 0 820 0 0 0 0 296
/**
 * An input stream object that uses OpenSSL to encrypt data to another
 * destination stream on-the-fly.
 *
 * Attach an OEncryptStream to an existing ostream that will accept encrypted
 * data, and write your unencrypted source data to the OEncryptStream.
 *
 * Seeking is not supported.
 */

820 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

821 12 StreamReader 0 26625 12 StreamReader 12 StreamReader 0 0 0 1 696 698 1 984 29 697 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 0 0 0 0 0 158
/**
 * A class to read sequential binary data directly from an istream.  Its
 * interface is similar to DatagramIterator by design; see also StreamWriter.
 */

822 9 istream * 0 8576 14 std::istream * 14 std::istream * 0 0 818 0 0 0 0 0 0 0 0 0 0

823 12 StreamWriter 0 26625 12 StreamWriter 12 StreamWriter 0 0 0 1 727 729 2 985 986 29 728 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 0 0 0 0 0 300
/**
 * A StreamWriter object is used to write sequential binary data directly to
 * an ostream.  Its interface is very similar to Datagram by design; it's
 * primarily intended as a convenience to eliminate the overhead of writing
 * bytes to a Datagram and then writing the Datagram to a stream.
 */

824 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 820 0 0 0 0 0 0 0 0 0 0

825 17 StreamWrapperBase 0 141313 17 StreamWrapperBase 17 StreamWrapperBase 0 0 0 0 762 0 2 760 761 0 0 0 0 0 116
/**
 * The base class for both IStreamWrapper and OStreamWrapper, this provides
 * the common locking interface.
 */

826 14 IStreamWrapper 0 26625 14 IStreamWrapper 14 IStreamWrapper 0 0 0 1 764 765 1 984 1 766 0 0 1 5 825 763 0 0 0 168
/**
 * This class provides a locking wrapper around an arbitrary istream pointer.
 * A thread may use this class to perform an atomic seek/read/gcount
 * operation.
 */

827 14 OStreamWrapper 0 26625 14 OStreamWrapper 14 OStreamWrapper 0 0 0 1 768 769 1 985 1 770 0 0 1 5 825 767 0 0 0 159
/**
 * This class provides a locking wrapper around an arbitrary ostream pointer.
 * A thread may use this class to perform an atomic seek/write operation.
 */

828 13 StreamWrapper 0 26625 13 StreamWrapper 13 StreamWrapper 0 0 0 1 775 776 1 987 1 777 0 0 2 3 826 771 772 3 827 773 774 0 0 97
/**
 * This class provides a locking wrapper around a combination ostream/istream
 * pointer.
 */

829 10 iostream * 0 8576 15 std::iostream * 15 std::iostream * 0 0 830 0 0 0 0 0 0 0 0 0 0

830 8 iostream 0 2048 13 std::iostream 13 std::iostream 0 0 0 0 0 0 0 0 0 0 0 0 0

831 13 ConfigFlags * 0 8576 13 ConfigFlags * 13 ConfigFlags * 0 0 778 0 0 0 0 0 0 0 0 0 0

832 19 ConfigFlags const * 0 8576 19 ConfigFlags const * 19 ConfigFlags const * 0 0 833 0 0 0 0 0 0 0 0 0 0

833 17 ConfigFlags const 0 8832 17 ConfigFlags const 17 ConfigFlags const 0 0 778 0 0 0 0 0 0 0 0 0 0

834 18 ConfigPage const * 0 8576 18 ConfigPage const * 18 ConfigPage const * 0 0 835 0 0 0 0 0 0 0 0 0 0

835 16 ConfigPage const 0 8832 16 ConfigPage const 16 ConfigPage const 0 0 781 0 0 0 0 0 0 0 0 0 0

836 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

837 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

838 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 839 0 0 0 0 0 0 0 0 0 0

839 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

840 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 804 0 0 0 0 0 0 0 0 0 0

841 26 ConfigVariableCore const * 0 8576 26 ConfigVariableCore const * 26 ConfigVariableCore const * 0 0 842 0 0 0 0 0 0 0 0 0 0

842 24 ConfigVariableCore const 0 8832 24 ConfigVariableCore const 24 ConfigVariableCore const 0 0 791 0 0 0 0 0 0 0 0 0 0

843 8 Notify * 0 8576 8 Notify * 8 Notify * 0 0 795 0 0 0 0 0 0 0 0 0 0

844 14 Notify const * 0 8576 14 Notify const * 14 Notify const * 0 0 845 0 0 0 0 0 0 0 0 0 0

845 12 Notify const 0 8832 12 Notify const 12 Notify const 0 0 795 0 0 0 0 0 0 0 0 0 0

846 25 ConfigPageManager const * 0 8576 25 ConfigPageManager const * 25 ConfigPageManager const * 0 0 847 0 0 0 0 0 0 0 0 0 0

847 23 ConfigPageManager const 0 8832 23 ConfigPageManager const 23 ConfigPageManager const 0 0 796 0 0 0 0 0 0 0 0 0 0

848 19 ConfigPageManager * 0 8576 19 ConfigPageManager * 19 ConfigPageManager * 0 0 796 0 0 0 0 0 0 0 0 0 0

849 13 DSearchPath * 0 8576 13 DSearchPath * 13 DSearchPath * 0 0 811 0 0 0 0 0 0 0 0 0 0

850 23 ConfigVariableManager * 0 8576 23 ConfigVariableManager * 23 ConfigVariableManager * 0 0 797 0 0 0 0 0 0 0 0 0 0

851 29 ConfigVariableManager const * 0 8576 29 ConfigVariableManager const * 29 ConfigVariableManager const * 0 0 852 0 0 0 0 0 0 0 0 0 0

852 27 ConfigVariableManager const 0 8832 27 ConfigVariableManager const 27 ConfigVariableManager const 0 0 797 0 0 0 0 0 0 0 0 0 0

853 26 ConfigVariableBase const * 0 8576 26 ConfigVariableBase const * 26 ConfigVariableBase const * 0 0 854 0 0 0 0 0 0 0 0 0 0

854 24 ConfigVariableBase const 0 8832 24 ConfigVariableBase const 24 ConfigVariableBase const 0 0 798 0 0 0 0 0 0 0 0 0 0

855 20 ConfigVariableBase * 0 8576 20 ConfigVariableBase * 20 ConfigVariableBase * 0 0 798 0 0 0 0 0 0 0 0 0 0

856 22 ConfigVariable const * 0 8576 22 ConfigVariable const * 22 ConfigVariable const * 0 0 857 0 0 0 0 0 0 0 0 0 0

857 20 ConfigVariable const 0 8832 20 ConfigVariable const 20 ConfigVariable const 0 0 799 0 0 0 0 0 0 0 0 0 0

858 16 ConfigVariable * 0 8576 16 ConfigVariable * 16 ConfigVariable * 0 0 799 0 0 0 0 0 0 0 0 0 0

859 26 ConfigVariableBool const * 0 8576 26 ConfigVariableBool const * 26 ConfigVariableBool const * 0 0 860 0 0 0 0 0 0 0 0 0 0

860 24 ConfigVariableBool const 0 8832 24 ConfigVariableBool const 24 ConfigVariableBool const 0 0 800 0 0 0 0 0 0 0 0 0 0

861 20 ConfigVariableBool * 0 8576 20 ConfigVariableBool * 20 ConfigVariableBool * 0 0 800 0 0 0 0 0 0 0 0 0 0

862 28 ConfigVariableDouble const * 0 8576 28 ConfigVariableDouble const * 28 ConfigVariableDouble const * 0 0 863 0 0 0 0 0 0 0 0 0 0

863 26 ConfigVariableDouble const 0 8832 26 ConfigVariableDouble const 26 ConfigVariableDouble const 0 0 801 0 0 0 0 0 0 0 0 0 0

864 22 ConfigVariableDouble * 0 8576 22 ConfigVariableDouble * 22 ConfigVariableDouble * 0 0 801 0 0 0 0 0 0 0 0 0 0

865 30 ConfigVariableFilename const * 0 8576 30 ConfigVariableFilename const * 30 ConfigVariableFilename const * 0 0 866 0 0 0 0 0 0 0 0 0 0

866 28 ConfigVariableFilename const 0 8832 28 ConfigVariableFilename const 28 ConfigVariableFilename const 0 0 803 0 0 0 0 0 0 0 0 0 0

867 24 ConfigVariableFilename * 0 8576 24 ConfigVariableFilename * 24 ConfigVariableFilename * 0 0 803 0 0 0 0 0 0 0 0 0 0

868 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 869 0 0 0 0 0 0 0 0 0 0

869 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 804 0 0 0 0 0 0 0 0 0 0

870 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

871 25 ConfigVariableInt const * 0 8576 25 ConfigVariableInt const * 25 ConfigVariableInt const * 0 0 872 0 0 0 0 0 0 0 0 0 0

872 23 ConfigVariableInt const 0 8832 23 ConfigVariableInt const 23 ConfigVariableInt const 0 0 805 0 0 0 0 0 0 0 0 0 0

873 19 ConfigVariableInt * 0 8576 19 ConfigVariableInt * 19 ConfigVariableInt * 0 0 805 0 0 0 0 0 0 0 0 0 0

874 27 ConfigVariableInt64 const * 0 8576 27 ConfigVariableInt64 const * 27 ConfigVariableInt64 const * 0 0 875 0 0 0 0 0 0 0 0 0 0

875 25 ConfigVariableInt64 const 0 8832 25 ConfigVariableInt64 const 25 ConfigVariableInt64 const 0 0 806 0 0 0 0 0 0 0 0 0 0

876 21 ConfigVariableInt64 * 0 8576 21 ConfigVariableInt64 * 21 ConfigVariableInt64 * 0 0 806 0 0 0 0 0 0 0 0 0 0

877 26 ConfigVariableList const * 0 8576 26 ConfigVariableList const * 26 ConfigVariableList const * 0 0 878 0 0 0 0 0 0 0 0 0 0

878 24 ConfigVariableList const 0 8832 24 ConfigVariableList const 24 ConfigVariableList const 0 0 809 0 0 0 0 0 0 0 0 0 0

879 20 ConfigVariableList * 0 8576 20 ConfigVariableList * 20 ConfigVariableList * 0 0 809 0 0 0 0 0 0 0 0 0 0

880 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 812 0 0 0 0 0 0 0 0 0 0

881 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 810 0 0 0 0 0 0 0 0 0 0

882 32 ConfigVariableSearchPath const * 0 8576 32 ConfigVariableSearchPath const * 32 ConfigVariableSearchPath const * 0 0 883 0 0 0 0 0 0 0 0 0 0

883 30 ConfigVariableSearchPath const 0 8832 30 ConfigVariableSearchPath const 30 ConfigVariableSearchPath const 0 0 810 0 0 0 0 0 0 0 0 0 0

884 7 Results 0 264192 20 DSearchPath::Results 20 DSearchPath::Results 811 0 0 0 0 0 0 0 0 0 0 0 0

885 9 Results * 0 8576 22 DSearchPath::Results * 22 DSearchPath::Results * 0 0 884 0 0 0 0 0 0 0 0 0 0

886 28 ConfigVariableString const * 0 8576 28 ConfigVariableString const * 28 ConfigVariableString const * 0 0 887 0 0 0 0 0 0 0 0 0 0

887 26 ConfigVariableString const 0 8832 26 ConfigVariableString const 26 ConfigVariableString const 0 0 813 0 0 0 0 0 0 0 0 0 0

888 22 ConfigVariableString * 0 8576 22 ConfigVariableString * 22 ConfigVariableString * 0 0 813 0 0 0 0 0 0 0 0 0 0

889 22 NotifyCategory const * 0 8576 22 NotifyCategory const * 22 NotifyCategory const * 0 0 890 0 0 0 0 0 0 0 0 0 0

890 20 NotifyCategory const 0 8832 20 NotifyCategory const 20 NotifyCategory const 0 0 814 0 0 0 0 0 0 0 0 0 0

891 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

892 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 815 0 0 0 0 0 0 0 0 0 0

893 16 IDecryptStream * 0 8576 16 IDecryptStream * 16 IDecryptStream * 0 0 817 0 0 0 0 0 0 0 0 0 0

894 22 IDecryptStream const * 0 8576 22 IDecryptStream const * 22 IDecryptStream const * 0 0 895 0 0 0 0 0 0 0 0 0 0

895 20 IDecryptStream const 0 8832 20 IDecryptStream const 20 IDecryptStream const 0 0 817 0 0 0 0 0 0 0 0 0 0

896 16 OEncryptStream * 0 8576 16 OEncryptStream * 16 OEncryptStream * 0 0 819 0 0 0 0 0 0 0 0 0 0

897 14 StreamReader * 0 8576 14 StreamReader * 14 StreamReader * 0 0 821 0 0 0 0 0 0 0 0 0 0

898 20 StreamReader const * 0 8576 20 StreamReader const * 20 StreamReader const * 0 0 899 0 0 0 0 0 0 0 0 0 0

899 18 StreamReader const 0 8832 18 StreamReader const 18 StreamReader const 0 0 821 0 0 0 0 0 0 0 0 0 0

900 6 int8_t 0 2105344 6 int8_t 6 int8_t 0 0 901 0 0 0 0 0 0 0 0 0 0

901 11 signed char 0 8202 11 signed char 11 signed char 0 5 0 0 0 0 0 0 0 0 0 0 0

902 7 uint8_t 0 2105344 7 uint8_t 7 uint8_t 0 0 903 0 0 0 0 0 0 0 0 0 0

903 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

904 7 int16_t 0 2105344 7 int16_t 7 int16_t 0 0 905 0 0 0 0 0 0 0 0 0 0

905 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

906 7 int32_t 0 2105344 7 int32_t 7 int32_t 0 0 786 0 0 0 0 0 0 0 0 0 0

907 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 908 0 0 0 0 0 0 0 0 0 0

908 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

909 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 910 0 0 0 0 0 0 0 0 0 0

910 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

911 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 839 0 0 0 0 0 0 0 0 0 0

912 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

913 10 PN_float64 0 2105344 10 PN_float64 10 PN_float64 0 0 802 0 0 0 0 0 0 0 0 0 0

914 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 915 0 0 0 0 0 0 0 0 0 0

915 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 916 0 0 0 0 0 0 0 0 0 0

916 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

917 14 StreamWriter * 0 8576 14 StreamWriter * 14 StreamWriter * 0 0 823 0 0 0 0 0 0 0 0 0 0

918 20 StreamWriter const * 0 8576 20 StreamWriter const * 20 StreamWriter const * 0 0 919 0 0 0 0 0 0 0 0 0 0

919 18 StreamWriter const 0 8832 18 StreamWriter const 18 StreamWriter const 0 0 823 0 0 0 0 0 0 0 0 0 0

920 19 StreamWrapperBase * 0 8576 19 StreamWrapperBase * 19 StreamWrapperBase * 0 0 825 0 0 0 0 0 0 0 0 0 0

921 16 IStreamWrapper * 0 8576 16 IStreamWrapper * 16 IStreamWrapper * 0 0 826 0 0 0 0 0 0 0 0 0 0

922 22 IStreamWrapper const * 0 8576 22 IStreamWrapper const * 22 IStreamWrapper const * 0 0 923 0 0 0 0 0 0 0 0 0 0

923 20 IStreamWrapper const 0 8832 20 IStreamWrapper const 20 IStreamWrapper const 0 0 826 0 0 0 0 0 0 0 0 0 0

924 16 OStreamWrapper * 0 8576 16 OStreamWrapper * 16 OStreamWrapper * 0 0 827 0 0 0 0 0 0 0 0 0 0

925 22 OStreamWrapper const * 0 8576 22 OStreamWrapper const * 22 OStreamWrapper const * 0 0 926 0 0 0 0 0 0 0 0 0 0

926 20 OStreamWrapper const 0 8832 20 OStreamWrapper const 20 OStreamWrapper const 0 0 827 0 0 0 0 0 0 0 0 0 0

927 15 StreamWrapper * 0 8576 15 StreamWrapper * 15 StreamWrapper * 0 0 828 0 0 0 0 0 0 0 0 0 0

928 21 StreamWrapper const * 0 8576 21 StreamWrapper const * 21 StreamWrapper const * 0 0 929 0 0 0 0 0 0 0 0 0 0

929 19 StreamWrapper const 0 8832 19 StreamWrapper const 19 StreamWrapper const 0 0 828 0 0 0 0 0 0 0 0 0 0

0
58
930 4 name 0 2 782 392 0 0 0 0 0 0 0 16 ConfigPage::name 0

931 7 special 0 2 785 393 0 0 0 0 0 0 0 19 ConfigPage::special 0

932 8 implicit 0 2 785 394 0 0 0 0 0 0 0 20 ConfigPage::implicit 0

933 4 sort 0 6 786 396 395 0 0 0 0 0 0 16 ConfigPage::sort 0

934 8 page_seq 0 2 786 397 0 0 0 0 0 0 0 20 ConfigPage::page_seq 0

935 11 trust_level 0 6 786 398 399 0 0 0 0 0 0 23 ConfigPage::trust_level 0

936 9 signature 0 2 782 400 0 0 0 0 0 0 0 21 ConfigPage::signature 0

937 12 declarations 0 66 787 468 0 0 0 0 406 0 0 24 ConfigPage::declarations 0

938 4 page 0 2 789 412 0 0 0 0 0 0 0 23 ConfigDeclaration::page 0

939 8 variable 0 2 790 413 0 0 0 0 0 0 0 27 ConfigDeclaration::variable 0

940 12 declarations 0 66 792 440 0 0 0 0 432 0 0 32 ConfigVariableCore::declarations 0

941 4 name 0 2 782 414 0 0 0 0 0 0 0 24 ConfigVariableCore::name 0

942 4 used 0 2 785 415 0 0 0 0 0 0 0 24 ConfigVariableCore::used 0

943 6 closed 0 2 785 419 0 0 0 0 0 0 0 26 ConfigVariableCore::closed 0

944 11 trust_level 0 2 786 420 0 0 0 0 0 0 0 31 ConfigVariableCore::trust_level 0

945 7 dynamic 0 2 785 421 0 0 0 0 0 0 0 27 ConfigVariableCore::dynamic 0

946 10 value_type 0 6 779 416 423 0 0 0 0 0 0 30 ConfigVariableCore::value_type 0

947 11 description 0 6 782 417 425 0 0 0 0 0 0 31 ConfigVariableCore::description 0

948 13 default_value 0 6 792 422 426 0 0 0 0 0 0 33 ConfigVariableCore::default_value 0

949 10 references 0 66 792 443 0 0 0 0 434 0 0 30 ConfigVariableCore::references 0

950 18 trusted_references 0 66 792 444 0 0 0 0 436 0 0 38 ConfigVariableCore::trusted_references 0

951 17 unique_references 0 66 792 445 0 0 0 0 438 0 0 37 ConfigVariableCore::unique_references 0

952 9 variables 0 66 790 514 0 0 0 0 510 0 0 32 ConfigVariableManager::variables 0

953 4 name 0 2 782 522 0 0 0 0 0 0 0 24 ConfigVariableBase::name 0

954 10 value_type 0 2 779 523 0 0 0 0 0 0 0 30 ConfigVariableBase::value_type 0

955 11 description 0 2 782 524 0 0 0 0 0 0 0 31 ConfigVariableBase::description 0

956 6 closed 0 2 785 526 0 0 0 0 0 0 0 26 ConfigVariableBase::closed 0

957 11 trust_level 0 2 786 527 0 0 0 0 0 0 0 31 ConfigVariableBase::trust_level 0

958 7 dynamic 0 2 785 528 0 0 0 0 0 0 0 27 ConfigVariableBase::dynamic 0

959 5 value 0 6 785 546 545 0 0 0 0 0 0 25 ConfigVariableBool::value 0

960 13 default_value 0 2 785 547 0 0 0 0 0 0 0 33 ConfigVariableBool::default_value 0

961 5 value 0 6 802 557 556 0 0 0 0 0 0 27 ConfigVariableDouble::value 0

962 13 default_value 0 2 802 558 0 0 0 0 0 0 0 35 ConfigVariableDouble::default_value 0

963 5 value 0 6 804 579 578 0 0 0 0 0 0 29 ConfigVariableFilename::value 0

964 13 default_value 0 2 804 580 0 0 0 0 0 0 0 37 ConfigVariableFilename::default_value 0

965 5 value 0 6 786 590 589 0 0 0 0 0 0 24 ConfigVariableInt::value 0

966 13 default_value 0 2 786 591 0 0 0 0 0 0 0 32 ConfigVariableInt::default_value 0

967 5 value 0 6 807 601 600 0 0 0 0 0 0 26 ConfigVariableInt64::value 0

968 13 default_value 0 2 807 602 0 0 0 0 0 0 0 34 ConfigVariableInt64::default_value 0

969 5 value 0 2 811 619 0 0 0 0 0 0 0 31 ConfigVariableSearchPath::value 0

970 13 default_value 0 2 812 620 0 0 0 0 0 0 0 39 ConfigVariableSearchPath::default_value 0

971 11 directories 0 66 804 630 0 0 0 0 628 0 0 37 ConfigVariableSearchPath::directories 0

972 5 value 0 6 782 646 645 0 0 0 0 0 0 27 ConfigVariableString::value 0

973 13 default_value 0 2 783 647 0 0 0 0 0 0 0 35 ConfigVariableString::default_value 0

974 8 fullname 0 2 783 655 0 0 0 0 0 0 0 24 NotifyCategory::fullname 0

975 8 basename 0 2 783 656 0 0 0 0 0 0 0 24 NotifyCategory::basename 0

976 8 severity 0 6 794 657 658 0 0 0 0 0 0 24 NotifyCategory::severity 0

977 8 children 0 66 816 675 0 0 0 0 673 0 0 24 NotifyCategory::children 0

978 9 algorithm 0 2 782 682 0 0 0 0 0 0 0 25 IDecryptStream::algorithm 0

979 10 key_length 0 2 786 683 0 0 0 0 0 0 0 26 IDecryptStream::key_length 0

980 15 iteration_count 0 2 786 684 0 0 0 0 0 0 0 31 IDecryptStream::iteration_count 0

981 9 algorithm 0 6 782 692 689 0 0 0 0 0 0 25 OEncryptStream::algorithm 0

982 10 key_length 0 6 786 693 690 0 0 0 0 0 0 26 OEncryptStream::key_length 0

983 15 iteration_count 0 6 786 694 691 0 0 0 0 0 0 31 OEncryptStream::iteration_count 0

984 7 istream 0 2 822 766 0 0 0 0 0 0 0 12 std::istream 0

985 7 ostream 0 2 824 770 0 0 0 0 0 0 0 12 std::ostream 0

986 9 softspace 0 6 786 758 759 0 0 0 0 0 0 23 StreamWriter::softspace 54
// Python 2 needs this for printing to work correctly.

987 8 iostream 0 2 829 777 0 0 0 0 0 0 0 13 std::iostream 0

7
988 16 get_declarations 0 432 433 36 ConfigVariableCore::get_declarations 0

989 14 get_references 0 434 435 34 ConfigVariableCore::get_references 0

990 22 get_trusted_references 0 436 437 42 ConfigVariableCore::get_trusted_references 0

991 21 get_unique_references 0 438 439 41 ConfigVariableCore::get_unique_references 0

992 13 get_variables 0 510 511 36 ConfigVariableManager::get_variables 0

993 15 get_directories 0 628 629 41 ConfigVariableSearchPath::get_directories 0

994 12 get_children 0 673 674 28 NotifyCategory::get_children 0

