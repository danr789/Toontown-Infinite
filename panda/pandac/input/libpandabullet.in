1565844282
3 3
14 libpandabullet 4 fCJ_ 14 panda3d.bullet 
765
753 19 get_default_up_axis 0 1 0 19 get_default_up_axis 0 1 751 10
/**
 *
 */
39
BulletUpAxis get_default_up_axis(void);

754 18 get_bullet_version 0 1 0 18 get_bullet_version 0 1 752 60
/**
 * Returns the version of the linked Bullet library.
 */
29
int get_bullet_version(void);

755 5 empty 0 4 1519 19 BulletRayHit::empty 0 1 3 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
53
static inline BulletRayHit BulletRayHit::empty(void);

756 8 get_node 0 4 1519 22 BulletRayHit::get_node 0 1 4 10
/**
 *
 */
46
PandaNode *BulletRayHit::get_node(void) const;

757 11 get_hit_pos 0 4 1519 25 BulletRayHit::get_hit_pos 0 1 5 10
/**
 *
 */
46
LPoint3 BulletRayHit::get_hit_pos(void) const;

758 14 get_hit_normal 0 4 1519 28 BulletRayHit::get_hit_normal 0 1 6 10
/**
 *
 */
50
LVector3 BulletRayHit::get_hit_normal(void) const;

759 16 get_hit_fraction 0 4 1519 30 BulletRayHit::get_hit_fraction 0 1 7 10
/**
 *
 */
55
PN_stdfloat BulletRayHit::get_hit_fraction(void) const;

760 14 get_shape_part 0 4 1519 28 BulletRayHit::get_shape_part 0 1 8 10
/**
 *
 */
45
int BulletRayHit::get_shape_part(void) const;

761 18 get_triangle_index 0 4 1519 32 BulletRayHit::get_triangle_index 0 1 9 10
/**
 *
 */
49
int BulletRayHit::get_triangle_index(void) const;

762 12 BulletRayHit 0 4 1519 26 BulletRayHit::BulletRayHit 0 2 1 2 0
117
inline BulletRayHit::BulletRayHit(void) = default;
inline BulletRayHit::BulletRayHit(BulletRayHit const &) = default;

763 13 ~BulletRayHit 0 4 1519 27 BulletRayHit::~BulletRayHit 0 0 0
34
BulletRayHit::~BulletRayHit(void);

764 34 upcast_to_AllHitsRayResultCallback 0 12 1529 58 BulletAllHitsRayResult::upcast_to_AllHitsRayResultCallback 0 1 17 62
upcast from BulletAllHitsRayResult to AllHitsRayResultCallback
109
btCollisionWorld::AllHitsRayResultCallback *BulletAllHitsRayResult::upcast_to_AllHitsRayResultCallback(void);

765 59 downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult 0 8 0 59 downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult 0 0 64
downcast from AllHitsRayResultCallback to BulletAllHitsRayResult
134
BulletAllHitsRayResult *downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult(btCollisionWorld::AllHitsRayResultCallback *this);

766 5 empty 0 4 1529 29 BulletAllHitsRayResult::empty 0 1 10 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
73
static inline BulletAllHitsRayResult BulletAllHitsRayResult::empty(void);

767 12 get_from_pos 0 4 1529 36 BulletAllHitsRayResult::get_from_pos 0 1 11 10
/**
 *
 */
57
LPoint3 BulletAllHitsRayResult::get_from_pos(void) const;

768 10 get_to_pos 0 4 1529 34 BulletAllHitsRayResult::get_to_pos 0 1 12 10
/**
 *
 */
55
LPoint3 BulletAllHitsRayResult::get_to_pos(void) const;

769 8 has_hits 0 4 1529 32 BulletAllHitsRayResult::has_hits 0 1 13 10
/**
 *
 */
50
bool BulletAllHitsRayResult::has_hits(void) const;

770 24 get_closest_hit_fraction 0 4 1529 48 BulletAllHitsRayResult::get_closest_hit_fraction 0 1 14 10
/**
 *
 */
73
PN_stdfloat BulletAllHitsRayResult::get_closest_hit_fraction(void) const;

771 12 get_num_hits 0 4 1529 36 BulletAllHitsRayResult::get_num_hits 0 1 15 10
/**
 *
 */
53
int BulletAllHitsRayResult::get_num_hits(void) const;

772 7 get_hit 0 4 1529 31 BulletAllHitsRayResult::get_hit 0 1 16 10
/**
 *
 */
66
BulletRayHit const BulletAllHitsRayResult::get_hit(int idx) const;

773 0 0 0 0 0 0 0 0
0

774 23 ~BulletAllHitsRayResult 0 4 1529 47 BulletAllHitsRayResult::~BulletAllHitsRayResult 0 0 0
54
BulletAllHitsRayResult::~BulletAllHitsRayResult(void);

775 13 is_polyhedral 0 4 1532 26 BulletShape::is_polyhedral 0 1 18 10
/**
 *
 */
44
bool BulletShape::is_polyhedral(void) const;

776 9 is_convex 0 4 1532 22 BulletShape::is_convex 0 1 19 10
/**
 *
 */
40
bool BulletShape::is_convex(void) const;

777 12 is_convex_2d 0 4 1532 25 BulletShape::is_convex_2d 0 1 20 10
/**
 *
 */
43
bool BulletShape::is_convex_2d(void) const;

778 10 is_concave 0 4 1532 23 BulletShape::is_concave 0 1 21 10
/**
 *
 */
41
bool BulletShape::is_concave(void) const;

779 11 is_infinite 0 4 1532 24 BulletShape::is_infinite 0 1 22 10
/**
 *
 */
42
bool BulletShape::is_infinite(void) const;

780 13 is_non_moving 0 4 1532 26 BulletShape::is_non_moving 0 1 23 10
/**
 *
 */
44
bool BulletShape::is_non_moving(void) const;

781 12 is_soft_body 0 4 1532 25 BulletShape::is_soft_body 0 1 24 10
/**
 *
 */
43
bool BulletShape::is_soft_body(void) const;

782 10 set_margin 0 4 1532 23 BulletShape::set_margin 0 1 25 10
/**
 *
 */
49
void BulletShape::set_margin(PN_stdfloat margin);

783 8 get_name 0 4 1532 21 BulletShape::get_name 0 1 26 10
/**
 *
 */
46
char const *BulletShape::get_name(void) const;

784 10 get_margin 0 4 1532 23 BulletShape::get_margin 0 1 27 10
/**
 *
 */
48
PN_stdfloat BulletShape::get_margin(void) const;

785 16 get_shape_bounds 0 4 1532 29 BulletShape::get_shape_bounds 0 1 28 62
/**
 * Returns the current bounds of this collision shape.
 */
57
BoundingSphere BulletShape::get_shape_bounds(void) const;

786 14 get_class_type 0 4 1532 27 BulletShape::get_class_type 0 1 29 0
52
static TypeHandle BulletShape::get_class_type(void);

787 14 get_class_type 0 4 1539 49 BulletBaseCharacterControllerNode::get_class_type 0 1 30 0
74
static TypeHandle BulletBaseCharacterControllerNode::get_class_type(void);

788 34 ~BulletBaseCharacterControllerNode 0 4 1539 69 BulletBaseCharacterControllerNode::~BulletBaseCharacterControllerNode 0 0 0
76
BulletBaseCharacterControllerNode::~BulletBaseCharacterControllerNode(void);

789 9 add_shape 0 4 1540 25 BulletBodyNode::add_shape 0 1 31 21
// Shapes

/**
 *
 */
114
void BulletBodyNode::add_shape(BulletShape *shape, TransformState const *xform = TransformState::make_identity());

790 12 remove_shape 0 4 1540 28 BulletBodyNode::remove_shape 0 1 32 10
/**
 *
 */
54
void BulletBodyNode::remove_shape(BulletShape *shape);

791 14 get_num_shapes 0 4 1540 30 BulletBodyNode::get_num_shapes 0 1 33 10
/**
 *
 */
47
int BulletBodyNode::get_num_shapes(void) const;

792 9 get_shape 0 4 1540 25 BulletBodyNode::get_shape 0 1 34 10
/**
 *
 */
54
BulletShape *BulletBodyNode::get_shape(int idx) const;

793 13 get_shape_pos 0 4 1540 29 BulletBodyNode::get_shape_pos 0 1 35 10
/**
 *
 */
53
LPoint3 BulletBodyNode::get_shape_pos(int idx) const;

794 13 get_shape_mat 0 4 1540 29 BulletBodyNode::get_shape_mat 0 1 36 10
/**
 *
 */
54
LMatrix4 BulletBodyNode::get_shape_mat(int idx) const;

795 19 get_shape_transform 0 4 1540 35 BulletBodyNode::get_shape_transform 0 1 37 10
/**
 *
 */
84
ConstPointerTo< TransformState > BulletBodyNode::get_shape_transform(int idx) const;

796 16 get_shape_bounds 0 4 1540 32 BulletBodyNode::get_shape_bounds 0 1 38 81
/**
 * Returns the current bounds of all collision shapes owned by this body.
 */
60
BoundingSphere BulletBodyNode::get_shape_bounds(void) const;

797 32 add_shapes_from_collision_solids 0 4 1540 48 BulletBodyNode::add_shapes_from_collision_solids 0 1 39 10
/**
 *
 */
76
void BulletBodyNode::add_shapes_from_collision_solids(CollisionNode *cnode);

798 9 is_static 0 4 1540 25 BulletBodyNode::is_static 0 1 40 60
// Static and kinematic

// Static and kinematic

/**
 *
 */
43
bool BulletBodyNode::is_static(void) const;

799 12 is_kinematic 0 4 1540 28 BulletBodyNode::is_kinematic 0 1 41 10
/**
 *
 */
46
bool BulletBodyNode::is_kinematic(void) const;

800 10 set_static 0 4 1540 26 BulletBodyNode::set_static 0 1 42 10
/**
 *
 */
51
inline void BulletBodyNode::set_static(bool value);

801 13 set_kinematic 0 4 1540 29 BulletBodyNode::set_kinematic 0 1 43 10
/**
 *
 */
54
inline void BulletBodyNode::set_kinematic(bool value);

802 21 set_into_collide_mask 0 4 1540 37 BulletBodyNode::set_into_collide_mask 0 1 44 23
// Contacts

/**
 *
 */
68
inline void BulletBodyNode::set_into_collide_mask(CollideMask mask);

803 17 notify_collisions 0 4 1540 33 BulletBodyNode::notify_collisions 0 1 45 10
/**
 *
 */
58
inline void BulletBodyNode::notify_collisions(bool value);

804 19 notifies_collisions 0 4 1540 35 BulletBodyNode::notifies_collisions 0 1 46 10
/**
 *
 */
60
inline bool BulletBodyNode::notifies_collisions(void) const;

805 22 set_collision_response 0 4 1540 38 BulletBodyNode::set_collision_response 0 1 47 10
/**
 *
 */
63
inline void BulletBodyNode::set_collision_response(bool value);

806 22 get_collision_response 0 4 1540 38 BulletBodyNode::get_collision_response 0 1 48 10
/**
 *
 */
63
inline bool BulletBodyNode::get_collision_response(void) const;

807 20 check_collision_with 0 4 1540 36 BulletBodyNode::check_collision_with 0 1 49 10
/**
 *
 */
59
bool BulletBodyNode::check_collision_with(PandaNode *node);

808 20 has_contact_response 0 4 1540 36 BulletBodyNode::has_contact_response 0 1 50 10
/**
 *
 */
54
bool BulletBodyNode::has_contact_response(void) const;

809 32 get_contact_processing_threshold 0 4 1540 48 BulletBodyNode::get_contact_processing_threshold 0 1 51 10
/**
 *
 */
73
PN_stdfloat BulletBodyNode::get_contact_processing_threshold(void) const;

810 32 set_contact_processing_threshold 0 4 1540 48 BulletBodyNode::set_contact_processing_threshold 0 1 52 106
/**
 * The constraint solver can discard solving contacts, if the distance is
 * above this threshold.
 */
77
void BulletBodyNode::set_contact_processing_threshold(PN_stdfloat threshold);

811 9 is_active 0 4 1540 25 BulletBodyNode::is_active 0 1 53 44
// Deactivation

// Deactivation

/**
 *
 */
43
bool BulletBodyNode::is_active(void) const;

812 10 set_active 0 4 1540 26 BulletBodyNode::set_active 0 1 54 10
/**
 *
 */
65
void BulletBodyNode::set_active(bool active, bool force = false);

813 12 force_active 0 4 1540 28 BulletBodyNode::force_active 0 1 55 10
/**
 *
 */
47
void BulletBodyNode::force_active(bool active);

814 21 set_deactivation_time 0 4 1540 37 BulletBodyNode::set_deactivation_time 0 1 56 10
/**
 *
 */
59
void BulletBodyNode::set_deactivation_time(PN_stdfloat dt);

815 21 get_deactivation_time 0 4 1540 37 BulletBodyNode::get_deactivation_time 0 1 57 10
/**
 *
 */
62
PN_stdfloat BulletBodyNode::get_deactivation_time(void) const;

816 24 set_deactivation_enabled 0 4 1540 40 BulletBodyNode::set_deactivation_enabled 0 1 58 163
/**
 * If true, this object will be deactivated after a certain amount of time has
 * passed without movement.  If false, the object will always remain active.
 */
60
void BulletBodyNode::set_deactivation_enabled(bool enabled);

817 23 is_deactivation_enabled 0 4 1540 39 BulletBodyNode::is_deactivation_enabled 0 1 59 10
/**
 *
 */
57
bool BulletBodyNode::is_deactivation_enabled(void) const;

818 17 set_debug_enabled 0 4 1540 33 BulletBodyNode::set_debug_enabled 0 1 60 180
// Debug Visualisation

// Debug Visualisation

/**
 * Enables or disables the debug visualisation for this collision object.  By
 * default the debug visualisation is enabled.
 */
66
inline void BulletBodyNode::set_debug_enabled(bool const enabled);

819 16 is_debug_enabled 0 4 1540 32 BulletBodyNode::is_debug_enabled 0 1 61 141
/**
 * Returns TRUE if the debug visualisation is enabled for this collision
 * object, and FALSE if the debug visualisation is disabled.
 */
57
inline bool BulletBodyNode::is_debug_enabled(void) const;

820 15 get_restitution 0 4 1540 31 BulletBodyNode::get_restitution 0 1 62 68
// Friction and Restitution

// Friction and Restitution

/**
 *
 */
56
PN_stdfloat BulletBodyNode::get_restitution(void) const;

821 15 set_restitution 0 4 1540 31 BulletBodyNode::set_restitution 0 1 63 10
/**
 *
 */
62
void BulletBodyNode::set_restitution(PN_stdfloat restitution);

822 12 get_friction 0 4 1540 28 BulletBodyNode::get_friction 0 1 64 10
/**
 *
 */
53
PN_stdfloat BulletBodyNode::get_friction(void) const;

823 12 set_friction 0 4 1540 28 BulletBodyNode::set_friction 0 1 65 10
/**
 *
 */
56
void BulletBodyNode::set_friction(PN_stdfloat friction);

824 24 has_anisotropic_friction 0 4 1540 40 BulletBodyNode::has_anisotropic_friction 0 1 66 10
/**
 *
 */
58
bool BulletBodyNode::has_anisotropic_friction(void) const;

825 24 set_anisotropic_friction 0 4 1540 40 BulletBodyNode::set_anisotropic_friction 0 1 67 10
/**
 *
 */
73
void BulletBodyNode::set_anisotropic_friction(LVecBase3 const &friction);

826 24 get_anisotropic_friction 0 4 1540 40 BulletBodyNode::get_anisotropic_friction 0 1 68 10
/**
 *
 */
63
LVecBase3 BulletBodyNode::get_anisotropic_friction(void) const;

827 27 get_ccd_swept_sphere_radius 0 4 1540 43 BulletBodyNode::get_ccd_swept_sphere_radius 0 1 69 26
// CCD

// CCD

/**
 *
 */
68
PN_stdfloat BulletBodyNode::get_ccd_swept_sphere_radius(void) const;

828 24 get_ccd_motion_threshold 0 4 1540 40 BulletBodyNode::get_ccd_motion_threshold 0 1 70 10
/**
 *
 */
65
PN_stdfloat BulletBodyNode::get_ccd_motion_threshold(void) const;

829 27 set_ccd_swept_sphere_radius 0 4 1540 43 BulletBodyNode::set_ccd_swept_sphere_radius 0 1 71 10
/**
 *
 */
69
void BulletBodyNode::set_ccd_swept_sphere_radius(PN_stdfloat radius);

830 24 set_ccd_motion_threshold 0 4 1540 40 BulletBodyNode::set_ccd_motion_threshold 0 1 72 10
/**
 *
 */
69
void BulletBodyNode::set_ccd_motion_threshold(PN_stdfloat threshold);

831 19 set_transform_dirty 0 4 1540 35 BulletBodyNode::set_transform_dirty 0 1 73 228
// Special

/**
 * This method enforces an update of the Bullet transform, that is copies the
 * scene graph transform to the Bullet transform.  This is achieved by alling
 * the protected PandaNode hook 'transform_changed'.
 */
47
void BulletBodyNode::set_transform_dirty(void);

832 0 0 0 0 0 0 0 0
0

833 0 0 0 0 0 0 0 0
0

834 0 0 0 0 0 0 0 0
0

835 0 0 0 0 0 0 0 0
0

836 14 get_class_type 0 4 1540 30 BulletBodyNode::get_class_type 0 1 74 0
55
static TypeHandle BulletBodyNode::get_class_type(void);

837 14 BulletBoxShape 0 4 1547 30 BulletBoxShape::BulletBoxShape 0 2 75 76 62
/**
 * Only used by make_from_bam.
 */

/**
 *
 */

/**
 *
 */
130
explicit BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents);
BulletBoxShape::BulletBoxShape(BulletBoxShape const &copy);

838 31 get_half_extents_without_margin 0 4 1547 47 BulletBoxShape::get_half_extents_without_margin 0 1 77 10
/**
 *
 */
70
LVecBase3 BulletBoxShape::get_half_extents_without_margin(void) const;

839 28 get_half_extents_with_margin 0 4 1547 44 BulletBoxShape::get_half_extents_with_margin 0 1 78 10
/**
 *
 */
67
LVecBase3 BulletBoxShape::get_half_extents_with_margin(void) const;

840 15 make_from_solid 0 4 1547 31 BulletBoxShape::make_from_solid 0 1 79 10
/**
 *
 */
82
static BulletBoxShape *BulletBoxShape::make_from_solid(CollisionBox const *solid);

841 14 get_class_type 0 4 1547 30 BulletBoxShape::get_class_type 0 1 80 0
55
static TypeHandle BulletBoxShape::get_class_type(void);

842 18 BulletCapsuleShape 0 4 1548 38 BulletCapsuleShape::BulletCapsuleShape 0 2 81 82 62
/**
 * Only used by make_from_bam.
 */

/**
 *
 */

/**
 *
 */
186
explicit BulletCapsuleShape::BulletCapsuleShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
BulletCapsuleShape::BulletCapsuleShape(BulletCapsuleShape const &copy);

843 15 make_from_solid 0 4 1548 35 BulletCapsuleShape::make_from_solid 0 1 83 130
/**
 * Constructs a new BulletCapsuleShape using the information from a
 * CollisionCapsule from the builtin collision system.
 */
94
static BulletCapsuleShape *BulletCapsuleShape::make_from_solid(CollisionCapsule const *solid);

844 10 get_radius 0 4 1548 30 BulletCapsuleShape::get_radius 0 1 84 70
/**
 * Returns the radius that was used to construct this capsule.
 */
62
inline PN_stdfloat BulletCapsuleShape::get_radius(void) const;

845 15 get_half_height 0 4 1548 35 BulletCapsuleShape::get_half_height 0 1 85 81
/**
 * Returns half of get_height().
 * @deprecated see get_height() instead.
 */
67
inline PN_stdfloat BulletCapsuleShape::get_half_height(void) const;

846 10 get_height 0 4 1548 30 BulletCapsuleShape::get_height 0 0 70
/**
 * Returns the height that was used to construct this capsule.
 */
62
inline PN_stdfloat BulletCapsuleShape::get_height(void) const;

847 14 get_class_type 0 4 1548 34 BulletCapsuleShape::get_class_type 0 1 86 0
59
static TypeHandle BulletCapsuleShape::get_class_type(void);

848 29 BulletCharacterControllerNode 0 4 1549 60 BulletCharacterControllerNode::BulletCharacterControllerNode 0 1 87 10
/**
 *
 */
147
explicit BulletCharacterControllerNode::BulletCharacterControllerNode(BulletShape *shape, PN_stdfloat step_height, char const *name = "character");

849 19 set_linear_movement 0 4 1549 50 BulletCharacterControllerNode::set_linear_movement 0 1 88 10
/**
 *
 */
97
void BulletCharacterControllerNode::set_linear_movement(LVector3 const &velocity, bool is_local);

850 20 set_angular_movement 0 4 1549 51 BulletCharacterControllerNode::set_angular_movement 0 1 89 10
/**
 *
 */
76
void BulletCharacterControllerNode::set_angular_movement(PN_stdfloat omega);

851 9 get_shape 0 4 1549 40 BulletCharacterControllerNode::get_shape 0 1 90 10
/**
 *
 */
66
BulletShape *BulletCharacterControllerNode::get_shape(void) const;

852 11 set_gravity 0 4 1549 42 BulletCharacterControllerNode::set_gravity 0 1 91 10
/**
 *
 */
69
void BulletCharacterControllerNode::set_gravity(PN_stdfloat gravity);

853 11 get_gravity 0 4 1549 42 BulletCharacterControllerNode::get_gravity 0 1 92 10
/**
 *
 */
67
PN_stdfloat BulletCharacterControllerNode::get_gravity(void) const;

854 14 set_fall_speed 0 4 1549 45 BulletCharacterControllerNode::set_fall_speed 0 1 93 10
/**
 *
 */
75
void BulletCharacterControllerNode::set_fall_speed(PN_stdfloat fall_speed);

855 14 set_jump_speed 0 4 1549 45 BulletCharacterControllerNode::set_jump_speed 0 1 94 10
/**
 *
 */
75
void BulletCharacterControllerNode::set_jump_speed(PN_stdfloat jump_speed);

856 19 set_max_jump_height 0 4 1549 50 BulletCharacterControllerNode::set_max_jump_height 0 1 95 10
/**
 *
 */
85
void BulletCharacterControllerNode::set_max_jump_height(PN_stdfloat max_jump_height);

857 13 set_max_slope 0 4 1549 44 BulletCharacterControllerNode::set_max_slope 0 1 96 10
/**
 *
 */
73
void BulletCharacterControllerNode::set_max_slope(PN_stdfloat max_slope);

858 13 get_max_slope 0 4 1549 44 BulletCharacterControllerNode::get_max_slope 0 1 97 10
/**
 *
 */
69
PN_stdfloat BulletCharacterControllerNode::get_max_slope(void) const;

859 24 set_use_ghost_sweep_test 0 4 1549 55 BulletCharacterControllerNode::set_use_ghost_sweep_test 0 1 98 10
/**
 *
 */
73
void BulletCharacterControllerNode::set_use_ghost_sweep_test(bool value);

860 12 is_on_ground 0 4 1549 43 BulletCharacterControllerNode::is_on_ground 0 1 99 10
/**
 *
 */
61
bool BulletCharacterControllerNode::is_on_ground(void) const;

861 8 can_jump 0 4 1549 39 BulletCharacterControllerNode::can_jump 0 1 100 10
/**
 *
 */
57
bool BulletCharacterControllerNode::can_jump(void) const;

862 7 do_jump 0 4 1549 38 BulletCharacterControllerNode::do_jump 0 1 101 10
/**
 *
 */
50
void BulletCharacterControllerNode::do_jump(void);

863 14 get_class_type 0 4 1549 45 BulletCharacterControllerNode::get_class_type 0 1 102 0
70
static TypeHandle BulletCharacterControllerNode::get_class_type(void);

864 34 upcast_to_ClosestRayResultCallback 0 12 1550 61 BulletClosestHitRayResult::upcast_to_ClosestRayResultCallback 0 1 114 65
upcast from BulletClosestHitRayResult to ClosestRayResultCallback
112
btCollisionWorld::ClosestRayResultCallback *BulletClosestHitRayResult::upcast_to_ClosestRayResultCallback(void);

865 62 downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult 0 8 0 62 downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult 0 0 67
downcast from ClosestRayResultCallback to BulletClosestHitRayResult
140
BulletClosestHitRayResult *downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult(btCollisionWorld::ClosestRayResultCallback *this);

866 5 empty 0 4 1550 32 BulletClosestHitRayResult::empty 0 1 104 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
79
static inline BulletClosestHitRayResult BulletClosestHitRayResult::empty(void);

867 12 get_from_pos 0 4 1550 39 BulletClosestHitRayResult::get_from_pos 0 1 105 10
/**
 *
 */
60
LPoint3 BulletClosestHitRayResult::get_from_pos(void) const;

868 10 get_to_pos 0 4 1550 37 BulletClosestHitRayResult::get_to_pos 0 1 106 10
/**
 *
 */
58
LPoint3 BulletClosestHitRayResult::get_to_pos(void) const;

869 7 has_hit 0 4 1550 34 BulletClosestHitRayResult::has_hit 0 1 107 10
/**
 *
 */
52
bool BulletClosestHitRayResult::has_hit(void) const;

870 8 get_node 0 4 1550 35 BulletClosestHitRayResult::get_node 0 1 108 10
/**
 *
 */
59
PandaNode *BulletClosestHitRayResult::get_node(void) const;

871 11 get_hit_pos 0 4 1550 38 BulletClosestHitRayResult::get_hit_pos 0 1 109 10
/**
 *
 */
59
LPoint3 BulletClosestHitRayResult::get_hit_pos(void) const;

872 14 get_hit_normal 0 4 1550 41 BulletClosestHitRayResult::get_hit_normal 0 1 110 10
/**
 *
 */
63
LVector3 BulletClosestHitRayResult::get_hit_normal(void) const;

873 16 get_hit_fraction 0 4 1550 43 BulletClosestHitRayResult::get_hit_fraction 0 1 111 10
/**
 *
 */
68
PN_stdfloat BulletClosestHitRayResult::get_hit_fraction(void) const;

874 14 get_shape_part 0 4 1550 41 BulletClosestHitRayResult::get_shape_part 0 1 112 10
/**
 *
 */
58
int BulletClosestHitRayResult::get_shape_part(void) const;

875 18 get_triangle_index 0 4 1550 45 BulletClosestHitRayResult::get_triangle_index 0 1 113 10
/**
 *
 */
62
int BulletClosestHitRayResult::get_triangle_index(void) const;

876 25 BulletClosestHitRayResult 0 4 1550 52 BulletClosestHitRayResult::BulletClosestHitRayResult 0 1 103 10
/**
 *
 */
105
inline BulletClosestHitRayResult::BulletClosestHitRayResult(BulletClosestHitRayResult const &) = default;

877 26 ~BulletClosestHitRayResult 0 4 1550 53 BulletClosestHitRayResult::~BulletClosestHitRayResult 0 0 0
60
BulletClosestHitRayResult::~BulletClosestHitRayResult(void);

878 37 upcast_to_ClosestConvexResultCallback 0 12 1552 66 BulletClosestHitSweepResult::upcast_to_ClosestConvexResultCallback 0 1 124 70
upcast from BulletClosestHitSweepResult to ClosestConvexResultCallback
120
btCollisionWorld::ClosestConvexResultCallback *BulletClosestHitSweepResult::upcast_to_ClosestConvexResultCallback(void);

879 67 downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult 0 8 0 67 downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult 0 0 72
downcast from ClosestConvexResultCallback to BulletClosestHitSweepResult
150
BulletClosestHitSweepResult *downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult(btCollisionWorld::ClosestConvexResultCallback *this);

880 5 empty 0 4 1552 34 BulletClosestHitSweepResult::empty 0 1 116 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
83
static inline BulletClosestHitSweepResult BulletClosestHitSweepResult::empty(void);

881 12 get_from_pos 0 4 1552 41 BulletClosestHitSweepResult::get_from_pos 0 1 117 10
/**
 *
 */
62
LPoint3 BulletClosestHitSweepResult::get_from_pos(void) const;

882 10 get_to_pos 0 4 1552 39 BulletClosestHitSweepResult::get_to_pos 0 1 118 10
/**
 *
 */
60
LPoint3 BulletClosestHitSweepResult::get_to_pos(void) const;

883 7 has_hit 0 4 1552 36 BulletClosestHitSweepResult::has_hit 0 1 119 10
/**
 *
 */
54
bool BulletClosestHitSweepResult::has_hit(void) const;

884 8 get_node 0 4 1552 37 BulletClosestHitSweepResult::get_node 0 1 120 10
/**
 *
 */
61
PandaNode *BulletClosestHitSweepResult::get_node(void) const;

885 11 get_hit_pos 0 4 1552 40 BulletClosestHitSweepResult::get_hit_pos 0 1 121 10
/**
 *
 */
61
LPoint3 BulletClosestHitSweepResult::get_hit_pos(void) const;

886 14 get_hit_normal 0 4 1552 43 BulletClosestHitSweepResult::get_hit_normal 0 1 122 10
/**
 *
 */
65
LVector3 BulletClosestHitSweepResult::get_hit_normal(void) const;

887 16 get_hit_fraction 0 4 1552 45 BulletClosestHitSweepResult::get_hit_fraction 0 1 123 10
/**
 *
 */
70
PN_stdfloat BulletClosestHitSweepResult::get_hit_fraction(void) const;

888 27 BulletClosestHitSweepResult 0 4 1552 56 BulletClosestHitSweepResult::BulletClosestHitSweepResult 0 1 115 10
/**
 *
 */
111
inline BulletClosestHitSweepResult::BulletClosestHitSweepResult(BulletClosestHitSweepResult const &) = default;

889 28 ~BulletClosestHitSweepResult 0 4 1552 57 BulletClosestHitSweepResult::~BulletClosestHitSweepResult 0 0 0
64
BulletClosestHitSweepResult::~BulletClosestHitSweepResult(void);

890 15 BulletConeShape 0 4 1554 32 BulletConeShape::BulletConeShape 0 2 125 126 62
/**
 * Only used by make_from_bam.
 */

/**
 *
 */

/**
 *
 */
171
explicit BulletConeShape::BulletConeShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
BulletConeShape::BulletConeShape(BulletConeShape const &copy);

891 10 get_radius 0 4 1554 27 BulletConeShape::get_radius 0 1 127 67
/**
 * Returns the radius that was passed into the constructor.
 */
59
inline PN_stdfloat BulletConeShape::get_radius(void) const;

892 10 get_height 0 4 1554 27 BulletConeShape::get_height 0 1 128 67
/**
 * Returns the height that was passed into the constructor.
 */
59
inline PN_stdfloat BulletConeShape::get_height(void) const;

893 14 get_class_type 0 4 1554 31 BulletConeShape::get_class_type 0 1 129 0
56
static TypeHandle BulletConeShape::get_class_type(void);

894 16 get_rigid_body_a 0 4 1555 34 BulletConstraint::get_rigid_body_a 0 1 130 10
/**
 *
 */
62
BulletRigidBodyNode *BulletConstraint::get_rigid_body_a(void);

895 16 get_rigid_body_b 0 4 1555 34 BulletConstraint::get_rigid_body_b 0 1 131 10
/**
 *
 */
62
BulletRigidBodyNode *BulletConstraint::get_rigid_body_b(void);

896 15 enable_feedback 0 4 1555 33 BulletConstraint::enable_feedback 0 1 132 10
/**
 *
 */
51
void BulletConstraint::enable_feedback(bool value);

897 19 set_debug_draw_size 0 4 1555 37 BulletConstraint::set_debug_draw_size 0 1 133 10
/**
 *
 */
61
void BulletConstraint::set_debug_draw_size(PN_stdfloat size);

898 19 get_debug_draw_size 0 4 1555 37 BulletConstraint::get_debug_draw_size 0 1 134 10
/**
 *
 */
56
PN_stdfloat BulletConstraint::get_debug_draw_size(void);

899 19 get_applied_impulse 0 4 1555 37 BulletConstraint::get_applied_impulse 0 1 135 10
/**
 *
 */
62
PN_stdfloat BulletConstraint::get_applied_impulse(void) const;

900 22 set_breaking_threshold 0 4 1555 40 BulletConstraint::set_breaking_threshold 0 1 136 212
/**
 * Sets the applied impulse limit for breaking the constraint.  If the limit
 * is exceeded the constraint will be disabled.  Disabled constraints are not
 * removed from the world, and can be re-enabled.
 */
76
inline void BulletConstraint::set_breaking_threshold(PN_stdfloat threshold);

901 22 get_breaking_threshold 0 4 1555 40 BulletConstraint::get_breaking_threshold 0 1 137 73
/**
 * Returns the applied impluse limit for breaking the constraint.
 */
72
inline PN_stdfloat BulletConstraint::get_breaking_threshold(void) const;

902 11 set_enabled 0 4 1555 29 BulletConstraint::set_enabled 0 1 138 10
/**
 *
 */
56
inline void BulletConstraint::set_enabled(bool enabled);

903 10 is_enabled 0 4 1555 28 BulletConstraint::is_enabled 0 1 139 53
/**
 * Returns TRUE if the constraint is enabled.
 */
53
inline bool BulletConstraint::is_enabled(void) const;

904 9 set_param 0 4 1555 27 BulletConstraint::set_param 0 1 140 10
/**
 *
 */
106
void BulletConstraint::set_param(BulletConstraint::ConstraintParam num, PN_stdfloat value, int axis = -1);

905 9 get_param 0 4 1555 27 BulletConstraint::get_param 0 1 141 10
/**
 *
 */
94
PN_stdfloat BulletConstraint::get_param(BulletConstraint::ConstraintParam num, int axis = -1);

906 19 BulletRigidBodyNode 0 4 1559 40 BulletRigidBodyNode::BulletRigidBodyNode 0 1 143 138
/**
 *
 */

/**
 * Do not call the copy constructor directly; instead, use make_copy() or
 * copy_subgraph() to make a copy of a node.
 */
78
explicit BulletRigidBodyNode::BulletRigidBodyNode(char const *name = "rigid");

907 8 set_mass 0 4 1559 29 BulletRigidBodyNode::set_mass 0 1 144 295
// Mass & inertia

// Mass & inertia

/**
 * Sets the mass of a rigid body.  This also modifies the inertia, which is
 * automatically computed from the shape of the body.  Setting a value of zero
 * for mass will make the body static.  A value of zero can be considered an
 * infinite mass.
 */
53
void BulletRigidBodyNode::set_mass(PN_stdfloat mass);

908 8 get_mass 0 4 1559 29 BulletRigidBodyNode::get_mass 0 1 145 128
/**
 * Returns the total mass of a rigid body.  A value of zero means that the
 * body is staic, i.e.  has an infinite mass.
 */
54
PN_stdfloat BulletRigidBodyNode::get_mass(void) const;

909 12 get_inv_mass 0 4 1559 33 BulletRigidBodyNode::get_inv_mass 0 1 146 52
/**
 * Returns the inverse mass of a rigid body.
 */
58
PN_stdfloat BulletRigidBodyNode::get_inv_mass(void) const;

910 11 set_inertia 0 4 1559 32 BulletRigidBodyNode::set_inertia 0 1 147 591
/**
 * Sets the inertia of a rigid body.  Inertia is given as a three-component
 * vector.  A component value of zero means infinite inertia along this
 * direction.  Setting the intertia will override the value which is
 * automatically calculated from the rigid bodies shape.  However, it is
 * possible that automatic calculation of intertia is trigger after calling
 * this method, and thus overwriting the explicitly set value again.  This
 * happens when: (a) the mass is set after the inertia.  (b) a shape is added
 * or removed from the body.  (c) the scale of the body changed.
 */
64
void BulletRigidBodyNode::set_inertia(LVecBase3 const &inertia);

911 11 get_inertia 0 4 1559 32 BulletRigidBodyNode::get_inertia 0 1 148 174
/**
 * Returns the inertia of the rigid body.  Inertia is given as a three
 * component vector.  A component value of zero means infinite inertia along
 * this direction.
 */
54
LVector3 BulletRigidBodyNode::get_inertia(void) const;

912 26 get_inv_inertia_diag_local 0 4 1559 47 BulletRigidBodyNode::get_inv_inertia_diag_local 0 1 149 10
/**
 *
 */
69
LVector3 BulletRigidBodyNode::get_inv_inertia_diag_local(void) const;

913 28 get_inv_inertia_tensor_world 0 4 1559 49 BulletRigidBodyNode::get_inv_inertia_tensor_world 0 1 150 10
/**
 *
 */
71
LMatrix3 BulletRigidBodyNode::get_inv_inertia_tensor_world(void) const;

914 19 get_linear_velocity 0 4 1559 40 BulletRigidBodyNode::get_linear_velocity 0 1 151 36
// Velocity

// Velocity

/**
 *
 */
62
LVector3 BulletRigidBodyNode::get_linear_velocity(void) const;

915 20 get_angular_velocity 0 4 1559 41 BulletRigidBodyNode::get_angular_velocity 0 1 152 10
/**
 *
 */
63
LVector3 BulletRigidBodyNode::get_angular_velocity(void) const;

916 19 set_linear_velocity 0 4 1559 40 BulletRigidBodyNode::set_linear_velocity 0 1 153 10
/**
 *
 */
72
void BulletRigidBodyNode::set_linear_velocity(LVector3 const &velocity);

917 20 set_angular_velocity 0 4 1559 41 BulletRigidBodyNode::set_angular_velocity 0 1 154 10
/**
 *
 */
73
void BulletRigidBodyNode::set_angular_velocity(LVector3 const &velocity);

918 18 get_linear_damping 0 4 1559 39 BulletRigidBodyNode::get_linear_damping 0 1 155 34
// Damping

// Damping

/**
 *
 */
64
PN_stdfloat BulletRigidBodyNode::get_linear_damping(void) const;

919 19 get_angular_damping 0 4 1559 40 BulletRigidBodyNode::get_angular_damping 0 1 156 10
/**
 *
 */
65
PN_stdfloat BulletRigidBodyNode::get_angular_damping(void) const;

920 18 set_linear_damping 0 4 1559 39 BulletRigidBodyNode::set_linear_damping 0 1 157 10
/**
 *
 */
64
void BulletRigidBodyNode::set_linear_damping(PN_stdfloat value);

921 19 set_angular_damping 0 4 1559 40 BulletRigidBodyNode::set_angular_damping 0 1 158 10
/**
 *
 */
65
void BulletRigidBodyNode::set_angular_damping(PN_stdfloat value);

922 12 clear_forces 0 4 1559 33 BulletRigidBodyNode::clear_forces 0 1 159 21
// Forces

/**
 *
 */
45
void BulletRigidBodyNode::clear_forces(void);

923 11 apply_force 0 4 1559 32 BulletRigidBodyNode::apply_force 0 1 160 10
/**
 *
 */
81
void BulletRigidBodyNode::apply_force(LVector3 const &force, LPoint3 const &pos);

924 19 apply_central_force 0 4 1559 40 BulletRigidBodyNode::apply_central_force 0 1 161 10
/**
 *
 */
69
void BulletRigidBodyNode::apply_central_force(LVector3 const &force);

925 13 apply_impulse 0 4 1559 34 BulletRigidBodyNode::apply_impulse 0 1 162 10
/**
 *
 */
85
void BulletRigidBodyNode::apply_impulse(LVector3 const &impulse, LPoint3 const &pos);

926 21 apply_central_impulse 0 4 1559 42 BulletRigidBodyNode::apply_central_impulse 0 1 163 10
/**
 *
 */
73
void BulletRigidBodyNode::apply_central_impulse(LVector3 const &impulse);

927 12 apply_torque 0 4 1559 33 BulletRigidBodyNode::apply_torque 0 1 164 10
/**
 *
 */
63
void BulletRigidBodyNode::apply_torque(LVector3 const &torque);

928 20 apply_torque_impulse 0 4 1559 41 BulletRigidBodyNode::apply_torque_impulse 0 1 165 10
/**
 *
 */
71
void BulletRigidBodyNode::apply_torque_impulse(LVector3 const &torque);

929 15 get_total_force 0 4 1559 36 BulletRigidBodyNode::get_total_force 0 1 166 10
/**
 *
 */
58
LVector3 BulletRigidBodyNode::get_total_force(void) const;

930 16 get_total_torque 0 4 1559 37 BulletRigidBodyNode::get_total_torque 0 1 167 10
/**
 *
 */
59
LVector3 BulletRigidBodyNode::get_total_torque(void) const;

931 26 get_linear_sleep_threshold 0 4 1559 47 BulletRigidBodyNode::get_linear_sleep_threshold 0 1 168 66
// Deactivation thresholds

// Deactivation thresholds

/**
 *
 */
72
PN_stdfloat BulletRigidBodyNode::get_linear_sleep_threshold(void) const;

932 27 get_angular_sleep_threshold 0 4 1559 48 BulletRigidBodyNode::get_angular_sleep_threshold 0 1 169 10
/**
 *
 */
73
PN_stdfloat BulletRigidBodyNode::get_angular_sleep_threshold(void) const;

933 26 set_linear_sleep_threshold 0 4 1559 47 BulletRigidBodyNode::set_linear_sleep_threshold 0 1 170 10
/**
 *
 */
76
void BulletRigidBodyNode::set_linear_sleep_threshold(PN_stdfloat threshold);

934 27 set_angular_sleep_threshold 0 4 1559 48 BulletRigidBodyNode::set_angular_sleep_threshold 0 1 171 10
/**
 *
 */
77
void BulletRigidBodyNode::set_angular_sleep_threshold(PN_stdfloat threshold);

935 11 set_gravity 0 4 1559 32 BulletRigidBodyNode::set_gravity 0 1 172 34
// Gravity

// Gravity

/**
 *
 */
63
void BulletRigidBodyNode::set_gravity(LVector3 const &gravity);

936 11 get_gravity 0 4 1559 32 BulletRigidBodyNode::get_gravity 0 1 173 10
/**
 *
 */
54
LVector3 BulletRigidBodyNode::get_gravity(void) const;

937 17 get_linear_factor 0 4 1559 38 BulletRigidBodyNode::get_linear_factor 0 1 174 54
// Restrict movement

// Restrict movement

/**
 *
 */
60
LVector3 BulletRigidBodyNode::get_linear_factor(void) const;

938 18 get_angular_factor 0 4 1559 39 BulletRigidBodyNode::get_angular_factor 0 1 175 10
/**
 *
 */
61
LVector3 BulletRigidBodyNode::get_angular_factor(void) const;

939 17 set_linear_factor 0 4 1559 38 BulletRigidBodyNode::set_linear_factor 0 1 176 10
/**
 *
 */
68
void BulletRigidBodyNode::set_linear_factor(LVector3 const &factor);

940 18 set_angular_factor 0 4 1559 39 BulletRigidBodyNode::set_angular_factor 0 1 177 10
/**
 *
 */
69
void BulletRigidBodyNode::set_angular_factor(LVector3 const &factor);

941 15 pick_dirty_flag 0 4 1559 36 BulletRigidBodyNode::pick_dirty_flag 0 1 178 135
// Special

/**
 * Returns TRUE if the transform of the rigid body has changed at least once
 * since the last call to this method.
 */
48
bool BulletRigidBodyNode::pick_dirty_flag(void);

942 14 get_class_type 0 4 1559 35 BulletRigidBodyNode::get_class_type 0 1 179 0
60
static TypeHandle BulletRigidBodyNode::get_class_type(void);

943 14 get_class_type 0 4 1555 32 BulletConstraint::get_class_type 0 1 142 0
57
static TypeHandle BulletConstraint::get_class_type(void);

944 25 BulletConeTwistConstraint 0 4 1562 52 BulletConeTwistConstraint::BulletConeTwistConstraint 0 2 180 181 22
/**
 *
 */

/**
 *
 */
323
explicit BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a);
explicit BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b);

945 9 set_limit 0 4 1562 36 BulletConeTwistConstraint::set_limit 0 2 182 183 22
/**
 *
 */

/**
 *
 */
272
void BulletConeTwistConstraint::set_limit(int index, PN_stdfloat value);
void BulletConeTwistConstraint::set_limit(PN_stdfloat swing1, PN_stdfloat swing2, PN_stdfloat twist, PN_stdfloat softness = 1.0, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0);

946 11 set_damping 0 4 1562 38 BulletConeTwistConstraint::set_damping 0 1 184 10
/**
 *
 */
65
void BulletConeTwistConstraint::set_damping(PN_stdfloat damping);

947 17 get_fix_threshold 0 4 1562 44 BulletConeTwistConstraint::get_fix_threshold 0 1 185 10
/**
 *
 */
69
PN_stdfloat BulletConeTwistConstraint::get_fix_threshold(void) const;

948 17 set_fix_threshold 0 4 1562 44 BulletConeTwistConstraint::set_fix_threshold 0 1 186 10
/**
 *
 */
73
void BulletConeTwistConstraint::set_fix_threshold(PN_stdfloat threshold);

949 12 enable_motor 0 4 1562 39 BulletConeTwistConstraint::enable_motor 0 1 187 10
/**
 *
 */
58
void BulletConeTwistConstraint::enable_motor(bool enable);

950 21 set_max_motor_impulse 0 4 1562 48 BulletConeTwistConstraint::set_max_motor_impulse 0 1 188 10
/**
 *
 */
79
void BulletConeTwistConstraint::set_max_motor_impulse(PN_stdfloat max_impulse);

951 32 set_max_motor_impulse_normalized 0 4 1562 59 BulletConeTwistConstraint::set_max_motor_impulse_normalized 0 1 189 10
/**
 *
 */
90
void BulletConeTwistConstraint::set_max_motor_impulse_normalized(PN_stdfloat max_impulse);

952 16 set_motor_target 0 4 1562 43 BulletConeTwistConstraint::set_motor_target 0 1 190 10
/**
 *
 */
74
void BulletConeTwistConstraint::set_motor_target(LQuaternion const &quat);

953 36 set_motor_target_in_constraint_space 0 4 1562 63 BulletConeTwistConstraint::set_motor_target_in_constraint_space 0 1 191 10
/**
 *
 */
94
void BulletConeTwistConstraint::set_motor_target_in_constraint_space(LQuaternion const &quat);

954 10 set_frames 0 4 1562 37 BulletConeTwistConstraint::set_frames 0 1 192 10
/**
 *
 */
99
void BulletConeTwistConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

955 11 get_frame_a 0 4 1562 38 BulletConeTwistConstraint::get_frame_a 0 1 193 10
/**
 *
 */
84
ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_a(void) const;

956 11 get_frame_b 0 4 1562 38 BulletConeTwistConstraint::get_frame_b 0 1 194 10
/**
 *
 */
84
ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_b(void) const;

957 14 get_class_type 0 4 1562 41 BulletConeTwistConstraint::get_class_type 0 1 195 0
66
static TypeHandle BulletConeTwistConstraint::get_class_type(void);

958 20 ~BulletManifoldPoint 0 4 1563 41 BulletManifoldPoint::~BulletManifoldPoint 0 0 10
/**
 *
 */
55
inline BulletManifoldPoint::~BulletManifoldPoint(void);

959 13 get_life_time 0 4 1563 34 BulletManifoldPoint::get_life_time 0 1 196 10
/**
 *
 */
51
int BulletManifoldPoint::get_life_time(void) const;

960 12 get_distance 0 4 1563 33 BulletManifoldPoint::get_distance 0 1 197 10
/**
 *
 */
58
PN_stdfloat BulletManifoldPoint::get_distance(void) const;

961 19 get_applied_impulse 0 4 1563 40 BulletManifoldPoint::get_applied_impulse 0 1 198 10
/**
 *
 */
65
PN_stdfloat BulletManifoldPoint::get_applied_impulse(void) const;

962 23 get_position_world_on_a 0 4 1563 44 BulletManifoldPoint::get_position_world_on_a 0 1 199 10
/**
 *
 */
65
LPoint3 BulletManifoldPoint::get_position_world_on_a(void) const;

963 23 get_position_world_on_b 0 4 1563 44 BulletManifoldPoint::get_position_world_on_b 0 1 200 10
/**
 *
 */
65
LPoint3 BulletManifoldPoint::get_position_world_on_b(void) const;

964 21 get_normal_world_on_b 0 4 1563 42 BulletManifoldPoint::get_normal_world_on_b 0 1 201 10
/**
 *
 */
64
LVector3 BulletManifoldPoint::get_normal_world_on_b(void) const;

965 17 get_local_point_a 0 4 1563 38 BulletManifoldPoint::get_local_point_a 0 1 202 10
/**
 *
 */
59
LPoint3 BulletManifoldPoint::get_local_point_a(void) const;

966 17 get_local_point_b 0 4 1563 38 BulletManifoldPoint::get_local_point_b 0 1 203 10
/**
 *
 */
59
LPoint3 BulletManifoldPoint::get_local_point_b(void) const;

967 12 get_part_id0 0 4 1563 33 BulletManifoldPoint::get_part_id0 0 1 204 10
/**
 *
 */
50
int BulletManifoldPoint::get_part_id0(void) const;

968 12 get_part_id1 0 4 1563 33 BulletManifoldPoint::get_part_id1 0 1 205 10
/**
 *
 */
50
int BulletManifoldPoint::get_part_id1(void) const;

969 10 get_index0 0 4 1563 31 BulletManifoldPoint::get_index0 0 1 206 10
/**
 *
 */
48
int BulletManifoldPoint::get_index0(void) const;

970 10 get_index1 0 4 1563 31 BulletManifoldPoint::get_index1 0 1 207 10
/**
 *
 */
48
int BulletManifoldPoint::get_index1(void) const;

971 32 set_lateral_friction_initialized 0 4 1563 53 BulletManifoldPoint::set_lateral_friction_initialized 0 1 208 10
/**
 *
 */
71
void BulletManifoldPoint::set_lateral_friction_initialized(bool value);

972 25 set_lateral_friction_dir1 0 4 1563 46 BulletManifoldPoint::set_lateral_friction_dir1 0 1 209 10
/**
 *
 */
74
void BulletManifoldPoint::set_lateral_friction_dir1(LVecBase3 const &dir);

973 25 set_lateral_friction_dir2 0 4 1563 46 BulletManifoldPoint::set_lateral_friction_dir2 0 1 210 10
/**
 *
 */
74
void BulletManifoldPoint::set_lateral_friction_dir2(LVecBase3 const &dir);

974 19 set_contact_motion1 0 4 1563 40 BulletManifoldPoint::set_contact_motion1 0 1 211 10
/**
 *
 */
65
void BulletManifoldPoint::set_contact_motion1(PN_stdfloat value);

975 19 set_contact_motion2 0 4 1563 40 BulletManifoldPoint::set_contact_motion2 0 1 212 10
/**
 *
 */
65
void BulletManifoldPoint::set_contact_motion2(PN_stdfloat value);

976 21 set_combined_friction 0 4 1563 42 BulletManifoldPoint::set_combined_friction 0 1 213 10
/**
 *
 */
67
void BulletManifoldPoint::set_combined_friction(PN_stdfloat value);

977 24 set_combined_restitution 0 4 1563 45 BulletManifoldPoint::set_combined_restitution 0 1 214 10
/**
 *
 */
70
void BulletManifoldPoint::set_combined_restitution(PN_stdfloat value);

978 19 set_applied_impulse 0 4 1563 40 BulletManifoldPoint::set_applied_impulse 0 1 215 10
/**
 *
 */
65
void BulletManifoldPoint::set_applied_impulse(PN_stdfloat value);

979 28 set_applied_impulse_lateral1 0 4 1563 49 BulletManifoldPoint::set_applied_impulse_lateral1 0 1 216 10
/**
 *
 */
74
void BulletManifoldPoint::set_applied_impulse_lateral1(PN_stdfloat value);

980 28 set_applied_impulse_lateral2 0 4 1563 49 BulletManifoldPoint::set_applied_impulse_lateral2 0 1 217 10
/**
 *
 */
74
void BulletManifoldPoint::set_applied_impulse_lateral2(PN_stdfloat value);

981 16 set_contact_cfm1 0 4 1563 37 BulletManifoldPoint::set_contact_cfm1 0 1 218 10
/**
 *
 */
62
void BulletManifoldPoint::set_contact_cfm1(PN_stdfloat value);

982 16 set_contact_cfm2 0 4 1563 37 BulletManifoldPoint::set_contact_cfm2 0 1 219 10
/**
 *
 */
62
void BulletManifoldPoint::set_contact_cfm2(PN_stdfloat value);

983 32 get_lateral_friction_initialized 0 4 1563 53 BulletManifoldPoint::get_lateral_friction_initialized 0 1 220 10
/**
 *
 */
71
bool BulletManifoldPoint::get_lateral_friction_initialized(void) const;

984 25 get_lateral_friction_dir1 0 4 1563 46 BulletManifoldPoint::get_lateral_friction_dir1 0 1 221 10
/**
 *
 */
68
LVector3 BulletManifoldPoint::get_lateral_friction_dir1(void) const;

985 25 get_lateral_friction_dir2 0 4 1563 46 BulletManifoldPoint::get_lateral_friction_dir2 0 1 222 10
/**
 *
 */
68
LVector3 BulletManifoldPoint::get_lateral_friction_dir2(void) const;

986 19 get_contact_motion1 0 4 1563 40 BulletManifoldPoint::get_contact_motion1 0 1 223 10
/**
 *
 */
65
PN_stdfloat BulletManifoldPoint::get_contact_motion1(void) const;

987 19 get_contact_motion2 0 4 1563 40 BulletManifoldPoint::get_contact_motion2 0 1 224 10
/**
 *
 */
65
PN_stdfloat BulletManifoldPoint::get_contact_motion2(void) const;

988 21 get_combined_friction 0 4 1563 42 BulletManifoldPoint::get_combined_friction 0 1 225 10
/**
 *
 */
67
PN_stdfloat BulletManifoldPoint::get_combined_friction(void) const;

989 24 get_combined_restitution 0 4 1563 45 BulletManifoldPoint::get_combined_restitution 0 1 226 10
/**
 *
 */
70
PN_stdfloat BulletManifoldPoint::get_combined_restitution(void) const;

990 28 get_applied_impulse_lateral1 0 4 1563 49 BulletManifoldPoint::get_applied_impulse_lateral1 0 1 227 10
/**
 *
 */
74
PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral1(void) const;

991 28 get_applied_impulse_lateral2 0 4 1563 49 BulletManifoldPoint::get_applied_impulse_lateral2 0 1 228 10
/**
 *
 */
74
PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral2(void) const;

992 16 get_contact_cfm1 0 4 1563 37 BulletManifoldPoint::get_contact_cfm1 0 1 229 10
/**
 *
 */
62
PN_stdfloat BulletManifoldPoint::get_contact_cfm1(void) const;

993 16 get_contact_cfm2 0 4 1563 37 BulletManifoldPoint::get_contact_cfm2 0 1 230 10
/**
 *
 */
62
PN_stdfloat BulletManifoldPoint::get_contact_cfm2(void) const;

994 25 BulletContactCallbackData 0 4 1564 52 BulletContactCallbackData::BulletContactCallbackData 0 1 231 10
/**
 *
 */
163
inline BulletContactCallbackData::BulletContactCallbackData(BulletManifoldPoint &mp, PandaNode *node0, PandaNode *node1, int id0, int id1, int index0, int index1);

995 12 get_manifold 0 4 1564 39 BulletContactCallbackData::get_manifold 0 1 232 10
/**
 *
 */
80
inline BulletManifoldPoint &BulletContactCallbackData::get_manifold(void) const;

996 9 get_node0 0 4 1564 36 BulletContactCallbackData::get_node0 0 1 233 10
/**
 *
 */
67
inline PandaNode *BulletContactCallbackData::get_node0(void) const;

997 9 get_node1 0 4 1564 36 BulletContactCallbackData::get_node1 0 1 234 10
/**
 *
 */
67
inline PandaNode *BulletContactCallbackData::get_node1(void) const;

998 12 get_part_id0 0 4 1564 39 BulletContactCallbackData::get_part_id0 0 1 235 10
/**
 *
 */
63
inline int BulletContactCallbackData::get_part_id0(void) const;

999 12 get_part_id1 0 4 1564 39 BulletContactCallbackData::get_part_id1 0 1 236 10
/**
 *
 */
63
inline int BulletContactCallbackData::get_part_id1(void) const;

1000 10 get_index0 0 4 1564 37 BulletContactCallbackData::get_index0 0 1 237 10
/**
 *
 */
61
inline int BulletContactCallbackData::get_index0(void) const;

1001 10 get_index1 0 4 1564 37 BulletContactCallbackData::get_index1 0 1 238 10
/**
 *
 */
61
inline int BulletContactCallbackData::get_index1(void) const;

1002 14 get_class_type 0 4 1564 41 BulletContactCallbackData::get_class_type 0 1 239 0
66
static TypeHandle BulletContactCallbackData::get_class_type(void);

1003 18 get_manifold_point 0 4 1566 33 BulletContact::get_manifold_point 0 1 240 10
/**
 *
 */
68
inline BulletManifoldPoint &BulletContact::get_manifold_point(void);

1004 9 get_node0 0 4 1566 24 BulletContact::get_node0 0 1 241 10
/**
 *
 */
55
inline PandaNode *BulletContact::get_node0(void) const;

1005 9 get_node1 0 4 1566 24 BulletContact::get_node1 0 1 242 10
/**
 *
 */
55
inline PandaNode *BulletContact::get_node1(void) const;

1006 8 get_idx0 0 4 1566 23 BulletContact::get_idx0 0 1 243 10
/**
 *
 */
47
inline int BulletContact::get_idx0(void) const;

1007 8 get_idx1 0 4 1566 23 BulletContact::get_idx1 0 1 244 10
/**
 *
 */
47
inline int BulletContact::get_idx1(void) const;

1008 12 get_part_id0 0 4 1566 27 BulletContact::get_part_id0 0 1 245 10
/**
 *
 */
51
inline int BulletContact::get_part_id0(void) const;

1009 12 get_part_id1 0 4 1566 27 BulletContact::get_part_id1 0 1 246 10
/**
 *
 */
51
inline int BulletContact::get_part_id1(void) const;

1010 14 ~BulletContact 0 4 1566 29 BulletContact::~BulletContact 0 0 0
36
BulletContact::~BulletContact(void);

1011 31 upcast_to_ContactResultCallback 0 12 1567 52 BulletContactResult::upcast_to_ContactResultCallback 0 1 249 56
upcast from BulletContactResult to ContactResultCallback
100
btCollisionWorld::ContactResultCallback *BulletContactResult::upcast_to_ContactResultCallback(void);

1012 53 downcast_ContactResultCallback_to_BulletContactResult 0 8 0 53 downcast_ContactResultCallback_to_BulletContactResult 0 0 58
downcast from ContactResultCallback to BulletContactResult
122
BulletContactResult *downcast_ContactResultCallback_to_BulletContactResult(btCollisionWorld::ContactResultCallback *this);

1013 16 get_num_contacts 0 4 1567 37 BulletContactResult::get_num_contacts 0 1 247 10
/**
 *
 */
61
inline int BulletContactResult::get_num_contacts(void) const;

1014 11 get_contact 0 4 1567 32 BulletContactResult::get_contact 0 1 248 10
/**
 *
 */
63
inline BulletContact BulletContactResult::get_contact(int idx);

1015 0 0 0 0 0 0 0 0
0

1016 20 ~BulletContactResult 0 4 1567 41 BulletContactResult::~BulletContactResult 0 0 0
48
BulletContactResult::~BulletContactResult(void);

1017 15 BulletDebugNode 0 4 1569 32 BulletDebugNode::BulletDebugNode 0 2 250 251 10
/**
 *
 */
146
explicit BulletDebugNode::BulletDebugNode(char const *name = "debug");
inline BulletDebugNode::BulletDebugNode(BulletDebugNode const &) = default;

1018 17 draw_mask_changed 0 6 1569 34 BulletDebugNode::draw_mask_changed 0 1 252 10
/**
 *
 */
54
virtual void BulletDebugNode::draw_mask_changed(void);

1019 14 show_wireframe 0 4 1569 31 BulletDebugNode::show_wireframe 0 1 253 10
/**
 *
 */
55
inline void BulletDebugNode::show_wireframe(bool show);

1020 16 show_constraints 0 4 1569 33 BulletDebugNode::show_constraints 0 1 254 10
/**
 *
 */
57
inline void BulletDebugNode::show_constraints(bool show);

1021 19 show_bounding_boxes 0 4 1569 36 BulletDebugNode::show_bounding_boxes 0 1 255 10
/**
 *
 */
60
inline void BulletDebugNode::show_bounding_boxes(bool show);

1022 12 show_normals 0 4 1569 29 BulletDebugNode::show_normals 0 1 256 10
/**
 *
 */
53
inline void BulletDebugNode::show_normals(bool show);

1023 18 get_show_wireframe 0 4 1569 35 BulletDebugNode::get_show_wireframe 0 1 257 10
/**
 *
 */
60
inline bool BulletDebugNode::get_show_wireframe(void) const;

1024 20 get_show_constraints 0 4 1569 37 BulletDebugNode::get_show_constraints 0 1 258 10
/**
 *
 */
62
inline bool BulletDebugNode::get_show_constraints(void) const;

1025 23 get_show_bounding_boxes 0 4 1569 40 BulletDebugNode::get_show_bounding_boxes 0 1 259 10
/**
 *
 */
65
inline bool BulletDebugNode::get_show_bounding_boxes(void) const;

1026 16 get_show_normals 0 4 1569 33 BulletDebugNode::get_show_normals 0 1 260 10
/**
 *
 */
58
inline bool BulletDebugNode::get_show_normals(void) const;

1027 14 get_class_type 0 4 1569 31 BulletDebugNode::get_class_type 0 1 261 0
56
static TypeHandle BulletDebugNode::get_class_type(void);

1028 15 BulletGhostNode 0 4 1570 32 BulletGhostNode::BulletGhostNode 0 1 262 10
/**
 *
 */
70
explicit BulletGhostNode::BulletGhostNode(char const *name = "ghost");

1029 25 get_num_overlapping_nodes 0 4 1570 42 BulletGhostNode::get_num_overlapping_nodes 0 1 263 58
// Overlapping

// Overlapping

// Overlapping

/**
 *
 */
59
int BulletGhostNode::get_num_overlapping_nodes(void) const;

1030 20 get_overlapping_node 0 4 1570 37 BulletGhostNode::get_overlapping_node 0 1 264 10
/**
 *
 */
64
PandaNode *BulletGhostNode::get_overlapping_node(int idx) const;

1031 0 0 0 0 0 0 0 0
0

1032 14 get_class_type 0 4 1570 31 BulletGhostNode::get_class_type 0 1 265 0
56
static TypeHandle BulletGhostNode::get_class_type(void);

1033 26 ~BulletSoftBodyNodeElement 0 4 1571 53 BulletSoftBodyNodeElement::~BulletSoftBodyNodeElement 0 0 10
/**
 *
 */
67
inline BulletSoftBodyNodeElement::~BulletSoftBodyNodeElement(void);

1034 5 empty 0 4 1571 32 BulletSoftBodyNodeElement::empty 0 1 267 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
79
static inline BulletSoftBodyNodeElement BulletSoftBodyNodeElement::empty(void);

1035 7 get_pos 0 4 1571 34 BulletSoftBodyNodeElement::get_pos 0 1 268 10
/**
 *
 */
55
LPoint3 BulletSoftBodyNodeElement::get_pos(void) const;

1036 12 get_velocity 0 4 1571 39 BulletSoftBodyNodeElement::get_velocity 0 1 269 10
/**
 *
 */
61
LVector3 BulletSoftBodyNodeElement::get_velocity(void) const;

1037 10 get_normal 0 4 1571 37 BulletSoftBodyNodeElement::get_normal 0 1 270 10
/**
 *
 */
59
LVector3 BulletSoftBodyNodeElement::get_normal(void) const;

1038 12 get_inv_mass 0 4 1571 39 BulletSoftBodyNodeElement::get_inv_mass 0 1 271 10
/**
 *
 */
64
PN_stdfloat BulletSoftBodyNodeElement::get_inv_mass(void) const;

1039 8 get_area 0 4 1571 35 BulletSoftBodyNodeElement::get_area 0 1 272 10
/**
 *
 */
60
PN_stdfloat BulletSoftBodyNodeElement::get_area(void) const;

1040 11 is_attached 0 4 1571 38 BulletSoftBodyNodeElement::is_attached 0 1 273 10
/**
 *
 */
55
int BulletSoftBodyNodeElement::is_attached(void) const;

1041 25 BulletSoftBodyNodeElement 0 4 1571 52 BulletSoftBodyNodeElement::BulletSoftBodyNodeElement 0 1 266 10
/**
 *
 */
105
inline BulletSoftBodyNodeElement::BulletSoftBodyNodeElement(BulletSoftBodyNodeElement const &) = default;

1042 7 get_cfg 0 4 1572 27 BulletSoftBodyNode::get_cfg 0 1 274 10
/**
 *
 */
55
BulletSoftBodyConfig BulletSoftBodyNode::get_cfg(void);

1043 14 get_world_info 0 4 1572 34 BulletSoftBodyNode::get_world_info 0 1 275 10
/**
 *
 */
65
BulletSoftBodyWorldInfo BulletSoftBodyNode::get_world_info(void);

1044 28 generate_bending_constraints 0 4 1572 48 BulletSoftBodyNode::generate_bending_constraints 0 1 276 10
/**
 *
 */
112
void BulletSoftBodyNode::generate_bending_constraints(int distance, BulletSoftBodyMaterial *material = nullptr);

1045 21 randomize_constraints 0 4 1572 41 BulletSoftBodyNode::randomize_constraints 0 1 277 10
/**
 *
 */
53
void BulletSoftBodyNode::randomize_constraints(void);

1046 15 set_volume_mass 0 4 1572 35 BulletSoftBodyNode::set_volume_mass 0 1 278 36
// Mass, volume, density

/**
 *
 */
59
void BulletSoftBodyNode::set_volume_mass(PN_stdfloat mass);

1047 18 set_volume_density 0 4 1572 38 BulletSoftBodyNode::set_volume_density 0 1 279 10
/**
 *
 */
65
void BulletSoftBodyNode::set_volume_density(PN_stdfloat density);

1048 14 set_total_mass 0 4 1572 34 BulletSoftBodyNode::set_total_mass 0 1 280 10
/**
 *
 */
82
void BulletSoftBodyNode::set_total_mass(PN_stdfloat mass, bool fromfaces = false);

1049 17 set_total_density 0 4 1572 37 BulletSoftBodyNode::set_total_density 0 1 281 10
/**
 *
 */
64
void BulletSoftBodyNode::set_total_density(PN_stdfloat density);

1050 8 set_mass 0 4 1572 28 BulletSoftBodyNode::set_mass 0 1 282 10
/**
 *
 */
62
void BulletSoftBodyNode::set_mass(int node, PN_stdfloat mass);

1051 8 get_mass 0 4 1572 28 BulletSoftBodyNode::get_mass 0 1 283 10
/**
 *
 */
57
PN_stdfloat BulletSoftBodyNode::get_mass(int node) const;

1052 14 get_total_mass 0 4 1572 34 BulletSoftBodyNode::get_total_mass 0 1 284 10
/**
 *
 */
59
PN_stdfloat BulletSoftBodyNode::get_total_mass(void) const;

1053 10 get_volume 0 4 1572 30 BulletSoftBodyNode::get_volume 0 1 285 10
/**
 *
 */
55
PN_stdfloat BulletSoftBodyNode::get_volume(void) const;

1054 9 add_force 0 4 1572 29 BulletSoftBodyNode::add_force 0 2 286 287 32
// Force

/**
 *
 */

/**
 *
 */
127
void BulletSoftBodyNode::add_force(LVector3 const &force);
void BulletSoftBodyNode::add_force(LVector3 const &force, int node);

1055 12 set_velocity 0 4 1572 32 BulletSoftBodyNode::set_velocity 0 1 288 10
/**
 *
 */
64
void BulletSoftBodyNode::set_velocity(LVector3 const &velocity);

1056 12 add_velocity 0 4 1572 32 BulletSoftBodyNode::add_velocity 0 2 289 290 22
/**
 *
 */

/**
 *
 */
139
void BulletSoftBodyNode::add_velocity(LVector3 const &velocity);
void BulletSoftBodyNode::add_velocity(LVector3 const &velocity, int node);

1057 17 set_wind_velocity 0 4 1572 37 BulletSoftBodyNode::set_wind_velocity 0 1 291 10
/**
 *
 */
69
void BulletSoftBodyNode::set_wind_velocity(LVector3 const &velocity);

1058 17 get_wind_velocity 0 4 1572 37 BulletSoftBodyNode::get_wind_velocity 0 1 292 10
/**
 *
 */
59
LVector3 BulletSoftBodyNode::get_wind_velocity(void) const;

1059 8 set_pose 0 4 1572 28 BulletSoftBodyNode::set_pose 0 1 293 10
/**
 *
 */
61
void BulletSoftBodyNode::set_pose(bool bvolume, bool bframe);

1060 8 get_aabb 0 4 1572 28 BulletSoftBodyNode::get_aabb 0 1 294 10
/**
 *
 */
53
BoundingBox BulletSoftBodyNode::get_aabb(void) const;

1061 17 generate_clusters 0 4 1572 37 BulletSoftBodyNode::generate_clusters 0 1 295 22
// Cluster

/**
 *
 */
76
void BulletSoftBodyNode::generate_clusters(int k, int maxiterations = 8192);

1062 15 release_cluster 0 4 1572 35 BulletSoftBodyNode::release_cluster 0 1 296 10
/**
 *
 */
52
void BulletSoftBodyNode::release_cluster(int index);

1063 16 release_clusters 0 4 1572 36 BulletSoftBodyNode::release_clusters 0 1 297 10
/**
 *
 */
48
void BulletSoftBodyNode::release_clusters(void);

1064 16 get_num_clusters 0 4 1572 36 BulletSoftBodyNode::get_num_clusters 0 1 298 10
/**
 *
 */
53
int BulletSoftBodyNode::get_num_clusters(void) const;

1065 11 cluster_com 0 4 1572 31 BulletSoftBodyNode::cluster_com 0 1 299 10
/**
 *
 */
61
LVecBase3 BulletSoftBodyNode::cluster_com(int cluster) const;

1066 9 link_geom 0 4 1572 29 BulletSoftBodyNode::link_geom 0 1 300 24
// Rendering

/**
 *
 */
47
void BulletSoftBodyNode::link_geom(Geom *geom);

1067 11 unlink_geom 0 4 1572 31 BulletSoftBodyNode::unlink_geom 0 1 301 10
/**
 *
 */
43
void BulletSoftBodyNode::unlink_geom(void);

1068 10 link_curve 0 4 1572 30 BulletSoftBodyNode::link_curve 0 1 302 10
/**
 *
 */
64
void BulletSoftBodyNode::link_curve(NurbsCurveEvaluator *curve);

1069 12 unlink_curve 0 4 1572 32 BulletSoftBodyNode::unlink_curve 0 1 303 10
/**
 *
 */
44
void BulletSoftBodyNode::unlink_curve(void);

1070 12 link_surface 0 4 1572 32 BulletSoftBodyNode::link_surface 0 1 304 10
/**
 *
 */
70
void BulletSoftBodyNode::link_surface(NurbsSurfaceEvaluator *surface);

1071 14 unlink_surface 0 4 1572 34 BulletSoftBodyNode::unlink_surface 0 1 305 10
/**
 *
 */
46
void BulletSoftBodyNode::unlink_surface(void);

1072 13 append_anchor 0 4 1572 33 BulletSoftBodyNode::append_anchor 0 2 306 307 34
// Anchors

/**
 *
 */

/**
 *
 */
220
void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable = false);
void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, LVector3 const &pivot, bool disable = false);

1073 19 append_linear_joint 0 4 1572 39 BulletSoftBodyNode::append_linear_joint 0 2 308 309 32
// Links

/**
 *
 */

/**
 *
 */
310
void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, int cluster, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0);
void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, LPoint3 const &pos, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0);

1074 20 append_angular_joint 0 4 1572 40 BulletSoftBodyNode::append_angular_joint 0 1 310 10
/**
 *
 */
203
void BulletSoftBodyNode::append_angular_joint(BulletBodyNode *body, LVector3 const &axis, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0, BulletSoftBodyControl *control = nullptr);

1075 17 get_num_materials 0 4 1572 37 BulletSoftBodyNode::get_num_materials 0 1 311 52
// Materials

// Materials

// Materials

/**
 *
 */
54
int BulletSoftBodyNode::get_num_materials(void) const;

1076 12 get_material 0 4 1572 32 BulletSoftBodyNode::get_material 0 1 312 10
/**
 *
 */
71
BulletSoftBodyMaterial BulletSoftBodyNode::get_material(int idx) const;

1077 15 append_material 0 4 1572 35 BulletSoftBodyNode::append_material 0 1 313 10
/**
 *
 */
65
BulletSoftBodyMaterial BulletSoftBodyNode::append_material(void);

1078 13 get_num_nodes 0 4 1572 33 BulletSoftBodyNode::get_num_nodes 0 1 314 40
// Nodes

// Nodes

// Nodes

/**
 *
 */
50
int BulletSoftBodyNode::get_num_nodes(void) const;

1079 8 get_node 0 4 1572 28 BulletSoftBodyNode::get_node 0 1 315 10
/**
 *
 */
70
BulletSoftBodyNodeElement BulletSoftBodyNode::get_node(int idx) const;

1080 22 get_closest_node_index 0 4 1572 42 BulletSoftBodyNode::get_closest_node_index 0 1 316 212
/**
 * Returns the index of the node which is closest to the given point.  The
 * distance between each node and the given point is computed in world space
 * if local=false, and in local space if local=true.
 */
76
int BulletSoftBodyNode::get_closest_node_index(LVecBase3 point, bool local);

1081 9 make_rope 0 4 1572 29 BulletSoftBodyNode::make_rope 0 1 317 22
// Factory

/**
 *
 */
161
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_rope(BulletSoftBodyWorldInfo &info, LPoint3 const &from, LPoint3 const &to, int res, int fixeds);

1082 10 make_patch 0 4 1572 30 BulletSoftBodyNode::make_patch 0 1 318 10
/**
 *
 */
248
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_patch(BulletSoftBodyWorldInfo &info, LPoint3 const &corner00, LPoint3 const &corner10, LPoint3 const &corner01, LPoint3 const &corner11, int resx, int resy, int fixeds, bool gendiags);

1083 14 make_ellipsoid 0 4 1572 34 BulletSoftBodyNode::make_ellipsoid 0 1 319 10
/**
 *
 */
162
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_ellipsoid(BulletSoftBodyWorldInfo &info, LPoint3 const &center, LVecBase3 const &radius, int res);

1084 13 make_tri_mesh 0 4 1572 33 BulletSoftBodyNode::make_tri_mesh 0 2 320 321 22
/**
 *
 */

/**
 *
 */
334
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints = true);
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool randomizeConstraints = true);

1085 13 make_tet_mesh 0 4 1572 33 BulletSoftBodyNode::make_tet_mesh 0 2 322 323 22
/**
 *
 */

/**
 *
 */
325
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks = true);
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, char const *ele, char const *face, char const *node);

1086 21 ~BulletSoftBodyConfig 0 4 1573 43 BulletSoftBodyConfig::~BulletSoftBodyConfig 0 0 10
/**
 *
 */
57
inline BulletSoftBodyConfig::~BulletSoftBodyConfig(void);

1087 25 clear_all_collision_flags 0 4 1573 47 BulletSoftBodyConfig::clear_all_collision_flags 0 1 326 10
/**
 *
 */
59
void BulletSoftBodyConfig::clear_all_collision_flags(void);

1088 18 set_collision_flag 0 4 1573 40 BulletSoftBodyConfig::set_collision_flag 0 1 327 10
/**
 *
 */
100
void BulletSoftBodyConfig::set_collision_flag(BulletSoftBodyConfig::CollisionFlag flag, bool value);

1089 18 get_collision_flag 0 4 1573 40 BulletSoftBodyConfig::get_collision_flag 0 1 328 10
/**
 *
 */
94
bool BulletSoftBodyConfig::get_collision_flag(BulletSoftBodyConfig::CollisionFlag flag) const;

1090 14 set_aero_model 0 4 1573 36 BulletSoftBodyConfig::set_aero_model 0 1 329 10
/**
 *
 */
81
void BulletSoftBodyConfig::set_aero_model(BulletSoftBodyConfig::AeroModel value);

1091 14 get_aero_model 0 4 1573 36 BulletSoftBodyConfig::get_aero_model 0 1 330 10
/**
 *
 */
81
BulletSoftBodyConfig::AeroModel BulletSoftBodyConfig::get_aero_model(void) const;

1092 32 set_velocities_correction_factor 0 4 1573 54 BulletSoftBodyConfig::set_velocities_correction_factor 0 1 331 36
/**
 * Setter for property kVCF.
 */
79
void BulletSoftBodyConfig::set_velocities_correction_factor(PN_stdfloat value);

1093 23 set_damping_coefficient 0 4 1573 45 BulletSoftBodyConfig::set_damping_coefficient 0 1 332 35
/**
 * Setter for property kDP.
 */
70
void BulletSoftBodyConfig::set_damping_coefficient(PN_stdfloat value);

1094 20 set_drag_coefficient 0 4 1573 42 BulletSoftBodyConfig::set_drag_coefficient 0 1 333 35
/**
 * Setter for property kDG.
 */
67
void BulletSoftBodyConfig::set_drag_coefficient(PN_stdfloat value);

1095 20 set_lift_coefficient 0 4 1573 42 BulletSoftBodyConfig::set_lift_coefficient 0 1 334 35
/**
 * Setter for property kLF.
 */
67
void BulletSoftBodyConfig::set_lift_coefficient(PN_stdfloat value);

1096 24 set_pressure_coefficient 0 4 1573 46 BulletSoftBodyConfig::set_pressure_coefficient 0 1 335 35
/**
 * Setter for property kPR.
 */
71
void BulletSoftBodyConfig::set_pressure_coefficient(PN_stdfloat value);

1097 35 set_volume_conservation_coefficient 0 4 1573 57 BulletSoftBodyConfig::set_volume_conservation_coefficient 0 1 336 35
/**
 * Setter for property kVC.
 */
82
void BulletSoftBodyConfig::set_volume_conservation_coefficient(PN_stdfloat value);

1098 32 set_dynamic_friction_coefficient 0 4 1573 54 BulletSoftBodyConfig::set_dynamic_friction_coefficient 0 1 337 35
/**
 * Setter for property kDF.
 */
79
void BulletSoftBodyConfig::set_dynamic_friction_coefficient(PN_stdfloat value);

1099 29 set_pose_matching_coefficient 0 4 1573 51 BulletSoftBodyConfig::set_pose_matching_coefficient 0 1 338 35
/**
 * Setter for property kMT.
 */
76
void BulletSoftBodyConfig::set_pose_matching_coefficient(PN_stdfloat value);

1100 27 set_rigid_contacts_hardness 0 4 1573 49 BulletSoftBodyConfig::set_rigid_contacts_hardness 0 1 339 36
/**
 * Setter for property kCHR.
 */
74
void BulletSoftBodyConfig::set_rigid_contacts_hardness(PN_stdfloat value);

1101 29 set_kinetic_contacts_hardness 0 4 1573 51 BulletSoftBodyConfig::set_kinetic_contacts_hardness 0 1 340 36
/**
 * Setter for property kKHR.
 */
76
void BulletSoftBodyConfig::set_kinetic_contacts_hardness(PN_stdfloat value);

1102 26 set_soft_contacts_hardness 0 4 1573 48 BulletSoftBodyConfig::set_soft_contacts_hardness 0 1 341 36
/**
 * Setter for property kSHR.
 */
73
void BulletSoftBodyConfig::set_soft_contacts_hardness(PN_stdfloat value);

1103 20 set_anchors_hardness 0 4 1573 42 BulletSoftBodyConfig::set_anchors_hardness 0 1 342 36
/**
 * Setter for property kAHR.
 */
67
void BulletSoftBodyConfig::set_anchors_hardness(PN_stdfloat value);

1104 26 set_soft_vs_rigid_hardness 0 4 1573 48 BulletSoftBodyConfig::set_soft_vs_rigid_hardness 0 1 343 40
/**
 * Setter for property kSRHR_CL.
 */
73
void BulletSoftBodyConfig::set_soft_vs_rigid_hardness(PN_stdfloat value);

1105 28 set_soft_vs_kinetic_hardness 0 4 1573 50 BulletSoftBodyConfig::set_soft_vs_kinetic_hardness 0 1 344 40
/**
 * Setter for property kSKHR_CL.
 */
75
void BulletSoftBodyConfig::set_soft_vs_kinetic_hardness(PN_stdfloat value);

1106 25 set_soft_vs_soft_hardness 0 4 1573 47 BulletSoftBodyConfig::set_soft_vs_soft_hardness 0 1 345 40
/**
 * Setter for property kSSHR_CL.
 */
72
void BulletSoftBodyConfig::set_soft_vs_soft_hardness(PN_stdfloat value);

1107 31 set_soft_vs_rigid_impulse_split 0 4 1573 53 BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split 0 1 346 43
/**
 * Setter for property kSR_SPLT_CL.
 */
78
void BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split(PN_stdfloat value);

1108 33 set_soft_vs_kinetic_impulse_split 0 4 1573 55 BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split 0 1 347 43
/**
 * Setter for property kSK_SPLT_CL.
 */
80
void BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split(PN_stdfloat value);

1109 30 set_soft_vs_soft_impulse_split 0 4 1573 52 BulletSoftBodyConfig::set_soft_vs_soft_impulse_split 0 1 348 43
/**
 * Setter for property kSS_SPLT_CL.
 */
77
void BulletSoftBodyConfig::set_soft_vs_soft_impulse_split(PN_stdfloat value);

1110 13 set_maxvolume 0 4 1573 35 BulletSoftBodyConfig::set_maxvolume 0 1 349 41
/**
 * Setter for property maxvolume.
 */
60
void BulletSoftBodyConfig::set_maxvolume(PN_stdfloat value);

1111 13 set_timescale 0 4 1573 35 BulletSoftBodyConfig::set_timescale 0 1 350 41
/**
 * Setter for property timescale.
 */
60
void BulletSoftBodyConfig::set_timescale(PN_stdfloat value);

1112 31 set_positions_solver_iterations 0 4 1573 53 BulletSoftBodyConfig::set_positions_solver_iterations 0 1 351 43
/**
 * Setter for property piterations.
 */
70
void BulletSoftBodyConfig::set_positions_solver_iterations(int value);

1113 32 set_velocities_solver_iterations 0 4 1573 54 BulletSoftBodyConfig::set_velocities_solver_iterations 0 1 352 43
/**
 * Setter for property viterations.
 */
71
void BulletSoftBodyConfig::set_velocities_solver_iterations(int value);

1114 27 set_drift_solver_iterations 0 4 1573 49 BulletSoftBodyConfig::set_drift_solver_iterations 0 1 353 43
/**
 * Setter for property diterations.
 */
66
void BulletSoftBodyConfig::set_drift_solver_iterations(int value);

1115 29 set_cluster_solver_iterations 0 4 1573 51 BulletSoftBodyConfig::set_cluster_solver_iterations 0 1 354 43
/**
 * Setter for property citerations.
 */
68
void BulletSoftBodyConfig::set_cluster_solver_iterations(int value);

1116 32 get_velocities_correction_factor 0 4 1573 54 BulletSoftBodyConfig::get_velocities_correction_factor 0 1 355 36
/**
 * Getter for property kVCF.
 */
79
PN_stdfloat BulletSoftBodyConfig::get_velocities_correction_factor(void) const;

1117 23 get_damping_coefficient 0 4 1573 45 BulletSoftBodyConfig::get_damping_coefficient 0 1 356 35
/**
 * Getter for property kDP.
 */
70
PN_stdfloat BulletSoftBodyConfig::get_damping_coefficient(void) const;

1118 20 get_drag_coefficient 0 4 1573 42 BulletSoftBodyConfig::get_drag_coefficient 0 1 357 35
/**
 * Getter for property kDG.
 */
67
PN_stdfloat BulletSoftBodyConfig::get_drag_coefficient(void) const;

1119 20 get_lift_coefficient 0 4 1573 42 BulletSoftBodyConfig::get_lift_coefficient 0 1 358 35
/**
 * Getter for property kLF.
 */
67
PN_stdfloat BulletSoftBodyConfig::get_lift_coefficient(void) const;

1120 24 get_pressure_coefficient 0 4 1573 46 BulletSoftBodyConfig::get_pressure_coefficient 0 1 359 35
/**
 * Getter for property kPR.
 */
71
PN_stdfloat BulletSoftBodyConfig::get_pressure_coefficient(void) const;

1121 35 get_volume_conservation_coefficient 0 4 1573 57 BulletSoftBodyConfig::get_volume_conservation_coefficient 0 1 360 35
/**
 * Getter for property kVC.
 */
82
PN_stdfloat BulletSoftBodyConfig::get_volume_conservation_coefficient(void) const;

1122 32 get_dynamic_friction_coefficient 0 4 1573 54 BulletSoftBodyConfig::get_dynamic_friction_coefficient 0 1 361 35
/**
 * Getter for property kDF.
 */
79
PN_stdfloat BulletSoftBodyConfig::get_dynamic_friction_coefficient(void) const;

1123 29 get_pose_matching_coefficient 0 4 1573 51 BulletSoftBodyConfig::get_pose_matching_coefficient 0 1 362 35
/**
 * Getter for property kMT.
 */
76
PN_stdfloat BulletSoftBodyConfig::get_pose_matching_coefficient(void) const;

1124 27 get_rigid_contacts_hardness 0 4 1573 49 BulletSoftBodyConfig::get_rigid_contacts_hardness 0 1 363 36
/**
 * Getter for property kCHR.
 */
74
PN_stdfloat BulletSoftBodyConfig::get_rigid_contacts_hardness(void) const;

1125 29 get_kinetic_contacts_hardness 0 4 1573 51 BulletSoftBodyConfig::get_kinetic_contacts_hardness 0 1 364 36
/**
 * Getter for property kKHR.
 */
76
PN_stdfloat BulletSoftBodyConfig::get_kinetic_contacts_hardness(void) const;

1126 26 get_soft_contacts_hardness 0 4 1573 48 BulletSoftBodyConfig::get_soft_contacts_hardness 0 1 365 36
/**
 * Getter for property kSHR.
 */
73
PN_stdfloat BulletSoftBodyConfig::get_soft_contacts_hardness(void) const;

1127 20 get_anchors_hardness 0 4 1573 42 BulletSoftBodyConfig::get_anchors_hardness 0 1 366 36
/**
 * Getter for property kAHR.
 */
67
PN_stdfloat BulletSoftBodyConfig::get_anchors_hardness(void) const;

1128 26 get_soft_vs_rigid_hardness 0 4 1573 48 BulletSoftBodyConfig::get_soft_vs_rigid_hardness 0 1 367 40
/**
 * Getter for property kSRHR_CL.
 */
73
PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_hardness(void) const;

1129 28 get_soft_vs_kinetic_hardness 0 4 1573 50 BulletSoftBodyConfig::get_soft_vs_kinetic_hardness 0 1 368 40
/**
 * Getter for property kSKHR_CL.
 */
75
PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_hardness(void) const;

1130 25 get_soft_vs_soft_hardness 0 4 1573 47 BulletSoftBodyConfig::get_soft_vs_soft_hardness 0 1 369 40
/**
 * Getter for property kSSHR_CL.
 */
72
PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_hardness(void) const;

1131 31 get_soft_vs_rigid_impulse_split 0 4 1573 53 BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split 0 1 370 43
/**
 * Getter for property kSR_SPLT_CL.
 */
78
PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split(void) const;

1132 33 get_soft_vs_kinetic_impulse_split 0 4 1573 55 BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split 0 1 371 43
/**
 * Getter for property kSK_SPLT_CL.
 */
80
PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split(void) const;

1133 30 get_soft_vs_soft_impulse_split 0 4 1573 52 BulletSoftBodyConfig::get_soft_vs_soft_impulse_split 0 1 372 43
/**
 * Getter for property kSS_SPLT_CL.
 */
77
PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_impulse_split(void) const;

1134 13 get_maxvolume 0 4 1573 35 BulletSoftBodyConfig::get_maxvolume 0 1 373 41
/**
 * Getter for property maxvolume.
 */
60
PN_stdfloat BulletSoftBodyConfig::get_maxvolume(void) const;

1135 13 get_timescale 0 4 1573 35 BulletSoftBodyConfig::get_timescale 0 1 374 41
/**
 * Getter for property timescale.
 */
60
PN_stdfloat BulletSoftBodyConfig::get_timescale(void) const;

1136 31 get_positions_solver_iterations 0 4 1573 53 BulletSoftBodyConfig::get_positions_solver_iterations 0 1 375 43
/**
 * Getter for property piterations.
 */
70
int BulletSoftBodyConfig::get_positions_solver_iterations(void) const;

1137 32 get_velocities_solver_iterations 0 4 1573 54 BulletSoftBodyConfig::get_velocities_solver_iterations 0 1 376 43
/**
 * Getter for property viterations.
 */
71
int BulletSoftBodyConfig::get_velocities_solver_iterations(void) const;

1138 27 get_drift_solver_iterations 0 4 1573 49 BulletSoftBodyConfig::get_drift_solver_iterations 0 1 377 43
/**
 * Getter for property diterations.
 */
66
int BulletSoftBodyConfig::get_drift_solver_iterations(void) const;

1139 29 get_cluster_solver_iterations 0 4 1573 51 BulletSoftBodyConfig::get_cluster_solver_iterations 0 1 378 43
/**
 * Getter for property citerations.
 */
68
int BulletSoftBodyConfig::get_cluster_solver_iterations(void) const;

1140 20 BulletSoftBodyConfig 0 4 1573 42 BulletSoftBodyConfig::BulletSoftBodyConfig 0 1 325 10
/**
 *
 */
90
inline BulletSoftBodyConfig::BulletSoftBodyConfig(BulletSoftBodyConfig const &) = default;

1141 24 ~BulletSoftBodyWorldInfo 0 4 1576 49 BulletSoftBodyWorldInfo::~BulletSoftBodyWorldInfo 0 0 10
/**
 *
 */
63
inline BulletSoftBodyWorldInfo::~BulletSoftBodyWorldInfo(void);

1142 15 set_air_density 0 4 1576 40 BulletSoftBodyWorldInfo::set_air_density 0 1 380 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_air_density(PN_stdfloat density);

1143 17 set_water_density 0 4 1576 42 BulletSoftBodyWorldInfo::set_water_density 0 1 381 10
/**
 *
 */
69
void BulletSoftBodyWorldInfo::set_water_density(PN_stdfloat density);

1144 16 set_water_offset 0 4 1576 41 BulletSoftBodyWorldInfo::set_water_offset 0 1 382 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_water_offset(PN_stdfloat offset);

1145 16 set_water_normal 0 4 1576 41 BulletSoftBodyWorldInfo::set_water_normal 0 1 383 10
/**
 *
 */
71
void BulletSoftBodyWorldInfo::set_water_normal(LVector3 const &normal);

1146 11 set_gravity 0 4 1576 36 BulletSoftBodyWorldInfo::set_gravity 0 1 384 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_gravity(LVector3 const &gravity);

1147 15 get_air_density 0 4 1576 40 BulletSoftBodyWorldInfo::get_air_density 0 1 385 10
/**
 *
 */
65
PN_stdfloat BulletSoftBodyWorldInfo::get_air_density(void) const;

1148 17 get_water_density 0 4 1576 42 BulletSoftBodyWorldInfo::get_water_density 0 1 386 10
/**
 *
 */
67
PN_stdfloat BulletSoftBodyWorldInfo::get_water_density(void) const;

1149 16 get_water_offset 0 4 1576 41 BulletSoftBodyWorldInfo::get_water_offset 0 1 387 10
/**
 *
 */
66
PN_stdfloat BulletSoftBodyWorldInfo::get_water_offset(void) const;

1150 16 get_water_normal 0 4 1576 41 BulletSoftBodyWorldInfo::get_water_normal 0 1 388 10
/**
 *
 */
63
LVector3 BulletSoftBodyWorldInfo::get_water_normal(void) const;

1151 11 get_gravity 0 4 1576 36 BulletSoftBodyWorldInfo::get_gravity 0 1 389 10
/**
 *
 */
58
LVector3 BulletSoftBodyWorldInfo::get_gravity(void) const;

1152 15 garbage_collect 0 4 1576 40 BulletSoftBodyWorldInfo::garbage_collect 0 1 390 10
/**
 *
 */
66
void BulletSoftBodyWorldInfo::garbage_collect(int lifetime = 256);

1153 23 BulletSoftBodyWorldInfo 0 4 1576 48 BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo 0 1 379 10
/**
 *
 */
99
inline BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo(BulletSoftBodyWorldInfo const &) = default;

1154 23 ~BulletSoftBodyMaterial 0 4 1578 47 BulletSoftBodyMaterial::~BulletSoftBodyMaterial 0 0 10
/**
 *
 */
61
inline BulletSoftBodyMaterial::~BulletSoftBodyMaterial(void);

1155 5 empty 0 4 1578 29 BulletSoftBodyMaterial::empty 0 1 392 102
/**
 * Named constructor intended to be used for asserts which have to return a
 * concrete value.
 */
73
static inline BulletSoftBodyMaterial BulletSoftBodyMaterial::empty(void);

1156 20 get_linear_stiffness 0 4 1578 44 BulletSoftBodyMaterial::get_linear_stiffness 0 1 393 42
/**
 * Getter for the property m_kLST.
 */
69
PN_stdfloat BulletSoftBodyMaterial::get_linear_stiffness(void) const;

1157 20 set_linear_stiffness 0 4 1578 44 BulletSoftBodyMaterial::set_linear_stiffness 0 1 394 42
/**
 * Setter for the property m_kLST.
 */
69
void BulletSoftBodyMaterial::set_linear_stiffness(PN_stdfloat value);

1158 21 get_angular_stiffness 0 4 1578 45 BulletSoftBodyMaterial::get_angular_stiffness 0 1 395 42
/**
 * Getter for the property m_kAST.
 */
70
PN_stdfloat BulletSoftBodyMaterial::get_angular_stiffness(void) const;

1159 21 set_angular_stiffness 0 4 1578 45 BulletSoftBodyMaterial::set_angular_stiffness 0 1 396 42
/**
 * Setter for the property m_kAST.
 */
70
void BulletSoftBodyMaterial::set_angular_stiffness(PN_stdfloat value);

1160 23 get_volume_preservation 0 4 1578 47 BulletSoftBodyMaterial::get_volume_preservation 0 1 397 42
/**
 * Getter for the property m_kVST.
 */
72
PN_stdfloat BulletSoftBodyMaterial::get_volume_preservation(void) const;

1161 23 set_volume_preservation 0 4 1578 47 BulletSoftBodyMaterial::set_volume_preservation 0 1 398 42
/**
 * Setter for the property m_kVST.
 */
72
void BulletSoftBodyMaterial::set_volume_preservation(PN_stdfloat value);

1162 22 BulletSoftBodyMaterial 0 4 1578 46 BulletSoftBodyMaterial::BulletSoftBodyMaterial 0 1 391 10
/**
 *
 */
96
inline BulletSoftBodyMaterial::BulletSoftBodyMaterial(BulletSoftBodyMaterial const &) = default;

1163 0 0 0 0 0 0 0 0
0

1164 0 0 0 0 0 0 0 0
0

1165 14 get_class_type 0 4 1572 34 BulletSoftBodyNode::get_class_type 0 1 324 0
59
static TypeHandle BulletSoftBodyNode::get_class_type(void);

1166 24 set_suspension_stiffness 0 4 1579 45 BulletVehicleTuning::set_suspension_stiffness 0 1 399 10
/**
 *
 */
70
void BulletVehicleTuning::set_suspension_stiffness(PN_stdfloat value);

1167 26 set_suspension_compression 0 4 1579 47 BulletVehicleTuning::set_suspension_compression 0 1 400 10
/**
 *
 */
72
void BulletVehicleTuning::set_suspension_compression(PN_stdfloat value);

1168 22 set_suspension_damping 0 4 1579 43 BulletVehicleTuning::set_suspension_damping 0 1 401 10
/**
 *
 */
68
void BulletVehicleTuning::set_suspension_damping(PN_stdfloat value);

1169 28 set_max_suspension_travel_cm 0 4 1579 49 BulletVehicleTuning::set_max_suspension_travel_cm 0 1 402 10
/**
 *
 */
74
void BulletVehicleTuning::set_max_suspension_travel_cm(PN_stdfloat value);

1170 17 set_friction_slip 0 4 1579 38 BulletVehicleTuning::set_friction_slip 0 1 403 10
/**
 *
 */
63
void BulletVehicleTuning::set_friction_slip(PN_stdfloat value);

1171 24 set_max_suspension_force 0 4 1579 45 BulletVehicleTuning::set_max_suspension_force 0 1 404 10
/**
 *
 */
70
void BulletVehicleTuning::set_max_suspension_force(PN_stdfloat value);

1172 24 get_suspension_stiffness 0 4 1579 45 BulletVehicleTuning::get_suspension_stiffness 0 1 405 10
/**
 *
 */
70
PN_stdfloat BulletVehicleTuning::get_suspension_stiffness(void) const;

1173 26 get_suspension_compression 0 4 1579 47 BulletVehicleTuning::get_suspension_compression 0 1 406 10
/**
 *
 */
72
PN_stdfloat BulletVehicleTuning::get_suspension_compression(void) const;

1174 22 get_suspension_damping 0 4 1579 43 BulletVehicleTuning::get_suspension_damping 0 1 407 10
/**
 *
 */
68
PN_stdfloat BulletVehicleTuning::get_suspension_damping(void) const;

1175 28 get_max_suspension_travel_cm 0 4 1579 49 BulletVehicleTuning::get_max_suspension_travel_cm 0 1 408 10
/**
 *
 */
74
PN_stdfloat BulletVehicleTuning::get_max_suspension_travel_cm(void) const;

1176 17 get_friction_slip 0 4 1579 38 BulletVehicleTuning::get_friction_slip 0 1 409 10
/**
 *
 */
63
PN_stdfloat BulletVehicleTuning::get_friction_slip(void) const;

1177 24 get_max_suspension_force 0 4 1579 45 BulletVehicleTuning::get_max_suspension_force 0 1 410 10
/**
 *
 */
70
PN_stdfloat BulletVehicleTuning::get_max_suspension_force(void) const;

1178 13 BulletVehicle 0 4 1580 28 BulletVehicle::BulletVehicle 0 1 411 94
/**
 * Creates a new BulletVehicle instance in the given world and with a chassis
 * node.
 */
79
BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis);

1179 21 set_coordinate_system 0 4 1580 36 BulletVehicle::set_coordinate_system 0 1 412 100
/**
 * Specifies which axis is "up". Nessecary for the vehicle's suspension to
 * work properly!
 */
59
void BulletVehicle::set_coordinate_system(BulletUpAxis up);

1180 18 set_steering_value 0 4 1580 33 BulletVehicle::set_steering_value 0 1 413 76
/**
 * Sets the steering value (in degrees) of the wheel with index idx.
 */
70
void BulletVehicle::set_steering_value(PN_stdfloat steering, int idx);

1181 9 set_brake 0 4 1580 24 BulletVehicle::set_brake 0 1 414 61
/**
 * Applies braking force to the wheel with index idx.
 */
58
void BulletVehicle::set_brake(PN_stdfloat brake, int idx);

1182 17 set_pitch_control 0 4 1580 32 BulletVehicle::set_pitch_control 0 1 415 10
/**
 *
 */
57
void BulletVehicle::set_pitch_control(PN_stdfloat pitch);

1183 11 get_chassis 0 4 1580 26 BulletVehicle::get_chassis 0 1 416 82
/**
 * Returns the chassis of this vehicle.  The chassis is a rigid body node.
 */
54
BulletRigidBodyNode *BulletVehicle::get_chassis(void);

1184 25 get_current_speed_km_hour 0 4 1580 40 BulletVehicle::get_current_speed_km_hour 0 1 417 106
/**
 * Returns the current speed in kilometers per hour.  Convert to miles using:
 * km/h * 0.62 = mph
 */
65
PN_stdfloat BulletVehicle::get_current_speed_km_hour(void) const;

1185 18 get_steering_value 0 4 1580 33 BulletVehicle::get_steering_value 0 1 418 77
/**
 * Returns the steering angle of the wheel with index idx in degrees.
 */
61
PN_stdfloat BulletVehicle::get_steering_value(int idx) const;

1186 18 get_forward_vector 0 4 1580 33 BulletVehicle::get_forward_vector 0 1 419 145
/**
 * Returns the forward vector representing the car's actual direction of
 * movement.  The forward vetcor is given in global coordinates.
 */
55
LVector3 BulletVehicle::get_forward_vector(void) const;

1187 16 reset_suspension 0 4 1580 31 BulletVehicle::reset_suspension 0 1 420 43
/**
 * Resets the vehicle's suspension.
 */
43
void BulletVehicle::reset_suspension(void);

1188 18 apply_engine_force 0 4 1580 33 BulletVehicle::apply_engine_force 0 1 421 70
/**
 * Applies force at the wheel with index idx for acceleration.
 */
67
void BulletVehicle::apply_engine_force(PN_stdfloat force, int idx);

1189 12 create_wheel 0 4 1580 27 BulletVehicle::create_wheel 0 1 422 83
// Wheels

/**
 * Factory method for creating wheels for this vehicle instance.
 */
82
BulletWheel BulletVehicle::create_wheel(PN_stdfloat suspension_rest_length = 0.4);

1190 14 get_num_wheels 0 4 1580 29 BulletVehicle::get_num_wheels 0 1 423 57
/**
 * Returns the number of wheels this vehicle has.
 */
46
int BulletVehicle::get_num_wheels(void) const;

1191 9 get_wheel 0 4 1580 24 BulletVehicle::get_wheel 0 1 424 132
/**
 * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is
 * equal or larger than the number of wheels.
 */
52
BulletWheel BulletVehicle::get_wheel(int idx) const;

1192 10 get_tuning 0 4 1580 25 BulletVehicle::get_tuning 0 1 425 211
// Tuning

// Tuning

/**
 * Returns a reference to the BulletVehicleTuning object of this vehicle which
 * offers various vehicle-global tuning options.  Make sure to configure this
 * before adding wheels!
 */
60
inline BulletVehicleTuning &BulletVehicle::get_tuning(void);

1193 12 ~BulletWheel 0 4 1581 25 BulletWheel::~BulletWheel 0 0 10
/**
 *
 */
39
inline BulletWheel::~BulletWheel(void);

1194 24 set_suspension_stiffness 0 4 1581 37 BulletWheel::set_suspension_stiffness 0 1 428 50
/**
 * Sets how stiff the suspension shall be.
 */
62
void BulletWheel::set_suspension_stiffness(PN_stdfloat value);

1195 28 set_max_suspension_travel_cm 0 4 1581 41 BulletWheel::set_max_suspension_travel_cm 0 1 429 109
/**
 * Sets the maximum distance the suspension can travel out of the resting
 * position in centimeters.
 */
66
void BulletWheel::set_max_suspension_travel_cm(PN_stdfloat value);

1196 17 set_friction_slip 0 4 1581 30 BulletWheel::set_friction_slip 0 1 430 45
/**
 * Sets the slipperyness of the tyre.
 */
55
void BulletWheel::set_friction_slip(PN_stdfloat value);

1197 24 set_max_suspension_force 0 4 1581 37 BulletWheel::set_max_suspension_force 0 1 431 66
/**
 * Sets the maximum suspension force the wheel can handle.
 */
62
void BulletWheel::set_max_suspension_force(PN_stdfloat value);

1198 30 set_wheels_damping_compression 0 4 1581 43 BulletWheel::set_wheels_damping_compression 0 1 432 79
/**
 * Sets the damping forces applied when the suspension gets compressed.
 */
68
void BulletWheel::set_wheels_damping_compression(PN_stdfloat value);

1199 29 set_wheels_damping_relaxation 0 4 1581 42 BulletWheel::set_wheels_damping_relaxation 0 1 433 71
/**
 * Sets the damping forces applied when the suspension relaxes.
 */
67
void BulletWheel::set_wheels_damping_relaxation(PN_stdfloat value);

1200 18 set_roll_influence 0 4 1581 31 BulletWheel::set_roll_influence 0 1 434 249
/**
 * Defines a scaling factor for roll forces that affect the chassis.  0.0
 * means no roll - the chassis won't ever flip over - while 1.0 means original
 * physical behaviour.  Basically, this allows moving the center of mass up
 * and down.
 */
56
void BulletWheel::set_roll_influence(PN_stdfloat value);

1201 16 set_wheel_radius 0 4 1581 29 BulletWheel::set_wheel_radius 0 1 435 33
/**
 * Sets the wheel radius.
 */
54
void BulletWheel::set_wheel_radius(PN_stdfloat value);

1202 12 set_steering 0 4 1581 25 BulletWheel::set_steering 0 1 436 35
/**
 * Sets the steering angle.
 */
50
void BulletWheel::set_steering(PN_stdfloat value);

1203 12 set_rotation 0 4 1581 25 BulletWheel::set_rotation 0 1 437 10
/**
 *
 */
50
void BulletWheel::set_rotation(PN_stdfloat value);

1204 18 set_delta_rotation 0 4 1581 31 BulletWheel::set_delta_rotation 0 1 438 10
/**
 *
 */
56
void BulletWheel::set_delta_rotation(PN_stdfloat value);

1205 16 set_engine_force 0 4 1581 29 BulletWheel::set_engine_force 0 1 439 69
/**
 * Defines how much force should be used to rotate the wheel.
 */
54
void BulletWheel::set_engine_force(PN_stdfloat value);

1206 9 set_brake 0 4 1581 22 BulletWheel::set_brake 0 1 440 10
/**
 *
 */
47
void BulletWheel::set_brake(PN_stdfloat value);

1207 13 set_skid_info 0 4 1581 26 BulletWheel::set_skid_info 0 1 441 10
/**
 *
 */
51
void BulletWheel::set_skid_info(PN_stdfloat value);

1208 27 set_wheels_suspension_force 0 4 1581 40 BulletWheel::set_wheels_suspension_force 0 1 442 10
/**
 *
 */
65
void BulletWheel::set_wheels_suspension_force(PN_stdfloat value);

1209 32 set_suspension_relative_velocity 0 4 1581 45 BulletWheel::set_suspension_relative_velocity 0 1 443 10
/**
 *
 */
70
void BulletWheel::set_suspension_relative_velocity(PN_stdfloat value);

1210 35 set_clipped_inv_connection_point_cs 0 4 1581 48 BulletWheel::set_clipped_inv_connection_point_cs 0 1 444 10
/**
 *
 */
73
void BulletWheel::set_clipped_inv_connection_point_cs(PN_stdfloat value);

1211 31 set_chassis_connection_point_cs 0 4 1581 44 BulletWheel::set_chassis_connection_point_cs 0 1 445 70
/**
 * Sets the point where the wheel is connected to the chassis.
 */
70
void BulletWheel::set_chassis_connection_point_cs(LPoint3 const &pos);

1212 22 set_wheel_direction_cs 0 4 1581 35 BulletWheel::set_wheel_direction_cs 0 1 446 92
/**
 * Sets the wheel's forward vector.  (Most likely orthogonal to the axle
 * vector.)
 */
62
void BulletWheel::set_wheel_direction_cs(LVector3 const &dir);

1213 17 set_wheel_axle_cs 0 4 1581 30 BulletWheel::set_wheel_axle_cs 0 1 447 51
/**
 * Determines the wheel axle normal vector.
 */
58
void BulletWheel::set_wheel_axle_cs(LVector3 const &axle);

1214 19 set_world_transform 0 4 1581 32 BulletWheel::set_world_transform 0 1 448 10
/**
 *
 */
59
void BulletWheel::set_world_transform(LMatrix4 const &mat);

1215 15 set_front_wheel 0 4 1581 28 BulletWheel::set_front_wheel 0 1 449 42
/**
 * Sets if the wheel is steerable.
 */
46
void BulletWheel::set_front_wheel(bool value);

1216 8 set_node 0 4 1581 21 BulletWheel::set_node 0 1 450 86
/**
 * Sets the PandaNode which representates the visual appearance of this wheel.
 */
44
void BulletWheel::set_node(PandaNode *node);

1217 26 get_suspension_rest_length 0 4 1581 39 BulletWheel::get_suspension_rest_length 0 1 451 83
/**
 * Returns the length of the suspension when the vehicle is standing still.
 */
64
PN_stdfloat BulletWheel::get_suspension_rest_length(void) const;

1218 24 get_suspension_stiffness 0 4 1581 37 BulletWheel::get_suspension_stiffness 0 1 452 51
/**
 * Returns the stiffness of the suspension.
 */
62
PN_stdfloat BulletWheel::get_suspension_stiffness(void) const;

1219 28 get_max_suspension_travel_cm 0 4 1581 41 BulletWheel::get_max_suspension_travel_cm 0 1 453 10
/**
 *
 */
66
PN_stdfloat BulletWheel::get_max_suspension_travel_cm(void) const;

1220 17 get_friction_slip 0 4 1581 30 BulletWheel::get_friction_slip 0 1 454 46
/**
 * Returns how slippery the tyres are.
 */
55
PN_stdfloat BulletWheel::get_friction_slip(void) const;

1221 24 get_max_suspension_force 0 4 1581 37 BulletWheel::get_max_suspension_force 0 1 455 72
/**
 * Returns the maximum force (weight) the suspension can handle.
 */
62
PN_stdfloat BulletWheel::get_max_suspension_force(void) const;

1222 30 get_wheels_damping_compression 0 4 1581 43 BulletWheel::get_wheels_damping_compression 0 1 456 70
/**
 * Returns the  damping applied to the compressing suspension.
 */
68
PN_stdfloat BulletWheel::get_wheels_damping_compression(void) const;

1223 29 get_wheels_damping_relaxation 0 4 1581 42 BulletWheel::get_wheels_damping_relaxation 0 1 457 66
/**
 * Returns the damping applied to the relaxing suspension.
 */
67
PN_stdfloat BulletWheel::get_wheels_damping_relaxation(void) const;

1224 18 get_roll_influence 0 4 1581 31 BulletWheel::get_roll_influence 0 1 458 90
/**
 * Returns the factor by which roll forces are scaled.  See
 * set_roll_influence.
 */
56
PN_stdfloat BulletWheel::get_roll_influence(void) const;

1225 16 get_wheel_radius 0 4 1581 29 BulletWheel::get_wheel_radius 0 1 459 36
/**
 * Returns the wheel radius.
 */
54
PN_stdfloat BulletWheel::get_wheel_radius(void) const;

1226 12 get_steering 0 4 1581 25 BulletWheel::get_steering 0 1 460 49
/**
 * Returns the steering angle in degrees.
 */
50
PN_stdfloat BulletWheel::get_steering(void) const;

1227 12 get_rotation 0 4 1581 25 BulletWheel::get_rotation 0 1 461 10
/**
 *
 */
50
PN_stdfloat BulletWheel::get_rotation(void) const;

1228 18 get_delta_rotation 0 4 1581 31 BulletWheel::get_delta_rotation 0 1 462 10
/**
 *
 */
56
PN_stdfloat BulletWheel::get_delta_rotation(void) const;

1229 16 get_engine_force 0 4 1581 29 BulletWheel::get_engine_force 0 1 463 71
/**
 * Returns the amount of accelleration force currently applied.
 */
54
PN_stdfloat BulletWheel::get_engine_force(void) const;

1230 9 get_brake 0 4 1581 22 BulletWheel::get_brake 0 1 464 65
/**
 * Returns the amount of braking force currently applied.
 */
47
PN_stdfloat BulletWheel::get_brake(void) const;

1231 13 get_skid_info 0 4 1581 26 BulletWheel::get_skid_info 0 1 465 10
/**
 *
 */
51
PN_stdfloat BulletWheel::get_skid_info(void) const;

1232 27 get_wheels_suspension_force 0 4 1581 40 BulletWheel::get_wheels_suspension_force 0 1 466 10
/**
 *
 */
65
PN_stdfloat BulletWheel::get_wheels_suspension_force(void) const;

1233 32 get_suspension_relative_velocity 0 4 1581 45 BulletWheel::get_suspension_relative_velocity 0 1 467 10
/**
 *
 */
70
PN_stdfloat BulletWheel::get_suspension_relative_velocity(void) const;

1234 35 get_clipped_inv_connection_point_cs 0 4 1581 48 BulletWheel::get_clipped_inv_connection_point_cs 0 1 468 10
/**
 *
 */
73
PN_stdfloat BulletWheel::get_clipped_inv_connection_point_cs(void) const;

1235 31 get_chassis_connection_point_cs 0 4 1581 44 BulletWheel::get_chassis_connection_point_cs 0 1 469 73
/**
 * Returns the point where the wheel is connected to the chassis.
 */
65
LPoint3 BulletWheel::get_chassis_connection_point_cs(void) const;

1236 22 get_wheel_direction_cs 0 4 1581 35 BulletWheel::get_wheel_direction_cs 0 1 470 70
/**
 * Returns the wheel's forward vector relative to the chassis.
 */
57
LVector3 BulletWheel::get_wheel_direction_cs(void) const;

1237 17 get_wheel_axle_cs 0 4 1581 30 BulletWheel::get_wheel_axle_cs 0 1 471 55
/**
 * Returns the normal vector of the wheel axle.
 */
52
LVector3 BulletWheel::get_wheel_axle_cs(void) const;

1238 19 get_world_transform 0 4 1581 32 BulletWheel::get_world_transform 0 1 472 10
/**
 *
 */
54
LMatrix4 BulletWheel::get_world_transform(void) const;

1239 14 is_front_wheel 0 4 1581 27 BulletWheel::is_front_wheel 0 1 473 46
/**
 * Determines if a wheel is steerable.
 */
45
bool BulletWheel::is_front_wheel(void) const;

1240 8 get_node 0 4 1581 21 BulletWheel::get_node 0 1 474 142
/**
 * Returns the PandaNode which representates the visual appearance of this
 * wheel, if such a representation has been set previously.
 */
45
PandaNode *BulletWheel::get_node(void) const;

1241 16 get_raycast_info 0 4 1581 29 BulletWheel::get_raycast_info 0 1 475 10
/**
 *
 */
65
BulletWheelRaycastInfo BulletWheel::get_raycast_info(void) const;

1242 23 ~BulletWheelRaycastInfo 0 4 1582 47 BulletWheelRaycastInfo::~BulletWheelRaycastInfo 0 0 10
/**
 *
 */
61
inline BulletWheelRaycastInfo::~BulletWheelRaycastInfo(void);

1243 13 is_in_contact 0 4 1582 37 BulletWheelRaycastInfo::is_in_contact 0 1 477 10
/**
 *
 */
55
bool BulletWheelRaycastInfo::is_in_contact(void) const;

1244 21 get_suspension_length 0 4 1582 45 BulletWheelRaycastInfo::get_suspension_length 0 1 478 10
/**
 *
 */
70
PN_stdfloat BulletWheelRaycastInfo::get_suspension_length(void) const;

1245 21 get_contact_normal_ws 0 4 1582 45 BulletWheelRaycastInfo::get_contact_normal_ws 0 1 479 10
/**
 *
 */
67
LVector3 BulletWheelRaycastInfo::get_contact_normal_ws(void) const;

1246 22 get_wheel_direction_ws 0 4 1582 46 BulletWheelRaycastInfo::get_wheel_direction_ws 0 1 480 10
/**
 *
 */
68
LVector3 BulletWheelRaycastInfo::get_wheel_direction_ws(void) const;

1247 17 get_wheel_axle_ws 0 4 1582 41 BulletWheelRaycastInfo::get_wheel_axle_ws 0 1 481 10
/**
 *
 */
63
LVector3 BulletWheelRaycastInfo::get_wheel_axle_ws(void) const;

1248 20 get_contact_point_ws 0 4 1582 44 BulletWheelRaycastInfo::get_contact_point_ws 0 1 482 10
/**
 *
 */
65
LPoint3 BulletWheelRaycastInfo::get_contact_point_ws(void) const;

1249 17 get_hard_point_ws 0 4 1582 41 BulletWheelRaycastInfo::get_hard_point_ws 0 1 483 10
/**
 *
 */
62
LPoint3 BulletWheelRaycastInfo::get_hard_point_ws(void) const;

1250 17 get_ground_object 0 4 1582 41 BulletWheelRaycastInfo::get_ground_object 0 1 484 10
/**
 *
 */
65
PandaNode *BulletWheelRaycastInfo::get_ground_object(void) const;

1251 22 BulletWheelRaycastInfo 0 4 1582 46 BulletWheelRaycastInfo::BulletWheelRaycastInfo 0 1 476 10
/**
 *
 */
96
inline BulletWheelRaycastInfo::BulletWheelRaycastInfo(BulletWheelRaycastInfo const &) = default;

1252 11 BulletWheel 0 4 1581 24 BulletWheel::BulletWheel 0 1 427 10
/**
 *
 */
63
inline BulletWheel::BulletWheel(BulletWheel const &) = default;

1253 0 0 0 0 0 0 0 0
0

1254 14 get_class_type 0 4 1580 29 BulletVehicle::get_class_type 0 1 426 0
54
static TypeHandle BulletVehicle::get_class_type(void);

1255 11 BulletWorld 0 4 1583 24 BulletWorld::BulletWorld 0 1 485 10
/**
 *
 */
31
BulletWorld::BulletWorld(void);

1256 11 set_gravity 0 4 1583 24 BulletWorld::set_gravity 0 2 486 487 22
/**
 *
 */

/**
 *
 */
134
void BulletWorld::set_gravity(LVector3 const &gravity);
void BulletWorld::set_gravity(PN_stdfloat gx, PN_stdfloat gy, PN_stdfloat gz);

1257 11 get_gravity 0 4 1583 24 BulletWorld::get_gravity 0 1 488 10
/**
 *
 */
52
LVector3 const BulletWorld::get_gravity(void) const;

1258 10 do_physics 0 4 1583 23 BulletWorld::do_physics 0 1 489 10
/**
 *
 */
103
int BulletWorld::do_physics(PN_stdfloat dt, int max_substeps = 1, PN_stdfloat stepsize = (1.0 / 60.0));

1259 14 get_world_info 0 4 1583 27 BulletWorld::get_world_info 0 1 490 10
/**
 *
 */
58
BulletSoftBodyWorldInfo BulletWorld::get_world_info(void);

1260 14 set_debug_node 0 4 1583 27 BulletWorld::set_debug_node 0 1 491 30
// Debug

// Debug

/**
 *
 */
56
void BulletWorld::set_debug_node(BulletDebugNode *node);

1261 16 clear_debug_node 0 4 1583 29 BulletWorld::clear_debug_node 0 1 492 75
/**
 * Removes a debug node that has been assigned to this BulletWorld.
 */
41
void BulletWorld::clear_debug_node(void);

1262 14 get_debug_node 0 4 1583 27 BulletWorld::get_debug_node 0 1 493 10
/**
 *
 */
64
inline BulletDebugNode *BulletWorld::get_debug_node(void) const;

1263 14 has_debug_node 0 4 1583 27 BulletWorld::has_debug_node 0 1 494 10
/**
 *
 */
52
inline bool BulletWorld::has_debug_node(void) const;

1264 6 attach 0 4 1583 19 BulletWorld::attach 0 1 495 27
// AttachRemove

/**
 *
 */
46
void BulletWorld::attach(TypedObject *object);

1265 6 remove 0 4 1583 19 BulletWorld::remove 0 1 496 10
/**
 *
 */
46
void BulletWorld::remove(TypedObject *object);

1266 17 attach_constraint 0 4 1583 30 BulletWorld::attach_constraint 0 1 497 156
/**
 * Attaches a single constraint to a world.  Collision checks between the
 * linked objects will be disabled if the second parameter is set to TRUE.
 */
97
void BulletWorld::attach_constraint(BulletConstraint *constraint, bool linked_collision = false);

1267 14 get_num_ghosts 0 4 1583 27 BulletWorld::get_num_ghosts 0 1 498 61
// Ghost object

// Ghost object

// Ghost object

/**
 *
 */
44
int BulletWorld::get_num_ghosts(void) const;

1268 9 get_ghost 0 4 1583 22 BulletWorld::get_ghost 0 1 499 10
/**
 *
 */
55
BulletGhostNode *BulletWorld::get_ghost(int idx) const;

1269 20 get_num_rigid_bodies 0 4 1583 33 BulletWorld::get_num_rigid_bodies 0 1 500 55
// Rigid body

// Rigid body

// Rigid body

/**
 *
 */
50
int BulletWorld::get_num_rigid_bodies(void) const;

1270 14 get_rigid_body 0 4 1583 27 BulletWorld::get_rigid_body 0 1 501 10
/**
 *
 */
64
BulletRigidBodyNode *BulletWorld::get_rigid_body(int idx) const;

1271 19 get_num_soft_bodies 0 4 1583 32 BulletWorld::get_num_soft_bodies 0 1 502 52
// Soft body

// Soft body

// Soft body

/**
 *
 */
49
int BulletWorld::get_num_soft_bodies(void) const;

1272 13 get_soft_body 0 4 1583 26 BulletWorld::get_soft_body 0 1 503 10
/**
 *
 */
62
BulletSoftBodyNode *BulletWorld::get_soft_body(int idx) const;

1273 18 get_num_characters 0 4 1583 31 BulletWorld::get_num_characters 0 1 504 85
// Character controller

// Character controller

// Character controller

/**
 *
 */
48
int BulletWorld::get_num_characters(void) const;

1274 13 get_character 0 4 1583 26 BulletWorld::get_character 0 1 505 10
/**
 *
 */
77
BulletBaseCharacterControllerNode *BulletWorld::get_character(int idx) const;

1275 16 get_num_vehicles 0 4 1583 29 BulletWorld::get_num_vehicles 0 1 506 10
/**
 *
 */
46
int BulletWorld::get_num_vehicles(void) const;

1276 11 get_vehicle 0 4 1583 24 BulletWorld::get_vehicle 0 1 507 10
/**
 *
 */
55
BulletVehicle *BulletWorld::get_vehicle(int idx) const;

1277 19 get_num_constraints 0 4 1583 32 BulletWorld::get_num_constraints 0 1 508 55
// Constraint

// Constraint

// Constraint

/**
 *
 */
49
int BulletWorld::get_num_constraints(void) const;

1278 14 get_constraint 0 4 1583 27 BulletWorld::get_constraint 0 1 509 10
/**
 *
 */
61
BulletConstraint *BulletWorld::get_constraint(int idx) const;

1279 16 ray_test_closest 0 4 1583 29 BulletWorld::ray_test_closest 0 1 510 40
// Raycast and other queries

/**
 *
 */
159
BulletClosestHitRayResult BulletWorld::ray_test_closest(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const;

1280 12 ray_test_all 0 4 1583 25 BulletWorld::ray_test_all 0 1 511 10
/**
 *
 */
152
BulletAllHitsRayResult BulletWorld::ray_test_all(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const;

1281 18 sweep_test_closest 0 4 1583 31 BulletWorld::sweep_test_closest 0 1 512 203
/**
 * Performs a sweep test against all other shapes that match the given group
 * mask.  The provided shape must be a convex shape; it is an error to invoke
 * this method using a non-convex shape.
 */
226
BulletClosestHitSweepResult BulletWorld::sweep_test_closest(BulletShape *shape, TransformState const &from_ts, TransformState const &to_ts, CollideMask const &mask = CollideMask::all_on(), PN_stdfloat penetration = 0.0) const;

1282 12 contact_test 0 4 1583 25 BulletWorld::contact_test 0 1 513 386
/**
 * Performas a test for all bodies which are currently in contact with the
 * given body.  The test returns a BulletContactResult object which may
 * contain zero, one or more contacts.
 *
 * If the optional parameter use_filter is set to TRUE this test will consider
 * filter settings.  Otherwise all objects in contact are reported, no matter
 * if they would collide or not.
 */
94
BulletContactResult BulletWorld::contact_test(PandaNode *node, bool use_filter = false) const;

1283 17 contact_test_pair 0 4 1583 30 BulletWorld::contact_test_pair 0 1 514 181
/**
 * Performas a test if the two bodies given as parameters are in contact or
 * not.  The test returns a BulletContactResult object which may contain zero
 * or one contacts.
 */
93
BulletContactResult BulletWorld::contact_test_pair(PandaNode *node0, PandaNode *node1) const;

1284 11 filter_test 0 4 1583 24 BulletWorld::filter_test 0 1 515 105
/**
 * Performs a test if two bodies should collide or not, based on the collision
 * filter setting.
 */
72
bool BulletWorld::filter_test(PandaNode *node0, PandaNode *node1) const;

1285 17 get_num_manifolds 0 4 1583 30 BulletWorld::get_num_manifolds 0 1 516 52
// Manifolds

// Manifolds

// Manifolds

/**
 *
 */
47
int BulletWorld::get_num_manifolds(void) const;

1286 12 get_manifold 0 4 1583 25 BulletWorld::get_manifold 0 1 517 10
/**
 *
 */
67
BulletPersistentManifold *BulletWorld::get_manifold(int idx) const;

1287 24 set_group_collision_flag 0 4 1583 37 BulletWorld::set_group_collision_flag 0 1 518 34
// Collision filtering

/**
 *
 */
98
void BulletWorld::set_group_collision_flag(unsigned int group1, unsigned int group2, bool enable);

1288 24 get_group_collision_flag 0 4 1583 37 BulletWorld::get_group_collision_flag 0 1 519 10
/**
 *
 */
91
bool BulletWorld::get_group_collision_flag(unsigned int group1, unsigned int group2) const;

1289 26 set_force_update_all_aabbs 0 4 1583 39 BulletWorld::set_force_update_all_aabbs 0 1 520 10
/**
 *
 */
57
void BulletWorld::set_force_update_all_aabbs(bool force);

1290 26 get_force_update_all_aabbs 0 4 1583 39 BulletWorld::get_force_update_all_aabbs 0 1 521 10
/**
 *
 */
57
bool BulletWorld::get_force_update_all_aabbs(void) const;

1291 26 set_contact_added_callback 0 4 1583 39 BulletWorld::set_contact_added_callback 0 1 522 24
// Callbacks

/**
 *
 */
66
void BulletWorld::set_contact_added_callback(CallbackObject *obj);

1292 28 clear_contact_added_callback 0 4 1583 41 BulletWorld::clear_contact_added_callback 0 1 523 10
/**
 *
 */
53
void BulletWorld::clear_contact_added_callback(void);

1293 17 set_tick_callback 0 4 1583 30 BulletWorld::set_tick_callback 0 1 524 10
/**
 *
 */
82
void BulletWorld::set_tick_callback(CallbackObject *obj, bool is_pretick = false);

1294 19 clear_tick_callback 0 4 1583 32 BulletWorld::clear_tick_callback 0 1 525 10
/**
 *
 */
44
void BulletWorld::clear_tick_callback(void);

1295 19 set_filter_callback 0 4 1583 32 BulletWorld::set_filter_callback 0 1 526 10
/**
 *
 */
59
void BulletWorld::set_filter_callback(CallbackObject *obj);

1296 21 clear_filter_callback 0 4 1583 34 BulletWorld::clear_filter_callback 0 1 527 10
/**
 *
 */
46
void BulletWorld::clear_filter_callback(void);

1297 0 0 0 0 0 0 0 0
0

1298 0 0 0 0 0 0 0 0
0

1299 0 0 0 0 0 0 0 0
0

1300 0 0 0 0 0 0 0 0
0

1301 0 0 0 0 0 0 0 0
0

1302 0 0 0 0 0 0 0 0
0

1303 25 ~BulletPersistentManifold 0 4 1593 51 BulletPersistentManifold::~BulletPersistentManifold 0 0 10
/**
 *
 */
65
inline BulletPersistentManifold::~BulletPersistentManifold(void);

1304 9 get_node0 0 4 1593 35 BulletPersistentManifold::get_node0 0 1 541 10
/**
 *
 */
53
PandaNode *BulletPersistentManifold::get_node0(void);

1305 9 get_node1 0 4 1593 35 BulletPersistentManifold::get_node1 0 1 542 10
/**
 *
 */
53
PandaNode *BulletPersistentManifold::get_node1(void);

1306 23 get_num_manifold_points 0 4 1593 49 BulletPersistentManifold::get_num_manifold_points 0 1 543 10
/**
 *
 */
66
int BulletPersistentManifold::get_num_manifold_points(void) const;

1307 18 get_manifold_point 0 4 1593 44 BulletPersistentManifold::get_manifold_point 0 1 544 10
/**
 *
 */
81
BulletManifoldPoint *BulletPersistentManifold::get_manifold_point(int idx) const;

1308 30 get_contact_breaking_threshold 0 4 1593 56 BulletPersistentManifold::get_contact_breaking_threshold 0 1 545 10
/**
 *
 */
81
PN_stdfloat BulletPersistentManifold::get_contact_breaking_threshold(void) const;

1309 32 get_contact_processing_threshold 0 4 1593 58 BulletPersistentManifold::get_contact_processing_threshold 0 1 546 10
/**
 *
 */
83
PN_stdfloat BulletPersistentManifold::get_contact_processing_threshold(void) const;

1310 14 clear_manifold 0 4 1593 40 BulletPersistentManifold::clear_manifold 0 1 547 10
/**
 *
 */
52
void BulletPersistentManifold::clear_manifold(void);

1311 0 0 0 0 0 0 0 0
0

1312 24 BulletPersistentManifold 0 4 1593 50 BulletPersistentManifold::BulletPersistentManifold 0 1 540 10
/**
 *
 */
102
inline BulletPersistentManifold::BulletPersistentManifold(BulletPersistentManifold const &) = default;

1313 0 0 0 0 0 0 0 0
0

1314 12 attach_ghost 0 4 1583 25 BulletWorld::attach_ghost 0 1 528 99
// Deprecated methods, will be removed soon

/**
 * Deprecated!  Please use BulletWorld::attach
 */
54
void BulletWorld::attach_ghost(BulletGhostNode *node);

1315 12 remove_ghost 0 4 1583 25 BulletWorld::remove_ghost 0 1 529 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
54
void BulletWorld::remove_ghost(BulletGhostNode *node);

1316 17 attach_rigid_body 0 4 1583 30 BulletWorld::attach_rigid_body 0 1 530 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
63
void BulletWorld::attach_rigid_body(BulletRigidBodyNode *node);

1317 17 remove_rigid_body 0 4 1583 30 BulletWorld::remove_rigid_body 0 1 531 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
63
void BulletWorld::remove_rigid_body(BulletRigidBodyNode *node);

1318 16 attach_soft_body 0 4 1583 29 BulletWorld::attach_soft_body 0 1 532 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
61
void BulletWorld::attach_soft_body(BulletSoftBodyNode *node);

1319 16 remove_soft_body 0 4 1583 29 BulletWorld::remove_soft_body 0 1 533 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
61
void BulletWorld::remove_soft_body(BulletSoftBodyNode *node);

1320 16 attach_character 0 4 1583 29 BulletWorld::attach_character 0 1 534 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
76
void BulletWorld::attach_character(BulletBaseCharacterControllerNode *node);

1321 16 remove_character 0 4 1583 29 BulletWorld::remove_character 0 1 535 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
76
void BulletWorld::remove_character(BulletBaseCharacterControllerNode *node);

1322 14 attach_vehicle 0 4 1583 27 BulletWorld::attach_vehicle 0 1 536 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
57
void BulletWorld::attach_vehicle(BulletVehicle *vehicle);

1323 14 remove_vehicle 0 4 1583 27 BulletWorld::remove_vehicle 0 1 537 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
57
void BulletWorld::remove_vehicle(BulletVehicle *vehicle);

1324 17 remove_constraint 0 4 1583 30 BulletWorld::remove_constraint 0 1 538 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
66
void BulletWorld::remove_constraint(BulletConstraint *constraint);

1325 14 get_class_type 0 4 1583 27 BulletWorld::get_class_type 0 1 539 0
52
static TypeHandle BulletWorld::get_class_type(void);

1326 21 BulletConvexHullShape 0 4 1595 44 BulletConvexHullShape::BulletConvexHullShape 0 2 548 549 22
/**
 *
 */

/**
 *
 */
132
BulletConvexHullShape::BulletConvexHullShape(void);
BulletConvexHullShape::BulletConvexHullShape(BulletConvexHullShape const &copy);

1327 9 add_point 0 4 1595 32 BulletConvexHullShape::add_point 0 1 550 10
/**
 *
 */
56
void BulletConvexHullShape::add_point(LPoint3 const &p);

1328 9 add_array 0 4 1595 32 BulletConvexHullShape::add_array 0 1 551 10
/**
 *
 */
67
void BulletConvexHullShape::add_array(PTA_LVecBase3 const &points);

1329 8 add_geom 0 4 1595 31 BulletConvexHullShape::add_geom 0 1 552 10
/**
 *
 */
115
void BulletConvexHullShape::add_geom(Geom const *geom, TransformState const *ts = TransformState::make_identity());

1330 14 get_class_type 0 4 1595 37 BulletConvexHullShape::get_class_type 0 1 553 0
62
static TypeHandle BulletConvexHullShape::get_class_type(void);

1331 27 BulletConvexPointCloudShape 0 4 1596 56 BulletConvexPointCloudShape::BulletConvexPointCloudShape 0 3 554 555 556 74
/**
 * Only used by make_from_bam.
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
347
explicit BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale = LVecBase3(1.0));
explicit BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale = LVecBase3(1.0));
BulletConvexPointCloudShape::BulletConvexPointCloudShape(BulletConvexPointCloudShape const &copy);

1332 14 get_num_points 0 4 1596 43 BulletConvexPointCloudShape::get_num_points 0 1 557 10
/**
 *
 */
60
int BulletConvexPointCloudShape::get_num_points(void) const;

1333 14 get_class_type 0 4 1596 43 BulletConvexPointCloudShape::get_class_type 0 1 558 0
68
static TypeHandle BulletConvexPointCloudShape::get_class_type(void);

1334 19 BulletCylinderShape 0 4 1597 40 BulletCylinderShape::BulletCylinderShape 0 3 559 560 561 74
/**
 * Only used by make_from_bam.
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
298
explicit BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
explicit BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up = ::Z_up);
BulletCylinderShape::BulletCylinderShape(BulletCylinderShape const &copy);

1335 10 get_radius 0 4 1597 31 BulletCylinderShape::get_radius 0 1 562 10
/**
 *
 */
56
PN_stdfloat BulletCylinderShape::get_radius(void) const;

1336 31 get_half_extents_without_margin 0 4 1597 52 BulletCylinderShape::get_half_extents_without_margin 0 1 563 10
/**
 *
 */
75
LVecBase3 BulletCylinderShape::get_half_extents_without_margin(void) const;

1337 28 get_half_extents_with_margin 0 4 1597 49 BulletCylinderShape::get_half_extents_with_margin 0 1 564 10
/**
 *
 */
72
LVecBase3 BulletCylinderShape::get_half_extents_with_margin(void) const;

1338 14 get_class_type 0 4 1597 35 BulletCylinderShape::get_class_type 0 1 565 0
60
static TypeHandle BulletCylinderShape::get_class_type(void);

1339 24 BulletFilterCallbackData 0 4 1598 50 BulletFilterCallbackData::BulletFilterCallbackData 0 1 566 10
/**
 *
 */
94
inline BulletFilterCallbackData::BulletFilterCallbackData(PandaNode *node0, PandaNode *node1);

1340 10 get_node_0 0 4 1598 36 BulletFilterCallbackData::get_node_0 0 1 567 10
/**
 *
 */
67
inline PandaNode *BulletFilterCallbackData::get_node_0(void) const;

1341 10 get_node_1 0 4 1598 36 BulletFilterCallbackData::get_node_1 0 1 568 10
/**
 *
 */
67
inline PandaNode *BulletFilterCallbackData::get_node_1(void) const;

1342 11 set_collide 0 4 1598 37 BulletFilterCallbackData::set_collide 0 1 569 10
/**
 *
 */
64
inline void BulletFilterCallbackData::set_collide(bool collide);

1343 11 get_collide 0 4 1598 37 BulletFilterCallbackData::get_collide 0 1 570 10
/**
 *
 */
62
inline bool BulletFilterCallbackData::get_collide(void) const;

1344 14 get_class_type 0 4 1598 40 BulletFilterCallbackData::get_class_type 0 1 571 0
65
static TypeHandle BulletFilterCallbackData::get_class_type(void);

1345 25 ~BulletFilterCallbackData 0 4 1598 51 BulletFilterCallbackData::~BulletFilterCallbackData 0 0 0
58
BulletFilterCallbackData::~BulletFilterCallbackData(void);

1346 26 BulletRotationalLimitMotor 0 4 1599 54 BulletRotationalLimitMotor::BulletRotationalLimitMotor 0 1 572 22
/**
 *
 */

/**
 *
 */
95
BulletRotationalLimitMotor::BulletRotationalLimitMotor(BulletRotationalLimitMotor const &copy);

1347 27 ~BulletRotationalLimitMotor 0 4 1599 55 BulletRotationalLimitMotor::~BulletRotationalLimitMotor 0 0 10
/**
 *
 */
69
inline BulletRotationalLimitMotor::~BulletRotationalLimitMotor(void);

1348 17 set_motor_enabled 0 4 1599 45 BulletRotationalLimitMotor::set_motor_enabled 0 1 573 10
/**
 *
 */
64
void BulletRotationalLimitMotor::set_motor_enabled(bool enable);

1349 13 set_low_limit 0 4 1599 41 BulletRotationalLimitMotor::set_low_limit 0 1 574 10
/**
 *
 */
66
void BulletRotationalLimitMotor::set_low_limit(PN_stdfloat limit);

1350 14 set_high_limit 0 4 1599 42 BulletRotationalLimitMotor::set_high_limit 0 1 575 10
/**
 *
 */
67
void BulletRotationalLimitMotor::set_high_limit(PN_stdfloat limit);

1351 19 set_target_velocity 0 4 1599 47 BulletRotationalLimitMotor::set_target_velocity 0 1 576 10
/**
 *
 */
75
void BulletRotationalLimitMotor::set_target_velocity(PN_stdfloat velocity);

1352 19 set_max_motor_force 0 4 1599 47 BulletRotationalLimitMotor::set_max_motor_force 0 1 577 10
/**
 *
 */
72
void BulletRotationalLimitMotor::set_max_motor_force(PN_stdfloat force);

1353 19 set_max_limit_force 0 4 1599 47 BulletRotationalLimitMotor::set_max_limit_force 0 1 578 10
/**
 *
 */
72
void BulletRotationalLimitMotor::set_max_limit_force(PN_stdfloat force);

1354 11 set_damping 0 4 1599 39 BulletRotationalLimitMotor::set_damping 0 1 579 10
/**
 *
 */
66
void BulletRotationalLimitMotor::set_damping(PN_stdfloat damping);

1355 12 set_softness 0 4 1599 40 BulletRotationalLimitMotor::set_softness 0 1 580 10
/**
 *
 */
68
void BulletRotationalLimitMotor::set_softness(PN_stdfloat softness);

1356 10 set_bounce 0 4 1599 38 BulletRotationalLimitMotor::set_bounce 0 1 581 10
/**
 *
 */
64
void BulletRotationalLimitMotor::set_bounce(PN_stdfloat bounce);

1357 14 set_normal_cfm 0 4 1599 42 BulletRotationalLimitMotor::set_normal_cfm 0 1 582 10
/**
 *
 */
65
void BulletRotationalLimitMotor::set_normal_cfm(PN_stdfloat cfm);

1358 12 set_stop_cfm 0 4 1599 40 BulletRotationalLimitMotor::set_stop_cfm 0 1 583 10
/**
 *
 */
63
void BulletRotationalLimitMotor::set_stop_cfm(PN_stdfloat cfm);

1359 12 set_stop_erp 0 4 1599 40 BulletRotationalLimitMotor::set_stop_erp 0 1 584 10
/**
 *
 */
63
void BulletRotationalLimitMotor::set_stop_erp(PN_stdfloat erp);

1360 10 is_limited 0 4 1599 38 BulletRotationalLimitMotor::is_limited 0 1 585 10
/**
 *
 */
56
bool BulletRotationalLimitMotor::is_limited(void) const;

1361 17 get_motor_enabled 0 4 1599 45 BulletRotationalLimitMotor::get_motor_enabled 0 1 586 10
/**
 *
 */
63
bool BulletRotationalLimitMotor::get_motor_enabled(void) const;

1362 17 get_current_limit 0 4 1599 45 BulletRotationalLimitMotor::get_current_limit 0 1 587 98
/**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */
62
int BulletRotationalLimitMotor::get_current_limit(void) const;

1363 17 get_current_error 0 4 1599 45 BulletRotationalLimitMotor::get_current_error 0 1 588 10
/**
 *
 */
70
PN_stdfloat BulletRotationalLimitMotor::get_current_error(void) const;

1364 20 get_current_position 0 4 1599 48 BulletRotationalLimitMotor::get_current_position 0 1 589 10
/**
 *
 */
73
PN_stdfloat BulletRotationalLimitMotor::get_current_position(void) const;

1365 23 get_accumulated_impulse 0 4 1599 51 BulletRotationalLimitMotor::get_accumulated_impulse 0 1 590 10
/**
 *
 */
76
PN_stdfloat BulletRotationalLimitMotor::get_accumulated_impulse(void) const;

1366 29 BulletTranslationalLimitMotor 0 4 1600 60 BulletTranslationalLimitMotor::BulletTranslationalLimitMotor 0 1 591 22
/**
 *
 */

/**
 *
 */
104
BulletTranslationalLimitMotor::BulletTranslationalLimitMotor(BulletTranslationalLimitMotor const &copy);

1367 30 ~BulletTranslationalLimitMotor 0 4 1600 61 BulletTranslationalLimitMotor::~BulletTranslationalLimitMotor 0 0 10
/**
 *
 */
75
inline BulletTranslationalLimitMotor::~BulletTranslationalLimitMotor(void);

1368 17 set_motor_enabled 0 4 1600 48 BulletTranslationalLimitMotor::set_motor_enabled 0 1 592 10
/**
 *
 */
77
void BulletTranslationalLimitMotor::set_motor_enabled(int axis, bool enable);

1369 13 set_low_limit 0 4 1600 44 BulletTranslationalLimitMotor::set_low_limit 0 1 593 10
/**
 *
 */
74
void BulletTranslationalLimitMotor::set_low_limit(LVecBase3 const &limit);

1370 14 set_high_limit 0 4 1600 45 BulletTranslationalLimitMotor::set_high_limit 0 1 594 10
/**
 *
 */
75
void BulletTranslationalLimitMotor::set_high_limit(LVecBase3 const &limit);

1371 19 set_target_velocity 0 4 1600 50 BulletTranslationalLimitMotor::set_target_velocity 0 1 595 10
/**
 *
 */
83
void BulletTranslationalLimitMotor::set_target_velocity(LVecBase3 const &velocity);

1372 19 set_max_motor_force 0 4 1600 50 BulletTranslationalLimitMotor::set_max_motor_force 0 1 596 10
/**
 *
 */
80
void BulletTranslationalLimitMotor::set_max_motor_force(LVecBase3 const &force);

1373 11 set_damping 0 4 1600 42 BulletTranslationalLimitMotor::set_damping 0 1 597 10
/**
 *
 */
69
void BulletTranslationalLimitMotor::set_damping(PN_stdfloat damping);

1374 12 set_softness 0 4 1600 43 BulletTranslationalLimitMotor::set_softness 0 1 598 10
/**
 *
 */
71
void BulletTranslationalLimitMotor::set_softness(PN_stdfloat softness);

1375 15 set_restitution 0 4 1600 46 BulletTranslationalLimitMotor::set_restitution 0 1 599 10
/**
 *
 */
77
void BulletTranslationalLimitMotor::set_restitution(PN_stdfloat restitution);

1376 14 set_normal_cfm 0 4 1600 45 BulletTranslationalLimitMotor::set_normal_cfm 0 1 600 10
/**
 *
 */
73
void BulletTranslationalLimitMotor::set_normal_cfm(LVecBase3 const &cfm);

1377 12 set_stop_erp 0 4 1600 43 BulletTranslationalLimitMotor::set_stop_erp 0 1 601 10
/**
 *
 */
71
void BulletTranslationalLimitMotor::set_stop_erp(LVecBase3 const &erp);

1378 12 set_stop_cfm 0 4 1600 43 BulletTranslationalLimitMotor::set_stop_cfm 0 1 602 10
/**
 *
 */
71
void BulletTranslationalLimitMotor::set_stop_cfm(LVecBase3 const &cfm);

1379 10 is_limited 0 4 1600 41 BulletTranslationalLimitMotor::is_limited 0 1 603 10
/**
 *
 */
63
bool BulletTranslationalLimitMotor::is_limited(int axis) const;

1380 17 get_motor_enabled 0 4 1600 48 BulletTranslationalLimitMotor::get_motor_enabled 0 1 604 10
/**
 *
 */
70
bool BulletTranslationalLimitMotor::get_motor_enabled(int axis) const;

1381 17 get_current_limit 0 4 1600 48 BulletTranslationalLimitMotor::get_current_limit 0 1 605 98
/**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */
69
int BulletTranslationalLimitMotor::get_current_limit(int axis) const;

1382 17 get_current_error 0 4 1600 48 BulletTranslationalLimitMotor::get_current_error 0 1 606 10
/**
 *
 */
70
LVector3 BulletTranslationalLimitMotor::get_current_error(void) const;

1383 16 get_current_diff 0 4 1600 47 BulletTranslationalLimitMotor::get_current_diff 0 1 607 10
/**
 *
 */
68
LPoint3 BulletTranslationalLimitMotor::get_current_diff(void) const;

1384 23 get_accumulated_impulse 0 4 1600 54 BulletTranslationalLimitMotor::get_accumulated_impulse 0 1 608 10
/**
 *
 */
76
LVector3 BulletTranslationalLimitMotor::get_accumulated_impulse(void) const;

1385 23 BulletGenericConstraint 0 4 1601 48 BulletGenericConstraint::BulletGenericConstraint 0 2 609 610 22
/**
 *
 */

/**
 *
 */
351
explicit BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool use_frame_a);
explicit BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a);

1386 8 get_axis 0 4 1601 33 BulletGenericConstraint::get_axis 0 1 611 23
// Geometry

/**
 *
 */
59
LVector3 BulletGenericConstraint::get_axis(int axis) const;

1387 9 get_pivot 0 4 1601 34 BulletGenericConstraint::get_pivot 0 1 612 10
/**
 *
 */
63
PN_stdfloat BulletGenericConstraint::get_pivot(int axis) const;

1388 9 get_angle 0 4 1601 34 BulletGenericConstraint::get_angle 0 1 613 10
/**
 *
 */
63
PN_stdfloat BulletGenericConstraint::get_angle(int axis) const;

1389 16 set_linear_limit 0 4 1601 41 BulletGenericConstraint::set_linear_limit 0 1 614 20
// Limit

/**
 *
 */
92
void BulletGenericConstraint::set_linear_limit(int axis, PN_stdfloat low, PN_stdfloat high);

1390 17 set_angular_limit 0 4 1601 42 BulletGenericConstraint::set_angular_limit 0 1 615 10
/**
 *
 */
93
void BulletGenericConstraint::set_angular_limit(int axis, PN_stdfloat low, PN_stdfloat high);

1391 26 get_rotational_limit_motor 0 4 1601 51 BulletGenericConstraint::get_rotational_limit_motor 0 1 616 21
// Motors

/**
 *
 */
89
BulletRotationalLimitMotor BulletGenericConstraint::get_rotational_limit_motor(int axis);

1392 29 get_translational_limit_motor 0 4 1601 54 BulletGenericConstraint::get_translational_limit_motor 0 1 617 10
/**
 *
 */
91
BulletTranslationalLimitMotor BulletGenericConstraint::get_translational_limit_motor(void);

1393 10 set_frames 0 4 1601 35 BulletGenericConstraint::set_frames 0 1 618 21
// Frames

/**
 *
 */
97
void BulletGenericConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1394 11 get_frame_a 0 4 1601 36 BulletGenericConstraint::get_frame_a 0 1 619 10
/**
 *
 */
82
ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_a(void) const;

1395 11 get_frame_b 0 4 1601 36 BulletGenericConstraint::get_frame_b 0 1 620 10
/**
 *
 */
82
ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_b(void) const;

1396 14 get_class_type 0 4 1601 39 BulletGenericConstraint::get_class_type 0 1 621 0
64
static TypeHandle BulletGenericConstraint::get_class_type(void);

1397 22 BulletHeightfieldShape 0 4 1602 46 BulletHeightfieldShape::BulletHeightfieldShape 0 3 622 623 624 579
/**
 * Only used by make_from_bam
 */

/**
 * @brief Creates a collision shape suited for terrains from a rectangular image.
 * @details Stores the image's brightness values in a vector Bullet can use, 
 *   while rotating it 90 degrees to the right.
 */

/**
 * @brief Creates a collision shape suited for terrains from a rectangular texture.
 * @details Alternative constructor intended for use with ShaderTerrainMesh. This will
 *   do bilinear sampling at the corners of all texels. Also works with textures 
 *   that are non-power-of-two and/or rectangular.
 */

/**
 *
 */
334
explicit BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up);
explicit BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up);
BulletHeightfieldShape::BulletHeightfieldShape(BulletHeightfieldShape const &copy);

1398 27 set_use_diamond_subdivision 0 4 1602 51 BulletHeightfieldShape::set_use_diamond_subdivision 0 1 625 10
/**
 *
 */
75
void BulletHeightfieldShape::set_use_diamond_subdivision(bool flag = true);

1399 14 get_class_type 0 4 1602 38 BulletHeightfieldShape::get_class_type 0 1 626 0
63
static TypeHandle BulletHeightfieldShape::get_class_type(void);

1400 21 from_collision_solids 0 4 1603 35 BulletHelper::from_collision_solids 0 1 629 31
// Collision shapes

/**
 *
 */
96
static NodePathCollection BulletHelper::from_collision_solids(NodePath &np, bool clear = false);

1401 12 get_sb_index 0 4 1603 26 BulletHelper::get_sb_index 0 1 630 48
// Internal names

// Internal names

/**
 *
 */
73
static inline PointerTo< InternalName > BulletHelper::get_sb_index(void);

1402 11 get_sb_flip 0 4 1603 25 BulletHelper::get_sb_flip 0 1 631 10
/**
 *
 */
72
static inline PointerTo< InternalName > BulletHelper::get_sb_flip(void);

1403 19 add_sb_index_column 0 4 1603 33 BulletHelper::add_sb_index_column 0 1 632 31
// Geom vertex data

/**
 *
 */
108
static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_index_column(GeomVertexFormat const *format);

1404 18 add_sb_flip_column 0 4 1603 32 BulletHelper::add_sb_flip_column 0 1 633 10
/**
 *
 */
107
static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_flip_column(GeomVertexFormat const *format);

1405 20 make_geom_from_faces 0 4 1603 34 BulletHelper::make_geom_from_faces 0 1 634 25
// Geom utils

/**
 *
 */
152
static PointerTo< Geom > BulletHelper::make_geom_from_faces(BulletSoftBodyNode *node, GeomVertexFormat const *format = nullptr, bool two_sided = false);

1406 20 make_geom_from_links 0 4 1603 34 BulletHelper::make_geom_from_links 0 1 635 10
/**
 *
 */
128
static PointerTo< Geom > BulletHelper::make_geom_from_links(BulletSoftBodyNode *node, GeomVertexFormat const *format = nullptr);

1407 24 make_texcoords_for_patch 0 4 1603 38 BulletHelper::make_texcoords_for_patch 0 1 636 10
/**
 *
 */
83
static void BulletHelper::make_texcoords_for_patch(Geom *geom, int resx, int resy);

1408 12 BulletHelper 0 4 1603 26 BulletHelper::BulletHelper 0 2 627 628 0
117
inline BulletHelper::BulletHelper(void) = default;
inline BulletHelper::BulletHelper(BulletHelper const &) = default;

1409 13 ~BulletHelper 0 4 1603 27 BulletHelper::~BulletHelper 0 0 0
34
BulletHelper::~BulletHelper(void);

1410 21 BulletHingeConstraint 0 4 1605 44 BulletHingeConstraint::BulletHingeConstraint 0 4 637 638 639 640 709
/**
 * Creates a hinge constraint which connects one rigid body with some fixe
 * dpoint in the world.
 */

/**
 * Constructs a hinge constraint which connects two rigid bodies.
 */

/**
 * Creates a hinge constraint in the same way as the other constructor, but
 * uses the world as second body so that node_a is fixed to some point in mid-
 * air for example.
 */

/**
 * Creates a hinge connecting node_a to node_b.  The pivot point is the point
 * at which the body is fixed to the constraint.  In other words: It specifies
 * where on each body the rotation axis should be.  This axis is specified
 * using axis_a and axis_b.  Remember, everything is specified in the bodies
 * own coordinate system!
 */
761
explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a = false);
explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b, LVector3 const &axis_a, LVector3 const &axis_b, bool use_frame_a = false);
explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a = false);
explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a = false);

1411 15 get_hinge_angle 0 4 1605 38 BulletHingeConstraint::get_hinge_angle 0 1 641 66
/**
 * Returns the angle between node_a and node_b in degrees.
 */
57
PN_stdfloat BulletHingeConstraint::get_hinge_angle(void);

1412 15 get_lower_limit 0 4 1605 38 BulletHingeConstraint::get_lower_limit 0 1 642 54
/**
 * Returns the lower angular limit in degrees.
 */
63
PN_stdfloat BulletHingeConstraint::get_lower_limit(void) const;

1413 15 get_upper_limit 0 4 1605 38 BulletHingeConstraint::get_upper_limit 0 1 643 54
/**
 * Returns the upper angular limit in degrees.
 */
63
PN_stdfloat BulletHingeConstraint::get_upper_limit(void) const;

1414 16 get_angular_only 0 4 1605 39 BulletHingeConstraint::get_angular_only 0 1 644 10
/**
 *
 */
57
bool BulletHingeConstraint::get_angular_only(void) const;

1415 16 set_angular_only 0 4 1605 39 BulletHingeConstraint::set_angular_only 0 1 645 10
/**
 *
 */
57
void BulletHingeConstraint::set_angular_only(bool value);

1416 9 set_limit 0 4 1605 32 BulletHingeConstraint::set_limit 0 1 646 65
/**
 * Sets the lower and upper rotational limits in degrees.
 */
171
void BulletHingeConstraint::set_limit(PN_stdfloat low, PN_stdfloat high, PN_stdfloat softness = 0.9, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0);

1417 8 set_axis 0 4 1605 31 BulletHingeConstraint::set_axis 0 1 647 63
/**
 * Sets the hinge's rotation axis in world coordinates.
 */
59
void BulletHingeConstraint::set_axis(LVector3 const &axis);

1418 20 enable_angular_motor 0 4 1605 43 BulletHingeConstraint::enable_angular_motor 0 1 648 261
/**
 * Applies an impulse to the constraint so that the angle changes at
 * target_velocity where max_impulse is the maximum impulse that is used for
 * achieving the specified velocity.
 *
 * Note that the target_velocity is in radians/second, not degrees.
 */
116
void BulletHingeConstraint::enable_angular_motor(bool enable, PN_stdfloat target_velocity, PN_stdfloat max_impulse);

1419 12 enable_motor 0 4 1605 35 BulletHingeConstraint::enable_motor 0 1 649 10
/**
 *
 */
54
void BulletHingeConstraint::enable_motor(bool enable);

1420 21 set_max_motor_impulse 0 4 1605 44 BulletHingeConstraint::set_max_motor_impulse 0 1 650 96
/**
 * Sets the maximum impulse used to achieve the velocity set in
 * enable_angular_motor.
 */
75
void BulletHingeConstraint::set_max_motor_impulse(PN_stdfloat max_impulse);

1421 16 set_motor_target 0 4 1605 39 BulletHingeConstraint::set_motor_target 0 2 651 652 22
/**
 *
 */

/**
 *
 */
174
void BulletHingeConstraint::set_motor_target(LQuaternion const &quat, PN_stdfloat dt);
void BulletHingeConstraint::set_motor_target(PN_stdfloat target_angle, PN_stdfloat dt);

1422 10 set_frames 0 4 1605 33 BulletHingeConstraint::set_frames 0 1 653 10
/**
 *
 */
95
void BulletHingeConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1423 11 get_frame_a 0 4 1605 34 BulletHingeConstraint::get_frame_a 0 1 654 10
/**
 *
 */
80
ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_a(void) const;

1424 11 get_frame_b 0 4 1605 34 BulletHingeConstraint::get_frame_b 0 1 655 10
/**
 *
 */
80
ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_b(void) const;

1425 14 get_class_type 0 4 1605 37 BulletHingeConstraint::get_class_type 0 1 656 0
62
static TypeHandle BulletHingeConstraint::get_class_type(void);

1426 23 BulletMinkowskiSumShape 0 4 1606 48 BulletMinkowskiSumShape::BulletMinkowskiSumShape 0 2 657 658 62
/**
 * Only used by make_from_bam.
 */

/**
 *
 */

/**
 *
 */
201
explicit BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletShape const *shape_a, BulletShape const *shape_b);
BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletMinkowskiSumShape const &copy);

1427 15 set_transform_a 0 4 1606 40 BulletMinkowskiSumShape::set_transform_a 0 1 659 10
/**
 *
 */
72
void BulletMinkowskiSumShape::set_transform_a(TransformState const *ts);

1428 15 set_transform_b 0 4 1606 40 BulletMinkowskiSumShape::set_transform_b 0 1 660 10
/**
 *
 */
72
void BulletMinkowskiSumShape::set_transform_b(TransformState const *ts);

1429 15 get_transform_a 0 4 1606 40 BulletMinkowskiSumShape::get_transform_a 0 1 661 10
/**
 *
 */
86
ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_a(void) const;

1430 15 get_transform_b 0 4 1606 40 BulletMinkowskiSumShape::get_transform_b 0 1 662 10
/**
 *
 */
86
ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_b(void) const;

1431 11 get_shape_a 0 4 1606 36 BulletMinkowskiSumShape::get_shape_a 0 1 663 10
/**
 *
 */
75
inline BulletShape const *BulletMinkowskiSumShape::get_shape_a(void) const;

1432 11 get_shape_b 0 4 1606 36 BulletMinkowskiSumShape::get_shape_b 0 1 664 10
/**
 *
 */
75
inline BulletShape const *BulletMinkowskiSumShape::get_shape_b(void) const;

1433 14 get_class_type 0 4 1606 39 BulletMinkowskiSumShape::get_class_type 0 1 665 0
64
static TypeHandle BulletMinkowskiSumShape::get_class_type(void);

1434 22 BulletMultiSphereShape 0 4 1609 46 BulletMultiSphereShape::BulletMultiSphereShape 0 2 666 667 22
/**
 *
 */

/**
 *
 */
196
explicit BulletMultiSphereShape::BulletMultiSphereShape(PTA_LVecBase3 const &points, PTA_stdfloat const &radii);
BulletMultiSphereShape::BulletMultiSphereShape(BulletMultiSphereShape const &copy);

1435 10 operator = 0 4 1609 34 BulletMultiSphereShape::operator = 0 1 668 0
76
void BulletMultiSphereShape::operator =(BulletMultiSphereShape const &copy);

1436 16 get_sphere_count 0 4 1609 40 BulletMultiSphereShape::get_sphere_count 0 1 669 10
/**
 *
 */
57
int BulletMultiSphereShape::get_sphere_count(void) const;

1437 14 get_sphere_pos 0 4 1609 38 BulletMultiSphereShape::get_sphere_pos 0 1 670 10
/**
 *
 */
64
LPoint3 BulletMultiSphereShape::get_sphere_pos(int index) const;

1438 17 get_sphere_radius 0 4 1609 41 BulletMultiSphereShape::get_sphere_radius 0 1 671 10
/**
 *
 */
71
PN_stdfloat BulletMultiSphereShape::get_sphere_radius(int index) const;

1439 0 0 0 0 0 0 0 0
0

1440 0 0 0 0 0 0 0 0
0

1441 14 get_class_type 0 4 1609 38 BulletMultiSphereShape::get_class_type 0 1 672 0
63
static TypeHandle BulletMultiSphereShape::get_class_type(void);

1442 16 BulletPlaneShape 0 4 1610 34 BulletPlaneShape::BulletPlaneShape 0 3 673 674 675 81
/**
 * Creates a plane shape from a plane definition.
 */

/**
 *
 */

/**
 *
 */
215
explicit BulletPlaneShape::BulletPlaneShape(LPlane plane);
explicit BulletPlaneShape::BulletPlaneShape(LVector3 const &normal, PN_stdfloat constant);
BulletPlaneShape::BulletPlaneShape(BulletPlaneShape const &copy);

1443 9 get_plane 0 4 1610 27 BulletPlaneShape::get_plane 0 1 676 10
/**
 *
 */
47
LPlane BulletPlaneShape::get_plane(void) const;

1444 16 get_plane_normal 0 4 1610 34 BulletPlaneShape::get_plane_normal 0 1 677 10
/**
 *
 */
56
LVector3 BulletPlaneShape::get_plane_normal(void) const;

1445 18 get_plane_constant 0 4 1610 36 BulletPlaneShape::get_plane_constant 0 1 678 10
/**
 *
 */
61
PN_stdfloat BulletPlaneShape::get_plane_constant(void) const;

1446 15 make_from_solid 0 4 1610 33 BulletPlaneShape::make_from_solid 0 1 679 10
/**
 *
 */
88
static BulletPlaneShape *BulletPlaneShape::make_from_solid(CollisionPlane const *solid);

1447 14 get_class_type 0 4 1610 32 BulletPlaneShape::get_class_type 0 1 680 0
57
static TypeHandle BulletPlaneShape::get_class_type(void);

1448 22 BulletSliderConstraint 0 4 1613 46 BulletSliderConstraint::BulletSliderConstraint 0 2 681 682 22
/**
 *
 */

/**
 *
 */
346
explicit BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool useFrame_a);
explicit BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a);

1449 14 get_linear_pos 0 4 1613 38 BulletSliderConstraint::get_linear_pos 0 1 683 10
/**
 *
 */
63
PN_stdfloat BulletSliderConstraint::get_linear_pos(void) const;

1450 15 get_angular_pos 0 4 1613 39 BulletSliderConstraint::get_angular_pos 0 1 684 10
/**
 *
 */
64
PN_stdfloat BulletSliderConstraint::get_angular_pos(void) const;

1451 22 get_lower_linear_limit 0 4 1613 46 BulletSliderConstraint::get_lower_linear_limit 0 1 685 32
// Limits

// Limits

/**
 *
 */
71
PN_stdfloat BulletSliderConstraint::get_lower_linear_limit(void) const;

1452 22 get_upper_linear_limit 0 4 1613 46 BulletSliderConstraint::get_upper_linear_limit 0 1 686 10
/**
 *
 */
71
PN_stdfloat BulletSliderConstraint::get_upper_linear_limit(void) const;

1453 23 get_lower_angular_limit 0 4 1613 47 BulletSliderConstraint::get_lower_angular_limit 0 1 687 10
/**
 *
 */
72
PN_stdfloat BulletSliderConstraint::get_lower_angular_limit(void) const;

1454 23 get_upper_angular_limit 0 4 1613 47 BulletSliderConstraint::get_upper_angular_limit 0 1 688 10
/**
 *
 */
72
PN_stdfloat BulletSliderConstraint::get_upper_angular_limit(void) const;

1455 22 set_lower_linear_limit 0 4 1613 46 BulletSliderConstraint::set_lower_linear_limit 0 1 689 10
/**
 *
 */
71
void BulletSliderConstraint::set_lower_linear_limit(PN_stdfloat value);

1456 22 set_upper_linear_limit 0 4 1613 46 BulletSliderConstraint::set_upper_linear_limit 0 1 690 10
/**
 *
 */
71
void BulletSliderConstraint::set_upper_linear_limit(PN_stdfloat value);

1457 23 set_lower_angular_limit 0 4 1613 47 BulletSliderConstraint::set_lower_angular_limit 0 1 691 10
/**
 *
 */
72
void BulletSliderConstraint::set_lower_angular_limit(PN_stdfloat value);

1458 23 set_upper_angular_limit 0 4 1613 47 BulletSliderConstraint::set_upper_angular_limit 0 1 692 10
/**
 *
 */
72
void BulletSliderConstraint::set_upper_angular_limit(PN_stdfloat value);

1459 24 set_powered_linear_motor 0 4 1613 48 BulletSliderConstraint::set_powered_linear_motor 0 1 693 44
// Linear motor

// Linear motor

/**
 *
 */
63
void BulletSliderConstraint::set_powered_linear_motor(bool on);

1460 32 set_target_linear_motor_velocity 0 4 1613 56 BulletSliderConstraint::set_target_linear_motor_velocity 0 1 694 10
/**
 *
 */
91
void BulletSliderConstraint::set_target_linear_motor_velocity(PN_stdfloat target_velocity);

1461 26 set_max_linear_motor_force 0 4 1613 50 BulletSliderConstraint::set_max_linear_motor_force 0 1 695 10
/**
 *
 */
79
void BulletSliderConstraint::set_max_linear_motor_force(PN_stdfloat max_force);

1462 24 get_powered_linear_motor 0 4 1613 48 BulletSliderConstraint::get_powered_linear_motor 0 1 696 10
/**
 *
 */
66
bool BulletSliderConstraint::get_powered_linear_motor(void) const;

1463 32 get_target_linear_motor_velocity 0 4 1613 56 BulletSliderConstraint::get_target_linear_motor_velocity 0 1 697 10
/**
 *
 */
81
PN_stdfloat BulletSliderConstraint::get_target_linear_motor_velocity(void) const;

1464 26 get_max_linear_motor_force 0 4 1613 50 BulletSliderConstraint::get_max_linear_motor_force 0 1 698 10
/**
 *
 */
75
PN_stdfloat BulletSliderConstraint::get_max_linear_motor_force(void) const;

1465 25 set_powered_angular_motor 0 4 1613 49 BulletSliderConstraint::set_powered_angular_motor 0 1 699 46
// Angular motor

// Angular motor

/**
 *
 */
64
void BulletSliderConstraint::set_powered_angular_motor(bool on);

1466 33 set_target_angular_motor_velocity 0 4 1613 57 BulletSliderConstraint::set_target_angular_motor_velocity 0 1 700 10
/**
 *
 */
92
void BulletSliderConstraint::set_target_angular_motor_velocity(PN_stdfloat target_velocity);

1467 27 set_max_angular_motor_force 0 4 1613 51 BulletSliderConstraint::set_max_angular_motor_force 0 1 701 10
/**
 *
 */
80
void BulletSliderConstraint::set_max_angular_motor_force(PN_stdfloat max_force);

1468 25 get_powered_angular_motor 0 4 1613 49 BulletSliderConstraint::get_powered_angular_motor 0 1 702 10
/**
 *
 */
67
bool BulletSliderConstraint::get_powered_angular_motor(void) const;

1469 33 get_target_angular_motor_velocity 0 4 1613 57 BulletSliderConstraint::get_target_angular_motor_velocity 0 1 703 10
/**
 *
 */
82
PN_stdfloat BulletSliderConstraint::get_target_angular_motor_velocity(void) const;

1470 27 get_max_angular_motor_force 0 4 1613 51 BulletSliderConstraint::get_max_angular_motor_force 0 1 704 10
/**
 *
 */
76
PN_stdfloat BulletSliderConstraint::get_max_angular_motor_force(void) const;

1471 10 set_frames 0 4 1613 34 BulletSliderConstraint::set_frames 0 1 705 21
// Frames

/**
 *
 */
96
void BulletSliderConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1472 11 get_frame_a 0 4 1613 35 BulletSliderConstraint::get_frame_a 0 1 706 10
/**
 *
 */
81
ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_a(void) const;

1473 11 get_frame_b 0 4 1613 35 BulletSliderConstraint::get_frame_b 0 1 707 10
/**
 *
 */
81
ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_b(void) const;

1474 14 get_class_type 0 4 1613 38 BulletSliderConstraint::get_class_type 0 1 708 0
63
static TypeHandle BulletSliderConstraint::get_class_type(void);

1475 18 upcast_to_IControl 0 12 1614 41 BulletSoftBodyControl::upcast_to_IControl 0 1 715 45
upcast from BulletSoftBodyControl to IControl
78
btSoftBody::AJoint::IControl *BulletSoftBodyControl::upcast_to_IControl(void);

1476 42 downcast_IControl_to_BulletSoftBodyControl 0 8 0 42 downcast_IControl_to_BulletSoftBodyControl 0 0 47
downcast from IControl to BulletSoftBodyControl
102
BulletSoftBodyControl *downcast_IControl_to_BulletSoftBodyControl(btSoftBody::AJoint::IControl *this);

1477 21 BulletSoftBodyControl 0 4 1614 44 BulletSoftBodyControl::BulletSoftBodyControl 0 2 709 710 10
/**
 *
 */
145
BulletSoftBodyControl::BulletSoftBodyControl(void);
inline BulletSoftBodyControl::BulletSoftBodyControl(BulletSoftBodyControl const &) = default;

1478 22 ~BulletSoftBodyControl 0 6 1614 45 BulletSoftBodyControl::~BulletSoftBodyControl 0 0 10
/**
 *
 */
60
virtual BulletSoftBodyControl::~BulletSoftBodyControl(void);

1479 8 set_goal 0 4 1614 31 BulletSoftBodyControl::set_goal 0 1 711 20
// Motor

/**
 *
 */
62
inline void BulletSoftBodyControl::set_goal(PN_stdfloat goal);

1480 14 set_max_torque 0 4 1614 37 BulletSoftBodyControl::set_max_torque 0 1 712 10
/**
 *
 */
73
inline void BulletSoftBodyControl::set_max_torque(PN_stdfloat maxtorque);

1481 9 set_angle 0 4 1614 32 BulletSoftBodyControl::set_angle 0 1 713 20
// Steer

/**
 *
 */
64
inline void BulletSoftBodyControl::set_angle(PN_stdfloat angle);

1482 8 set_sign 0 4 1614 31 BulletSoftBodyControl::set_sign 0 1 714 10
/**
 *
 */
62
inline void BulletSoftBodyControl::set_sign(PN_stdfloat sign);

1483 8 get_body 0 4 1618 29 BulletSoftBodyShape::get_body 0 1 716 10
/**
 *
 */
62
BulletSoftBodyNode *BulletSoftBodyShape::get_body(void) const;

1484 14 get_class_type 0 4 1618 35 BulletSoftBodyShape::get_class_type 0 1 717 0
60
static TypeHandle BulletSoftBodyShape::get_class_type(void);

1485 17 BulletSphereShape 0 4 1619 36 BulletSphereShape::BulletSphereShape 0 2 718 719 22
/**
 *
 */

/**
 *
 */
135
explicit BulletSphereShape::BulletSphereShape(PN_stdfloat radius);
BulletSphereShape::BulletSphereShape(BulletSphereShape const &copy);

1486 10 get_radius 0 4 1619 29 BulletSphereShape::get_radius 0 1 720 69
/**
 * Returns the radius that was used to construct this sphere.
 */
61
inline PN_stdfloat BulletSphereShape::get_radius(void) const;

1487 15 make_from_solid 0 4 1619 34 BulletSphereShape::make_from_solid 0 1 721 10
/**
 *
 */
91
static BulletSphereShape *BulletSphereShape::make_from_solid(CollisionSphere const *solid);

1488 14 get_class_type 0 4 1619 33 BulletSphereShape::get_class_type 0 1 722 0
58
static TypeHandle BulletSphereShape::get_class_type(void);

1489 25 BulletSphericalConstraint 0 4 1620 52 BulletSphericalConstraint::BulletSphericalConstraint 0 2 723 724 22
/**
 *
 */

/**
 *
 */
302
explicit BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a);
explicit BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b);

1490 11 set_pivot_a 0 4 1620 38 BulletSphericalConstraint::set_pivot_a 0 1 725 32
// Pivots

// Pivots

/**
 *
 */
68
void BulletSphericalConstraint::set_pivot_a(LPoint3 const &pivot_a);

1491 11 set_pivot_b 0 4 1620 38 BulletSphericalConstraint::set_pivot_b 0 1 726 10
/**
 *
 */
68
void BulletSphericalConstraint::set_pivot_b(LPoint3 const &pivot_b);

1492 14 get_pivot_in_a 0 4 1620 41 BulletSphericalConstraint::get_pivot_in_a 0 1 727 10
/**
 *
 */
62
LPoint3 BulletSphericalConstraint::get_pivot_in_a(void) const;

1493 14 get_pivot_in_b 0 4 1620 41 BulletSphericalConstraint::get_pivot_in_b 0 1 728 10
/**
 *
 */
62
LPoint3 BulletSphericalConstraint::get_pivot_in_b(void) const;

1494 14 get_class_type 0 4 1620 41 BulletSphericalConstraint::get_class_type 0 1 729 0
66
static TypeHandle BulletSphericalConstraint::get_class_type(void);

1495 22 BulletTickCallbackData 0 4 1621 46 BulletTickCallbackData::BulletTickCallbackData 0 1 730 10
/**
 *
 */
73
inline BulletTickCallbackData::BulletTickCallbackData(btScalar timestep);

1496 12 get_timestep 0 4 1621 36 BulletTickCallbackData::get_timestep 0 1 731 10
/**
 *
 */
68
inline PN_stdfloat BulletTickCallbackData::get_timestep(void) const;

1497 14 get_class_type 0 4 1621 38 BulletTickCallbackData::get_class_type 0 1 732 0
63
static TypeHandle BulletTickCallbackData::get_class_type(void);

1498 23 ~BulletTickCallbackData 0 4 1621 47 BulletTickCallbackData::~BulletTickCallbackData 0 0 0
54
BulletTickCallbackData::~BulletTickCallbackData(void);

1499 18 BulletTriangleMesh 0 4 1622 38 BulletTriangleMesh::BulletTriangleMesh 0 1 733 10
/**
 *
 */
45
BulletTriangleMesh::BulletTriangleMesh(void);

1500 12 add_triangle 0 4 1622 32 BulletTriangleMesh::add_triangle 0 1 734 347
/**
 * Adds a triangle with the indicated coordinates.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */
135
void BulletTriangleMesh::add_triangle(LPoint3 const &p0, LPoint3 const &p1, LPoint3 const &p2, bool remove_duplicate_vertices = false);

1501 9 add_array 0 4 1622 29 BulletTriangleMesh::add_array 0 1 735 452
/**
 * Adds triangle information from an array of points and indices referring to
 * these points.  This is more efficient than adding triangles one at a time.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */
128
void BulletTriangleMesh::add_array(PTA_LVecBase3 const &points, PTA_int const &indices, bool remove_duplicate_vertices = false);

1502 8 add_geom 0 4 1622 28 BulletTriangleMesh::add_geom 0 1 736 461
/**
 * Adds the geometry from the indicated Geom from the triangle mesh.  This is
 * a one-time copy operation, and future updates to the Geom will not be
 * reflected.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */
152
void BulletTriangleMesh::add_geom(Geom const *geom, bool remove_duplicate_vertices = false, TransformState const *ts = TransformState::make_identity());

1503 20 set_welding_distance 0 4 1622 40 BulletTriangleMesh::set_welding_distance 0 1 737 254
/**
 * Sets the square of the distance at which vertices will be merged
 * together when adding geometry with remove_duplicate_vertices set to true.
 *
 * The default is 0, meaning vertices will only be merged if they have the
 * exact same position.
 */
68
void BulletTriangleMesh::set_welding_distance(PN_stdfloat distance);

1504 11 preallocate 0 4 1622 31 BulletTriangleMesh::preallocate 0 1 738 239
/**
 * Used to reserve memory in anticipation of the given amount of vertices and
 * indices being added to the triangle mesh.  This is useful if you are about
 * to call add_triangle() many times, to prevent unnecessary reallocations.
 */
69
void BulletTriangleMesh::preallocate(int num_verts, int num_indices);

1505 17 get_num_triangles 0 4 1622 37 BulletTriangleMesh::get_num_triangles 0 1 739 65
/**
 * Returns the number of triangles in this triangle mesh.
 */
62
std::size_t BulletTriangleMesh::get_num_triangles(void) const;

1506 20 get_welding_distance 0 4 1622 40 BulletTriangleMesh::get_welding_distance 0 1 740 110
/**
 * Returns the value previously set with set_welding_distance(), or the
 * value of 0 if none was set.
 */
65
PN_stdfloat BulletTriangleMesh::get_welding_distance(void) const;

1507 6 output 0 6 1622 26 BulletTriangleMesh::output 0 1 741 10
/**
 *
 */
65
virtual void BulletTriangleMesh::output(std::ostream &out) const;

1508 5 write 0 6 1622 25 BulletTriangleMesh::write 0 1 742 10
/**
 *
 */
82
virtual void BulletTriangleMesh::write(std::ostream &out, int indent_level) const;

1509 16 get_num_vertices 0 4 1622 36 BulletTriangleMesh::get_num_vertices 0 1 744 64
/**
 * Returns the number of vertices in this triangle mesh.
 */
61
std::size_t BulletTriangleMesh::get_num_vertices(void) const;

1510 0 0 0 0 0 0 0 0
0

1511 0 0 0 0 0 0 0 0
0

1512 14 get_class_type 0 4 1622 34 BulletTriangleMesh::get_class_type 0 1 743 0
59
static TypeHandle BulletTriangleMesh::get_class_type(void);

1513 23 BulletTriangleMeshShape 0 4 1624 48 BulletTriangleMeshShape::BulletTriangleMeshShape 0 2 745 746 207
/**
 * Only used by make_from_bam.
 */

/**
 * The parameters 'compress' and 'bvh' are only used if 'dynamic' is set to
 * FALSE.
 * Assumes the lock(bullet global lock) is held by the caller
 */

/**
 *
 */
224
explicit BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMesh *mesh, bool dynamic, bool compress = true, bool bvh = true);
BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMeshShape const &copy);

1514 10 refit_tree 0 4 1624 35 BulletTriangleMeshShape::refit_tree 0 1 747 10
/**
 *
 */
91
void BulletTriangleMeshShape::refit_tree(LPoint3 const &aabb_min, LPoint3 const &aabb_max);

1515 9 is_static 0 4 1624 34 BulletTriangleMeshShape::is_static 0 1 748 10
/**
 *
 */
59
inline bool BulletTriangleMeshShape::is_static(void) const;

1516 10 is_dynamic 0 4 1624 35 BulletTriangleMeshShape::is_dynamic 0 1 749 10
/**
 *
 */
60
inline bool BulletTriangleMeshShape::is_dynamic(void) const;

1517 14 get_class_type 0 4 1624 39 BulletTriangleMeshShape::get_class_type 0 1 750 0
64
static TypeHandle BulletTriangleMeshShape::get_class_type(void);

752
1 0 0 7 27 1625 763 0 0 0 
2 0 0 7 27 1625 763 0 0 1 6 param0 0 1626  
3 0 0 7 5 1625 763 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
4 0 0 7 6 1520 0 0 10 /**
 *
 */ 1 4 this 3 1626  
5 0 0 7 7 1628 0 0 10 /**
 *
 */ 1 4 this 3 1626  
6 0 0 7 8 1629 0 0 10 /**
 *
 */ 1 4 this 3 1626  
7 0 0 6 9 1526 0 0 10 /**
 *
 */ 1 4 this 3 1626  
8 0 0 6 10 1528 0 0 10 /**
 *
 */ 1 4 this 3 1626  
9 0 0 6 11 1528 0 0 10 /**
 *
 */ 1 4 this 3 1626  
10 0 0 7 34 1630 774 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
11 0 0 7 35 1628 0 0 10 /**
 *
 */ 1 4 this 3 1631  
12 0 0 7 36 1628 0 0 10 /**
 *
 */ 1 4 this 3 1631  
13 0 0 6 37 1534 0 0 10 /**
 *
 */ 1 4 this 3 1631  
14 0 0 6 38 1526 0 0 10 /**
 *
 */ 1 4 this 3 1631  
15 0 0 6 39 1528 0 0 10 /**
 *
 */ 1 4 this 3 1631  
16 0 0 7 40 1626 0 0 10 /**
 *
 */ 2 4 this 3 1631  3 idx 1 1528  
17 0 0 6 32 1633 0 0 0 1 4 this 3 1630  
18 0 0 6 50 1534 0 0 10 /**
 *
 */ 1 4 this 3 1607  
19 0 0 6 51 1534 0 0 10 /**
 *
 */ 1 4 this 3 1607  
20 0 0 6 52 1534 0 0 10 /**
 *
 */ 1 4 this 3 1607  
21 0 0 6 53 1534 0 0 10 /**
 *
 */ 1 4 this 3 1607  
22 0 0 6 54 1534 0 0 10 /**
 *
 */ 1 4 this 3 1607  
23 0 0 6 55 1534 0 0 10 /**
 *
 */ 1 4 this 3 1607  
24 0 0 6 56 1534 0 0 10 /**
 *
 */ 1 4 this 3 1607  
25 0 0 4 57 1634 0 0 10 /**
 *
 */ 2 4 this 3 1541  6 margin 1 1526  
26 0 0 6 58 1635 0 0 10 /**
 *
 */ 1 4 this 3 1607  
27 0 0 6 59 1526 0 0 10 /**
 *
 */ 1 4 this 3 1607  
28 0 0 7 60 1636 0 0 62 /**
 * Returns the current bounds of this collision shape.
 */ 1 4 this 3 1607  
29 0 0 7 76 1638 0 0 0 0 
30 0 0 7 78 1638 0 0 0 0 
31 0 0 4 81 1634 0 0 9 // Shapes 3 4 this 3 1639  5 shape 1 1541  5 xform 1 1640  
32 0 0 4 82 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  5 shape 1 1541  
33 0 0 6 83 1528 0 0 10 /**
 *
 */ 1 4 this 3 1643  
34 0 0 7 84 1541 0 0 10 /**
 *
 */ 2 4 this 3 1643  3 idx 1 1528  
35 0 0 7 86 1628 0 0 10 /**
 *
 */ 2 4 this 3 1643  3 idx 1 1528  
36 0 0 7 87 1645 0 0 10 /**
 *
 */ 2 4 this 3 1643  3 idx 1 1528  
37 0 0 7 88 1640 0 0 10 /**
 *
 */ 2 4 this 3 1643  3 idx 1 1528  
38 0 0 7 89 1636 0 0 81 /**
 * Returns the current bounds of all collision shapes owned by this body.
 */ 1 4 this 3 1643  
39 0 0 4 90 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  5 cnode 1 1646  
40 0 0 6 91 1534 0 0 23 // Static and kinematic 1 4 this 3 1643  
41 0 0 6 92 1534 0 0 10 /**
 *
 */ 1 4 this 3 1643  
42 0 0 4 93 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  5 value 1 1534  
43 0 0 4 94 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  5 value 1 1534  
44 0 0 4 95 1634 0 0 11 // Contacts 2 4 this 3 1639  4 mask 1 1648  
45 0 0 4 96 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  5 value 1 1534  
46 0 0 6 97 1534 0 0 10 /**
 *
 */ 1 4 this 3 1643  
47 0 0 4 98 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  5 value 1 1534  
48 0 0 6 99 1534 0 0 10 /**
 *
 */ 1 4 this 3 1643  
49 0 0 6 100 1534 0 0 10 /**
 *
 */ 2 4 this 3 1639  4 node 1 1520  
50 0 0 6 101 1534 0 0 10 /**
 *
 */ 1 4 this 3 1643  
51 0 0 6 102 1526 0 0 10 /**
 *
 */ 1 4 this 3 1643  
52 0 0 4 103 1634 0 0 106 /**
 * The constraint solver can discard solving contacts, if the distance is
 * above this threshold.
 */ 2 4 this 3 1639  9 threshold 1 1526  
53 0 0 6 104 1534 0 0 15 // Deactivation 1 4 this 3 1643  
54 0 0 4 105 1634 0 0 10 /**
 *
 */ 3 4 this 3 1639  6 active 1 1534  5 force 1 1534  
55 0 0 4 106 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  6 active 1 1534  
56 0 0 4 107 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  2 dt 1 1526  
57 0 0 6 108 1526 0 0 10 /**
 *
 */ 1 4 this 3 1643  
58 0 0 4 109 1634 0 0 163 /**
 * If true, this object will be deactivated after a certain amount of time has
 * passed without movement.  If false, the object will always remain active.
 */ 2 4 this 3 1639  7 enabled 1 1534  
59 0 0 6 110 1534 0 0 10 /**
 *
 */ 1 4 this 3 1643  
60 0 0 4 111 1634 0 0 132 /**
 * Enables or disables the debug visualisation for this collision object.  By
 * default the debug visualisation is enabled.
 */ 2 4 this 3 1639  7 enabled 1 1652  
61 0 0 6 112 1534 0 0 141 /**
 * Returns TRUE if the debug visualisation is enabled for this collision
 * object, and FALSE if the debug visualisation is disabled.
 */ 1 4 this 3 1643  
62 0 0 6 113 1526 0 0 27 // Friction and Restitution 1 4 this 3 1643  
63 0 0 4 114 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  11 restitution 1 1526  
64 0 0 6 115 1526 0 0 10 /**
 *
 */ 1 4 this 3 1643  
65 0 0 4 116 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  8 friction 1 1526  
66 0 0 6 117 1534 0 0 10 /**
 *
 */ 1 4 this 3 1643  
67 0 0 4 118 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  8 friction 1 1653  
68 0 0 7 119 1655 0 0 10 /**
 *
 */ 1 4 this 3 1643  
69 0 0 6 120 1526 0 0 10 /**
 *
 */ 1 4 this 3 1643  
70 0 0 6 121 1526 0 0 10 /**
 *
 */ 1 4 this 3 1643  
71 0 0 4 122 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  6 radius 1 1526  
72 0 0 4 123 1634 0 0 10 /**
 *
 */ 2 4 this 3 1639  9 threshold 1 1526  
73 0 0 4 124 1634 0 0 216 /**
 * This method enforces an update of the Bullet transform, that is copies the
 * scene graph transform to the Bullet transform.  This is achieved by alling
 * the protected PandaNode hook 'transform_changed'.
 */ 1 4 this 3 1639  
74 0 0 7 155 1638 0 0 0 0 
75 0 0 7 157 1658 0 0 10 /**
 *
 */ 1 4 copy 1 1656  
76 0 0 7 157 1658 0 0 10 /**
 *
 */ 1 11 halfExtents 1 1653  
77 0 0 7 158 1655 0 0 10 /**
 *
 */ 1 4 this 3 1656  
78 0 0 7 159 1655 0 0 10 /**
 *
 */ 1 4 this 3 1656  
79 0 0 7 160 1658 0 0 10 /**
 *
 */ 1 5 solid 1 1659  
80 0 0 7 163 1638 0 0 0 0 
81 0 0 7 165 1664 0 0 10 /**
 *
 */ 1 4 copy 1 1662  
82 0 0 7 165 1664 0 0 10 /**
 *
 */ 3 6 radius 1 1526  6 height 1 1526  2 up 1 1518  
83 0 0 7 166 1664 0 0 130 /**
 * Constructs a new BulletCapsuleShape using the information from a
 * CollisionCapsule from the builtin collision system.
 */ 1 5 solid 1 1665  
84 0 0 6 167 1526 0 0 70 /**
 * Returns the radius that was used to construct this capsule.
 */ 1 4 this 3 1662  
85 0 0 6 168 1526 0 0 81 /**
 * Returns half of get_height().
 * @deprecated see get_height() instead.
 */ 1 4 this 3 1662  
86 0 0 7 172 1638 0 0 0 0 
87 0 0 7 174 1668 788 0 10 /**
 *
 */ 3 5 shape 1 1541  11 step_height 1 1526  4 name 1 1635  
88 0 0 4 175 1634 0 0 10 /**
 *
 */ 3 4 this 3 1668  8 velocity 1 1669  8 is_local 1 1534  
89 0 0 4 176 1634 0 0 10 /**
 *
 */ 2 4 this 3 1668  5 omega 1 1526  
90 0 0 7 177 1541 0 0 10 /**
 *
 */ 1 4 this 3 1671  
91 0 0 4 178 1634 0 0 10 /**
 *
 */ 2 4 this 3 1668  7 gravity 1 1526  
92 0 0 6 179 1526 0 0 10 /**
 *
 */ 1 4 this 3 1671  
93 0 0 4 180 1634 0 0 10 /**
 *
 */ 2 4 this 3 1668  10 fall_speed 1 1526  
94 0 0 4 181 1634 0 0 10 /**
 *
 */ 2 4 this 3 1668  10 jump_speed 1 1526  
95 0 0 4 182 1634 0 0 10 /**
 *
 */ 2 4 this 3 1668  15 max_jump_height 1 1526  
96 0 0 4 183 1634 0 0 10 /**
 *
 */ 2 4 this 3 1668  9 max_slope 1 1526  
97 0 0 6 184 1526 0 0 10 /**
 *
 */ 1 4 this 3 1671  
98 0 0 4 185 1634 0 0 10 /**
 *
 */ 2 4 this 3 1668  5 value 1 1534  
99 0 0 6 186 1534 0 0 10 /**
 *
 */ 1 4 this 3 1671  
100 0 0 6 187 1534 0 0 10 /**
 *
 */ 1 4 this 3 1671  
101 0 0 4 188 1634 0 0 10 /**
 *
 */ 1 4 this 3 1668  
102 0 0 7 193 1638 0 0 0 0 
103 0 0 7 216 1675 877 0 0 1 6 param0 0 1673  
104 0 0 7 198 1675 877 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
105 0 0 7 199 1628 0 0 10 /**
 *
 */ 1 4 this 3 1673  
106 0 0 7 200 1628 0 0 10 /**
 *
 */ 1 4 this 3 1673  
107 0 0 6 201 1534 0 0 10 /**
 *
 */ 1 4 this 3 1673  
108 0 0 7 202 1520 0 0 10 /**
 *
 */ 1 4 this 3 1673  
109 0 0 7 203 1628 0 0 10 /**
 *
 */ 1 4 this 3 1673  
110 0 0 7 204 1629 0 0 10 /**
 *
 */ 1 4 this 3 1673  
111 0 0 6 205 1526 0 0 10 /**
 *
 */ 1 4 this 3 1673  
112 0 0 6 206 1528 0 0 10 /**
 *
 */ 1 4 this 3 1673  
113 0 0 6 207 1528 0 0 10 /**
 *
 */ 1 4 this 3 1673  
114 0 0 6 196 1676 0 0 0 1 4 this 3 1675  
115 0 0 7 236 1679 889 0 0 1 6 param0 0 1677  
116 0 0 7 222 1679 889 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
117 0 0 7 223 1628 0 0 10 /**
 *
 */ 1 4 this 3 1677  
118 0 0 7 224 1628 0 0 10 /**
 *
 */ 1 4 this 3 1677  
119 0 0 6 225 1534 0 0 10 /**
 *
 */ 1 4 this 3 1677  
120 0 0 7 226 1520 0 0 10 /**
 *
 */ 1 4 this 3 1677  
121 0 0 7 227 1628 0 0 10 /**
 *
 */ 1 4 this 3 1677  
122 0 0 7 228 1629 0 0 10 /**
 *
 */ 1 4 this 3 1677  
123 0 0 6 229 1526 0 0 10 /**
 *
 */ 1 4 this 3 1677  
124 0 0 6 220 1680 0 0 0 1 4 this 3 1679  
125 0 0 7 239 1683 0 0 10 /**
 *
 */ 1 4 copy 1 1681  
126 0 0 7 239 1683 0 0 10 /**
 *
 */ 3 6 radius 1 1526  6 height 1 1526  2 up 1 1518  
127 0 0 6 240 1526 0 0 67 /**
 * Returns the radius that was passed into the constructor.
 */ 1 4 this 3 1681  
128 0 0 6 241 1526 0 0 67 /**
 * Returns the height that was passed into the constructor.
 */ 1 4 this 3 1681  
129 0 0 7 244 1638 0 0 0 0 
130 0 0 7 247 1558 0 0 10 /**
 *
 */ 1 4 this 3 1591  
131 0 0 7 248 1558 0 0 10 /**
 *
 */ 1 4 this 3 1591  
132 0 0 4 249 1634 0 0 10 /**
 *
 */ 2 4 this 3 1591  5 value 1 1534  
133 0 0 4 250 1634 0 0 10 /**
 *
 */ 2 4 this 3 1591  4 size 1 1526  
134 0 0 6 251 1526 0 0 10 /**
 *
 */ 1 4 this 3 1591  
135 0 0 6 252 1526 0 0 10 /**
 *
 */ 1 4 this 3 1684  
136 0 0 4 253 1634 0 0 212 /**
 * Sets the applied impulse limit for breaking the constraint.  If the limit
 * is exceeded the constraint will be disabled.  Disabled constraints are not
 * removed from the world, and can be re-enabled.
 */ 2 4 this 3 1591  9 threshold 1 1526  
137 0 0 6 254 1526 0 0 73 /**
 * Returns the applied impluse limit for breaking the constraint.
 */ 1 4 this 3 1684  
138 0 0 4 255 1634 0 0 10 /**
 *
 */ 2 4 this 3 1591  7 enabled 1 1534  
139 0 0 6 256 1534 0 0 53 /**
 * Returns TRUE if the constraint is enabled.
 */ 1 4 this 3 1684  
140 0 0 4 258 1634 0 0 10 /**
 *
 */ 4 4 this 3 1591  3 num 1 1557  5 value 1 1526  4 axis 1 1528  
141 0 0 6 259 1526 0 0 10 /**
 *
 */ 3 4 this 3 1591  3 num 1 1557  4 axis 1 1528  
142 0 0 7 323 1638 0 0 0 0 
143 0 0 7 263 1558 0 0 10 /**
 *
 */ 1 4 name 1 1635  
144 0 0 4 264 1634 0 0 257 /**
 * Sets the mass of a rigid body.  This also modifies the inertia, which is
 * automatically computed from the shape of the body.  Setting a value of zero
 * for mass will make the body static.  A value of zero can be considered an
 * infinite mass.
 */ 2 4 this 3 1558  4 mass 1 1526  
145 0 0 6 265 1526 0 0 128 /**
 * Returns the total mass of a rigid body.  A value of zero means that the
 * body is staic, i.e.  has an infinite mass.
 */ 1 4 this 3 1686  
146 0 0 6 266 1526 0 0 52 /**
 * Returns the inverse mass of a rigid body.
 */ 1 4 this 3 1686  
147 0 0 4 267 1634 0 0 591 /**
 * Sets the inertia of a rigid body.  Inertia is given as a three-component
 * vector.  A component value of zero means infinite inertia along this
 * direction.  Setting the intertia will override the value which is
 * automatically calculated from the rigid bodies shape.  However, it is
 * possible that automatic calculation of intertia is trigger after calling
 * this method, and thus overwriting the explicitly set value again.  This
 * happens when: (a) the mass is set after the inertia.  (b) a shape is added
 * or removed from the body.  (c) the scale of the body changed.
 */ 2 4 this 3 1558  7 inertia 1 1653  
148 0 0 7 268 1629 0 0 174 /**
 * Returns the inertia of the rigid body.  Inertia is given as a three
 * component vector.  A component value of zero means infinite inertia along
 * this direction.
 */ 1 4 this 3 1686  
149 0 0 7 269 1629 0 0 10 /**
 *
 */ 1 4 this 3 1686  
150 0 0 7 270 1688 0 0 10 /**
 *
 */ 1 4 this 3 1686  
151 0 0 7 271 1629 0 0 11 // Velocity 1 4 this 3 1686  
152 0 0 7 272 1629 0 0 10 /**
 *
 */ 1 4 this 3 1686  
153 0 0 4 273 1634 0 0 10 /**
 *
 */ 2 4 this 3 1558  8 velocity 1 1669  
154 0 0 4 274 1634 0 0 10 /**
 *
 */ 2 4 this 3 1558  8 velocity 1 1669  
155 0 0 6 275 1526 0 0 10 // Damping 1 4 this 3 1686  
156 0 0 6 276 1526 0 0 10 /**
 *
 */ 1 4 this 3 1686  
157 0 0 4 277 1634 0 0 10 /**
 *
 */ 2 4 this 3 1558  5 value 1 1526  
158 0 0 4 278 1634 0 0 10 /**
 *
 */ 2 4 this 3 1558  5 value 1 1526  
159 0 0 4 279 1634 0 0 9 // Forces 1 4 this 3 1558  
160 0 0 4 280 1634 0 0 10 /**
 *
 */ 3 4 this 3 1558  5 force 1 1669  3 pos 1 1689  
161 0 0 4 281 1634 0 0 10 /**
 *
 */ 2 4 this 3 1558  5 force 1 1669  
162 0 0 4 282 1634 0 0 10 /**
 *
 */ 3 4 this 3 1558  7 impulse 1 1669  3 pos 1 1689  
163 0 0 4 283 1634 0 0 10 /**
 *
 */ 2 4 this 3 1558  7 impulse 1 1669  
164 0 0 4 284 1634 0 0 10 /**
 *
 */ 2 4 this 3 1558  6 torque 1 1669  
165 0 0 4 285 1634 0 0 10 /**
 *
 */ 2 4 this 3 1558  6 torque 1 1669  
166 0 0 7 286 1629 0 0 10 /**
 *
 */ 1 4 this 3 1686  
167 0 0 7 287 1629 0 0 10 /**
 *
 */ 1 4 this 3 1686  
168 0 0 6 288 1526 0 0 26 // Deactivation thresholds 1 4 this 3 1686  
169 0 0 6 289 1526 0 0 10 /**
 *
 */ 1 4 this 3 1686  
170 0 0 4 290 1634 0 0 10 /**
 *
 */ 2 4 this 3 1558  9 threshold 1 1526  
171 0 0 4 291 1634 0 0 10 /**
 *
 */ 2 4 this 3 1558  9 threshold 1 1526  
172 0 0 4 292 1634 0 0 10 // Gravity 2 4 this 3 1558  7 gravity 1 1669  
173 0 0 7 293 1629 0 0 10 /**
 *
 */ 1 4 this 3 1686  
174 0 0 7 294 1629 0 0 20 // Restrict movement 1 4 this 3 1686  
175 0 0 7 295 1629 0 0 10 /**
 *
 */ 1 4 this 3 1686  
176 0 0 4 296 1634 0 0 10 /**
 *
 */ 2 4 this 3 1558  6 factor 1 1669  
177 0 0 4 297 1634 0 0 10 /**
 *
 */ 2 4 this 3 1558  6 factor 1 1669  
178 0 0 6 298 1534 0 0 123 /**
 * Returns TRUE if the transform of the rigid body has changed at least once
 * since the last call to this method.
 */ 1 4 this 3 1558  
179 0 0 7 317 1638 0 0 0 0 
180 0 0 7 325 1691 0 0 10 /**
 *
 */ 4 6 node_a 1 1686  6 node_b 1 1686  7 frame_a 1 1640  7 frame_b 1 1640  
181 0 0 7 325 1691 0 0 10 /**
 *
 */ 2 6 node_a 1 1686  7 frame_a 1 1640  
182 0 0 4 326 1634 0 0 10 /**
 *
 */ 7 4 this 3 1691  6 swing1 1 1526  6 swing2 1 1526  5 twist 1 1526  8 softness 1 1526  4 bias 1 1526  10 relaxation 1 1526  
183 0 0 4 326 1634 0 0 10 /**
 *
 */ 3 4 this 3 1691  5 index 1 1528  5 value 1 1526  
184 0 0 4 327 1634 0 0 10 /**
 *
 */ 2 4 this 3 1691  7 damping 1 1526  
185 0 0 6 328 1526 0 0 10 /**
 *
 */ 1 4 this 3 1692  
186 0 0 4 329 1634 0 0 10 /**
 *
 */ 2 4 this 3 1691  9 threshold 1 1526  
187 0 0 4 330 1634 0 0 10 /**
 *
 */ 2 4 this 3 1691  6 enable 1 1534  
188 0 0 4 331 1634 0 0 10 /**
 *
 */ 2 4 this 3 1691  11 max_impulse 1 1526  
189 0 0 4 332 1634 0 0 10 /**
 *
 */ 2 4 this 3 1691  11 max_impulse 1 1526  
190 0 0 4 333 1634 0 0 10 /**
 *
 */ 2 4 this 3 1691  4 quat 1 1694  
191 0 0 4 334 1634 0 0 10 /**
 *
 */ 2 4 this 3 1691  4 quat 1 1694  
192 0 0 4 335 1634 0 0 10 /**
 *
 */ 3 4 this 3 1691  4 ts_a 1 1640  4 ts_b 1 1640  
193 0 0 7 336 1640 0 0 10 /**
 *
 */ 1 4 this 3 1692  
194 0 0 7 337 1640 0 0 10 /**
 *
 */ 1 4 this 3 1692  
195 0 0 7 341 1638 0 0 0 0 
196 0 0 6 344 1528 0 0 10 /**
 *
 */ 1 4 this 3 1698  
197 0 0 6 345 1526 0 0 10 /**
 *
 */ 1 4 this 3 1698  
198 0 0 6 346 1526 0 0 10 /**
 *
 */ 1 4 this 3 1698  
199 0 0 7 347 1628 0 0 10 /**
 *
 */ 1 4 this 3 1698  
200 0 0 7 348 1628 0 0 10 /**
 *
 */ 1 4 this 3 1698  
201 0 0 7 349 1629 0 0 10 /**
 *
 */ 1 4 this 3 1698  
202 0 0 7 350 1628 0 0 10 /**
 *
 */ 1 4 this 3 1698  
203 0 0 7 351 1628 0 0 10 /**
 *
 */ 1 4 this 3 1698  
204 0 0 6 352 1528 0 0 10 /**
 *
 */ 1 4 this 3 1698  
205 0 0 6 353 1528 0 0 10 /**
 *
 */ 1 4 this 3 1698  
206 0 0 6 354 1528 0 0 10 /**
 *
 */ 1 4 this 3 1698  
207 0 0 6 355 1528 0 0 10 /**
 *
 */ 1 4 this 3 1698  
208 0 0 4 356 1634 0 0 10 /**
 *
 */ 2 4 this 3 1594  5 value 1 1534  
209 0 0 4 357 1634 0 0 10 /**
 *
 */ 2 4 this 3 1594  3 dir 1 1653  
210 0 0 4 358 1634 0 0 10 /**
 *
 */ 2 4 this 3 1594  3 dir 1 1653  
211 0 0 4 359 1634 0 0 10 /**
 *
 */ 2 4 this 3 1594  5 value 1 1526  
212 0 0 4 360 1634 0 0 10 /**
 *
 */ 2 4 this 3 1594  5 value 1 1526  
213 0 0 4 361 1634 0 0 10 /**
 *
 */ 2 4 this 3 1594  5 value 1 1526  
214 0 0 4 362 1634 0 0 10 /**
 *
 */ 2 4 this 3 1594  5 value 1 1526  
215 0 0 4 363 1634 0 0 10 /**
 *
 */ 2 4 this 3 1594  5 value 1 1526  
216 0 0 4 364 1634 0 0 10 /**
 *
 */ 2 4 this 3 1594  5 value 1 1526  
217 0 0 4 365 1634 0 0 10 /**
 *
 */ 2 4 this 3 1594  5 value 1 1526  
218 0 0 4 366 1634 0 0 10 /**
 *
 */ 2 4 this 3 1594  5 value 1 1526  
219 0 0 4 367 1634 0 0 10 /**
 *
 */ 2 4 this 3 1594  5 value 1 1526  
220 0 0 6 368 1534 0 0 10 /**
 *
 */ 1 4 this 3 1698  
221 0 0 7 369 1629 0 0 10 /**
 *
 */ 1 4 this 3 1698  
222 0 0 7 370 1629 0 0 10 /**
 *
 */ 1 4 this 3 1698  
223 0 0 6 371 1526 0 0 10 /**
 *
 */ 1 4 this 3 1698  
224 0 0 6 372 1526 0 0 10 /**
 *
 */ 1 4 this 3 1698  
225 0 0 6 373 1526 0 0 10 /**
 *
 */ 1 4 this 3 1698  
226 0 0 6 374 1526 0 0 10 /**
 *
 */ 1 4 this 3 1698  
227 0 0 6 375 1526 0 0 10 /**
 *
 */ 1 4 this 3 1698  
228 0 0 6 376 1526 0 0 10 /**
 *
 */ 1 4 this 3 1698  
229 0 0 6 377 1526 0 0 10 /**
 *
 */ 1 4 this 3 1698  
230 0 0 6 378 1526 0 0 10 /**
 *
 */ 1 4 this 3 1698  
231 0 0 7 404 1700 0 0 10 /**
 *
 */ 7 2 mp 1 1594  5 node0 1 1520  5 node1 1 1520  3 id0 1 1528  3 id1 1 1528  6 index0 1 1528  6 index1 1 1528  
232 0 0 6 405 1594 0 0 10 /**
 *
 */ 1 4 this 3 1701  
233 0 0 7 406 1520 0 0 10 /**
 *
 */ 1 4 this 3 1701  
234 0 0 7 407 1520 0 0 10 /**
 *
 */ 1 4 this 3 1701  
235 0 0 6 408 1528 0 0 10 /**
 *
 */ 1 4 this 3 1701  
236 0 0 6 409 1528 0 0 10 /**
 *
 */ 1 4 this 3 1701  
237 0 0 6 410 1528 0 0 10 /**
 *
 */ 1 4 this 3 1701  
238 0 0 6 411 1528 0 0 10 /**
 *
 */ 1 4 this 3 1701  
239 0 0 7 419 1638 0 0 0 0 
240 0 0 6 421 1594 0 0 10 /**
 *
 */ 1 4 this 3 1703  
241 0 0 7 422 1520 0 0 10 /**
 *
 */ 1 4 this 3 1704  
242 0 0 7 423 1520 0 0 10 /**
 *
 */ 1 4 this 3 1704  
243 0 0 6 424 1528 0 0 10 /**
 *
 */ 1 4 this 3 1704  
244 0 0 6 425 1528 0 0 10 /**
 *
 */ 1 4 this 3 1704  
245 0 0 6 426 1528 0 0 10 /**
 *
 */ 1 4 this 3 1704  
246 0 0 6 427 1528 0 0 10 /**
 *
 */ 1 4 this 3 1704  
247 0 0 6 440 1528 0 0 10 /**
 *
 */ 1 4 this 3 1706  
248 0 0 7 441 1703 1010 0 10 /**
 *
 */ 2 4 this 3 1708  3 idx 1 1528  
249 0 0 6 438 1709 0 0 0 1 4 this 3 1708  
250 0 0 7 447 1586 0 0 0 1 6 param0 0 1710  
251 0 0 7 447 1586 0 0 10 /**
 *
 */ 1 4 name 1 1635  
252 0 0 4 448 1634 0 0 10 /**
 *
 */ 1 4 this 3 1586  
253 0 0 4 449 1634 0 0 10 /**
 *
 */ 2 4 this 3 1586  4 show 1 1534  
254 0 0 4 450 1634 0 0 10 /**
 *
 */ 2 4 this 3 1586  4 show 1 1534  
255 0 0 4 451 1634 0 0 10 /**
 *
 */ 2 4 this 3 1586  4 show 1 1534  
256 0 0 4 452 1634 0 0 10 /**
 *
 */ 2 4 this 3 1586  4 show 1 1534  
257 0 0 6 453 1534 0 0 10 /**
 *
 */ 1 4 this 3 1710  
258 0 0 6 454 1534 0 0 10 /**
 *
 */ 1 4 this 3 1710  
259 0 0 6 455 1534 0 0 10 /**
 *
 */ 1 4 this 3 1710  
260 0 0 6 456 1534 0 0 10 /**
 *
 */ 1 4 this 3 1710  
261 0 0 7 461 1638 0 0 0 0 
262 0 0 7 463 1587 0 0 10 /**
 *
 */ 1 4 name 1 1635  
263 0 0 6 464 1528 0 0 14 // Overlapping 1 4 this 3 1712  
264 0 0 7 465 1520 0 0 10 /**
 *
 */ 2 4 this 3 1712  3 idx 1 1528  
265 0 0 7 469 1638 0 0 0 0 
266 0 0 7 485 1716 1033 0 0 1 6 param0 0 1714  
267 0 0 7 472 1716 1033 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
268 0 0 7 473 1628 0 0 10 /**
 *
 */ 1 4 this 3 1714  
269 0 0 7 474 1629 0 0 10 /**
 *
 */ 1 4 this 3 1714  
270 0 0 7 475 1629 0 0 10 /**
 *
 */ 1 4 this 3 1714  
271 0 0 6 476 1526 0 0 10 /**
 *
 */ 1 4 this 3 1714  
272 0 0 6 477 1526 0 0 10 /**
 *
 */ 1 4 this 3 1714  
273 0 0 6 478 1528 0 0 10 /**
 *
 */ 1 4 this 3 1714  
274 0 0 7 487 1717 1086 0 10 /**
 *
 */ 1 4 this 3 1588  
275 0 0 7 488 1718 1141 0 10 /**
 *
 */ 1 4 this 3 1588  
276 0 0 4 489 1634 0 0 10 /**
 *
 */ 3 4 this 3 1588  8 distance 1 1528  8 material 1 1719  
277 0 0 4 490 1634 0 0 10 /**
 *
 */ 1 4 this 3 1588  
278 0 0 4 491 1634 0 0 24 // Mass, volume, density 2 4 this 3 1588  4 mass 1 1526  
279 0 0 4 492 1634 0 0 10 /**
 *
 */ 2 4 this 3 1588  7 density 1 1526  
280 0 0 4 493 1634 0 0 10 /**
 *
 */ 3 4 this 3 1588  4 mass 1 1526  9 fromfaces 1 1534  
281 0 0 4 494 1634 0 0 10 /**
 *
 */ 2 4 this 3 1588  7 density 1 1526  
282 0 0 4 495 1634 0 0 10 /**
 *
 */ 3 4 this 3 1588  4 node 1 1528  4 mass 1 1526  
283 0 0 6 496 1526 0 0 10 /**
 *
 */ 2 4 this 3 1720  4 node 1 1528  
284 0 0 6 497 1526 0 0 10 /**
 *
 */ 1 4 this 3 1720  
285 0 0 6 498 1526 0 0 10 /**
 *
 */ 1 4 this 3 1720  
286 0 0 4 499 1634 0 0 10 /**
 *
 */ 2 4 this 3 1588  5 force 1 1669  
287 0 0 4 499 1634 0 0 10 /**
 *
 */ 3 4 this 3 1588  5 force 1 1669  4 node 1 1528  
288 0 0 4 500 1634 0 0 10 /**
 *
 */ 2 4 this 3 1588  8 velocity 1 1669  
289 0 0 4 501 1634 0 0 10 /**
 *
 */ 2 4 this 3 1588  8 velocity 1 1669  
290 0 0 4 501 1634 0 0 10 /**
 *
 */ 3 4 this 3 1588  8 velocity 1 1669  4 node 1 1528  
291 0 0 4 502 1634 0 0 10 /**
 *
 */ 2 4 this 3 1588  8 velocity 1 1669  
292 0 0 7 503 1629 0 0 10 /**
 *
 */ 1 4 this 3 1720  
293 0 0 4 504 1634 0 0 10 /**
 *
 */ 3 4 this 3 1588  7 bvolume 1 1534  6 bframe 1 1534  
294 0 0 7 505 1722 0 0 10 /**
 *
 */ 1 4 this 3 1720  
295 0 0 4 506 1634 0 0 10 // Cluster 3 4 this 3 1588  1 k 1 1528  13 maxiterations 1 1528  
296 0 0 4 507 1634 0 0 10 /**
 *
 */ 2 4 this 3 1588  5 index 1 1528  
297 0 0 4 508 1634 0 0 10 /**
 *
 */ 1 4 this 3 1588  
298 0 0 6 509 1528 0 0 10 /**
 *
 */ 1 4 this 3 1720  
299 0 0 7 510 1655 0 0 10 /**
 *
 */ 2 4 this 3 1720  7 cluster 1 1528  
300 0 0 4 511 1634 0 0 12 // Rendering 2 4 this 3 1588  4 geom 1 1723  
301 0 0 4 512 1634 0 0 10 /**
 *
 */ 1 4 this 3 1588  
302 0 0 4 513 1634 0 0 10 /**
 *
 */ 2 4 this 3 1588  5 curve 1 1725  
303 0 0 4 514 1634 0 0 10 /**
 *
 */ 1 4 this 3 1588  
304 0 0 4 515 1634 0 0 10 /**
 *
 */ 2 4 this 3 1588  7 surface 1 1727  
305 0 0 4 516 1634 0 0 10 /**
 *
 */ 1 4 this 3 1588  
306 0 0 4 517 1634 0 0 10 /**
 *
 */ 5 4 this 3 1588  4 node 1 1528  4 body 1 1558  5 pivot 1 1669  7 disable 1 1534  
307 0 0 4 517 1634 0 0 10 // Anchors 4 4 this 3 1588  4 node 1 1528  4 body 1 1558  7 disable 1 1534  
308 0 0 4 518 1634 0 0 10 /**
 *
 */ 6 4 this 3 1588  4 body 1 1639  3 pos 1 1689  3 erp 1 1526  3 cfm 1 1526  5 split 1 1526  
309 0 0 4 518 1634 0 0 10 /**
 *
 */ 6 4 this 3 1588  4 body 1 1639  7 cluster 1 1528  3 erp 1 1526  3 cfm 1 1526  5 split 1 1526  
310 0 0 4 519 1634 0 0 10 /**
 *
 */ 7 4 this 3 1588  4 body 1 1639  4 axis 1 1669  3 erp 1 1526  3 cfm 1 1526  5 split 1 1526  7 control 1 1729  
311 0 0 6 520 1528 0 0 12 // Materials 1 4 this 3 1720  
312 0 0 7 521 1719 1154 0 10 /**
 *
 */ 2 4 this 3 1720  3 idx 1 1528  
313 0 0 7 523 1719 1154 0 10 /**
 *
 */ 1 4 this 3 1588  
314 0 0 6 524 1528 0 0 10 /**
 *
 */ 1 4 this 3 1720  
315 0 0 7 525 1716 1033 0 10 /**
 *
 */ 2 4 this 3 1720  3 idx 1 1528  
316 0 0 6 527 1528 0 0 212 /**
 * Returns the index of the node which is closest to the given point.  The
 * distance between each node and the given point is computed in world space
 * if local=false, and in local space if local=true.
 */ 3 4 this 3 1588  5 point 1 1655  5 local 1 1534  
317 0 0 7 528 1588 0 0 10 // Factory 5 4 info 1 1718  4 from 1 1689  2 to 1 1689  3 res 1 1528  6 fixeds 1 1528  
318 0 0 7 529 1588 0 0 10 /**
 *
 */ 9 4 info 1 1718  8 corner00 1 1689  8 corner10 1 1689  8 corner01 1 1689  8 corner11 1 1689  4 resx 1 1528  4 resy 1 1528  6 fixeds 1 1528  8 gendiags 1 1534  
319 0 0 7 530 1588 0 0 10 /**
 *
 */ 4 4 info 1 1718  6 center 1 1689  6 radius 1 1653  3 res 1 1528  
320 0 0 7 531 1588 0 0 10 /**
 *
 */ 3 4 info 1 1718  4 geom 1 1730  20 randomizeConstraints 1 1534  
321 0 0 7 531 1588 0 0 10 /**
 *
 */ 4 4 info 1 1718  6 points 1 1732  7 indices 1 1736  20 randomizeConstraints 1 1534  
322 0 0 7 532 1588 0 0 10 /**
 *
 */ 4 4 info 1 1718  6 points 1 1732  7 indices 1 1736  10 tetralinks 1 1534  
323 0 0 7 532 1588 0 0 10 /**
 *
 */ 4 4 info 1 1718  3 ele 1 1635  4 face 1 1635  4 node 1 1635  
324 0 0 7 658 1638 0 0 0 0 
325 0 0 7 616 1717 1086 0 0 1 6 param0 0 1739  
326 0 0 4 538 1634 0 0 10 /**
 *
 */ 1 4 this 3 1717  
327 0 0 4 539 1634 0 0 10 /**
 *
 */ 3 4 this 3 1717  4 flag 1 1574  5 value 1 1534  
328 0 0 6 540 1534 0 0 10 /**
 *
 */ 2 4 this 3 1739  4 flag 1 1574  
329 0 0 4 541 1634 0 0 10 /**
 *
 */ 2 4 this 3 1717  5 value 1 1575  
330 0 0 6 542 1575 0 0 10 /**
 *
 */ 1 4 this 3 1739  
331 0 0 4 543 1634 0 0 36 /**
 * Setter for property kVCF.
 */ 2 4 this 3 1717  5 value 1 1526  
332 0 0 4 544 1634 0 0 35 /**
 * Setter for property kDP.
 */ 2 4 this 3 1717  5 value 1 1526  
333 0 0 4 545 1634 0 0 35 /**
 * Setter for property kDG.
 */ 2 4 this 3 1717  5 value 1 1526  
334 0 0 4 546 1634 0 0 35 /**
 * Setter for property kLF.
 */ 2 4 this 3 1717  5 value 1 1526  
335 0 0 4 547 1634 0 0 35 /**
 * Setter for property kPR.
 */ 2 4 this 3 1717  5 value 1 1526  
336 0 0 4 548 1634 0 0 35 /**
 * Setter for property kVC.
 */ 2 4 this 3 1717  5 value 1 1526  
337 0 0 4 549 1634 0 0 35 /**
 * Setter for property kDF.
 */ 2 4 this 3 1717  5 value 1 1526  
338 0 0 4 550 1634 0 0 35 /**
 * Setter for property kMT.
 */ 2 4 this 3 1717  5 value 1 1526  
339 0 0 4 551 1634 0 0 36 /**
 * Setter for property kCHR.
 */ 2 4 this 3 1717  5 value 1 1526  
340 0 0 4 552 1634 0 0 36 /**
 * Setter for property kKHR.
 */ 2 4 this 3 1717  5 value 1 1526  
341 0 0 4 553 1634 0 0 36 /**
 * Setter for property kSHR.
 */ 2 4 this 3 1717  5 value 1 1526  
342 0 0 4 554 1634 0 0 36 /**
 * Setter for property kAHR.
 */ 2 4 this 3 1717  5 value 1 1526  
343 0 0 4 555 1634 0 0 40 /**
 * Setter for property kSRHR_CL.
 */ 2 4 this 3 1717  5 value 1 1526  
344 0 0 4 556 1634 0 0 40 /**
 * Setter for property kSKHR_CL.
 */ 2 4 this 3 1717  5 value 1 1526  
345 0 0 4 557 1634 0 0 40 /**
 * Setter for property kSSHR_CL.
 */ 2 4 this 3 1717  5 value 1 1526  
346 0 0 4 558 1634 0 0 43 /**
 * Setter for property kSR_SPLT_CL.
 */ 2 4 this 3 1717  5 value 1 1526  
347 0 0 4 559 1634 0 0 43 /**
 * Setter for property kSK_SPLT_CL.
 */ 2 4 this 3 1717  5 value 1 1526  
348 0 0 4 560 1634 0 0 43 /**
 * Setter for property kSS_SPLT_CL.
 */ 2 4 this 3 1717  5 value 1 1526  
349 0 0 4 561 1634 0 0 41 /**
 * Setter for property maxvolume.
 */ 2 4 this 3 1717  5 value 1 1526  
350 0 0 4 562 1634 0 0 41 /**
 * Setter for property timescale.
 */ 2 4 this 3 1717  5 value 1 1526  
351 0 0 4 563 1634 0 0 43 /**
 * Setter for property piterations.
 */ 2 4 this 3 1717  5 value 1 1528  
352 0 0 4 564 1634 0 0 43 /**
 * Setter for property viterations.
 */ 2 4 this 3 1717  5 value 1 1528  
353 0 0 4 565 1634 0 0 43 /**
 * Setter for property diterations.
 */ 2 4 this 3 1717  5 value 1 1528  
354 0 0 4 566 1634 0 0 43 /**
 * Setter for property citerations.
 */ 2 4 this 3 1717  5 value 1 1528  
355 0 0 6 567 1526 0 0 36 /**
 * Getter for property kVCF.
 */ 1 4 this 3 1739  
356 0 0 6 568 1526 0 0 35 /**
 * Getter for property kDP.
 */ 1 4 this 3 1739  
357 0 0 6 569 1526 0 0 35 /**
 * Getter for property kDG.
 */ 1 4 this 3 1739  
358 0 0 6 570 1526 0 0 35 /**
 * Getter for property kLF.
 */ 1 4 this 3 1739  
359 0 0 6 571 1526 0 0 35 /**
 * Getter for property kPR.
 */ 1 4 this 3 1739  
360 0 0 6 572 1526 0 0 35 /**
 * Getter for property kVC.
 */ 1 4 this 3 1739  
361 0 0 6 573 1526 0 0 35 /**
 * Getter for property kDF.
 */ 1 4 this 3 1739  
362 0 0 6 574 1526 0 0 35 /**
 * Getter for property kMT.
 */ 1 4 this 3 1739  
363 0 0 6 575 1526 0 0 36 /**
 * Getter for property kCHR.
 */ 1 4 this 3 1739  
364 0 0 6 576 1526 0 0 36 /**
 * Getter for property kKHR.
 */ 1 4 this 3 1739  
365 0 0 6 577 1526 0 0 36 /**
 * Getter for property kSHR.
 */ 1 4 this 3 1739  
366 0 0 6 578 1526 0 0 36 /**
 * Getter for property kAHR.
 */ 1 4 this 3 1739  
367 0 0 6 579 1526 0 0 40 /**
 * Getter for property kSRHR_CL.
 */ 1 4 this 3 1739  
368 0 0 6 580 1526 0 0 40 /**
 * Getter for property kSKHR_CL.
 */ 1 4 this 3 1739  
369 0 0 6 581 1526 0 0 40 /**
 * Getter for property kSSHR_CL.
 */ 1 4 this 3 1739  
370 0 0 6 582 1526 0 0 43 /**
 * Getter for property kSR_SPLT_CL.
 */ 1 4 this 3 1739  
371 0 0 6 583 1526 0 0 43 /**
 * Getter for property kSK_SPLT_CL.
 */ 1 4 this 3 1739  
372 0 0 6 584 1526 0 0 43 /**
 * Getter for property kSS_SPLT_CL.
 */ 1 4 this 3 1739  
373 0 0 6 585 1526 0 0 41 /**
 * Getter for property maxvolume.
 */ 1 4 this 3 1739  
374 0 0 6 586 1526 0 0 41 /**
 * Getter for property timescale.
 */ 1 4 this 3 1739  
375 0 0 6 587 1528 0 0 43 /**
 * Getter for property piterations.
 */ 1 4 this 3 1739  
376 0 0 6 588 1528 0 0 43 /**
 * Getter for property viterations.
 */ 1 4 this 3 1739  
377 0 0 6 589 1528 0 0 43 /**
 * Getter for property diterations.
 */ 1 4 this 3 1739  
378 0 0 6 590 1528 0 0 43 /**
 * Getter for property citerations.
 */ 1 4 this 3 1739  
379 0 0 7 636 1718 1141 0 0 1 6 param0 0 1741  
380 0 0 4 620 1634 0 0 10 /**
 *
 */ 2 4 this 3 1718  7 density 1 1526  
381 0 0 4 621 1634 0 0 10 /**
 *
 */ 2 4 this 3 1718  7 density 1 1526  
382 0 0 4 622 1634 0 0 10 /**
 *
 */ 2 4 this 3 1718  6 offset 1 1526  
383 0 0 4 623 1634 0 0 10 /**
 *
 */ 2 4 this 3 1718  6 normal 1 1669  
384 0 0 4 624 1634 0 0 10 /**
 *
 */ 2 4 this 3 1718  7 gravity 1 1669  
385 0 0 6 625 1526 0 0 10 /**
 *
 */ 1 4 this 3 1741  
386 0 0 6 626 1526 0 0 10 /**
 *
 */ 1 4 this 3 1741  
387 0 0 6 627 1526 0 0 10 /**
 *
 */ 1 4 this 3 1741  
388 0 0 7 628 1629 0 0 10 /**
 *
 */ 1 4 this 3 1741  
389 0 0 7 629 1629 0 0 10 /**
 *
 */ 1 4 this 3 1741  
390 0 0 4 630 1634 0 0 10 /**
 *
 */ 2 4 this 3 1718  8 lifetime 1 1528  
391 0 0 7 654 1719 1154 0 0 1 6 param0 0 1743  
392 0 0 7 644 1719 1154 0 102 /**
 * Named constructor intended to be used for asserts which have to return a
 * concrete value.
 */ 0 
393 0 0 6 645 1526 0 0 42 /**
 * Getter for the property m_kLST.
 */ 1 4 this 3 1743  
394 0 0 4 646 1634 0 0 42 /**
 * Setter for the property m_kLST.
 */ 2 4 this 3 1719  5 value 1 1526  
395 0 0 6 647 1526 0 0 42 /**
 * Getter for the property m_kAST.
 */ 1 4 this 3 1743  
396 0 0 4 648 1634 0 0 42 /**
 * Setter for the property m_kAST.
 */ 2 4 this 3 1719  5 value 1 1526  
397 0 0 6 649 1526 0 0 42 /**
 * Getter for the property m_kVST.
 */ 1 4 this 3 1743  
398 0 0 4 650 1634 0 0 42 /**
 * Setter for the property m_kVST.
 */ 2 4 this 3 1719  5 value 1 1526  
399 0 0 4 660 1634 0 0 10 /**
 *
 */ 2 4 this 3 1745  5 value 1 1526  
400 0 0 4 661 1634 0 0 10 /**
 *
 */ 2 4 this 3 1745  5 value 1 1526  
401 0 0 4 662 1634 0 0 10 /**
 *
 */ 2 4 this 3 1745  5 value 1 1526  
402 0 0 4 663 1634 0 0 10 /**
 *
 */ 2 4 this 3 1745  5 value 1 1526  
403 0 0 4 664 1634 0 0 10 /**
 *
 */ 2 4 this 3 1745  5 value 1 1526  
404 0 0 4 665 1634 0 0 10 /**
 *
 */ 2 4 this 3 1745  5 value 1 1526  
405 0 0 6 666 1526 0 0 10 /**
 *
 */ 1 4 this 3 1746  
406 0 0 6 667 1526 0 0 10 /**
 *
 */ 1 4 this 3 1746  
407 0 0 6 668 1526 0 0 10 /**
 *
 */ 1 4 this 3 1746  
408 0 0 6 669 1526 0 0 10 /**
 *
 */ 1 4 this 3 1746  
409 0 0 6 670 1526 0 0 10 /**
 *
 */ 1 4 this 3 1746  
410 0 0 6 671 1526 0 0 10 /**
 *
 */ 1 4 this 3 1746  
411 0 0 7 679 1590 0 0 94 /**
 * Creates a new BulletVehicle instance in the given world and with a chassis
 * node.
 */ 2 5 world 1 1748  7 chassis 1 1558  
412 0 0 4 680 1634 0 0 100 /**
 * Specifies which axis is "up". Nessecary for the vehicle's suspension to
 * work properly!
 */ 2 4 this 3 1590  2 up 1 1518  
413 0 0 4 681 1634 0 0 76 /**
 * Sets the steering value (in degrees) of the wheel with index idx.
 */ 3 4 this 3 1590  8 steering 1 1526  3 idx 1 1528  
414 0 0 4 682 1634 0 0 61 /**
 * Applies braking force to the wheel with index idx.
 */ 3 4 this 3 1590  5 brake 1 1526  3 idx 1 1528  
415 0 0 4 683 1634 0 0 10 /**
 *
 */ 2 4 this 3 1590  5 pitch 1 1526  
416 0 0 7 684 1558 0 0 82 /**
 * Returns the chassis of this vehicle.  The chassis is a rigid body node.
 */ 1 4 this 3 1590  
417 0 0 6 685 1526 0 0 106 /**
 * Returns the current speed in kilometers per hour.  Convert to miles using:
 * km/h * 0.62 = mph
 */ 1 4 this 3 1749  
418 0 0 6 686 1526 0 0 77 /**
 * Returns the steering angle of the wheel with index idx in degrees.
 */ 2 4 this 3 1749  3 idx 1 1528  
419 0 0 7 687 1629 0 0 145 /**
 * Returns the forward vector representing the car's actual direction of
 * movement.  The forward vetcor is given in global coordinates.
 */ 1 4 this 3 1749  
420 0 0 4 688 1634 0 0 43 /**
 * Resets the vehicle's suspension.
 */ 1 4 this 3 1590  
421 0 0 4 689 1634 0 0 70 /**
 * Applies force at the wheel with index idx for acceleration.
 */ 3 4 this 3 1590  5 force 1 1526  3 idx 1 1528  
422 0 0 7 690 1751 1193 0 72 /**
 * Factory method for creating wheels for this vehicle instance.
 */ 2 4 this 3 1590  22 suspension_rest_length 1 1526  
423 0 0 6 691 1528 0 0 57 /**
 * Returns the number of wheels this vehicle has.
 */ 1 4 this 3 1749  
424 0 0 7 692 1751 1193 0 132 /**
 * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is
 * equal or larger than the number of wheels.
 */ 2 4 this 3 1749  3 idx 1 1528  
425 0 0 6 694 1745 0 0 189 /**
 * Returns a reference to the BulletVehicleTuning object of this vehicle which
 * offers various vehicle-global tuning options.  Make sure to configure this
 * before adding wheels!
 */ 1 4 this 3 1590  
426 0 0 7 796 1638 0 0 0 0 
427 0 0 7 793 1751 1193 0 0 1 6 param0 0 1752  
428 0 0 4 701 1634 0 0 50 /**
 * Sets how stiff the suspension shall be.
 */ 2 4 this 3 1751  5 value 1 1526  
429 0 0 4 702 1634 0 0 109 /**
 * Sets the maximum distance the suspension can travel out of the resting
 * position in centimeters.
 */ 2 4 this 3 1751  5 value 1 1526  
430 0 0 4 703 1634 0 0 45 /**
 * Sets the slipperyness of the tyre.
 */ 2 4 this 3 1751  5 value 1 1526  
431 0 0 4 704 1634 0 0 66 /**
 * Sets the maximum suspension force the wheel can handle.
 */ 2 4 this 3 1751  5 value 1 1526  
432 0 0 4 705 1634 0 0 79 /**
 * Sets the damping forces applied when the suspension gets compressed.
 */ 2 4 this 3 1751  5 value 1 1526  
433 0 0 4 706 1634 0 0 71 /**
 * Sets the damping forces applied when the suspension relaxes.
 */ 2 4 this 3 1751  5 value 1 1526  
434 0 0 4 707 1634 0 0 249 /**
 * Defines a scaling factor for roll forces that affect the chassis.  0.0
 * means no roll - the chassis won't ever flip over - while 1.0 means original
 * physical behaviour.  Basically, this allows moving the center of mass up
 * and down.
 */ 2 4 this 3 1751  5 value 1 1526  
435 0 0 4 708 1634 0 0 33 /**
 * Sets the wheel radius.
 */ 2 4 this 3 1751  5 value 1 1526  
436 0 0 4 709 1634 0 0 35 /**
 * Sets the steering angle.
 */ 2 4 this 3 1751  5 value 1 1526  
437 0 0 4 710 1634 0 0 10 /**
 *
 */ 2 4 this 3 1751  5 value 1 1526  
438 0 0 4 711 1634 0 0 10 /**
 *
 */ 2 4 this 3 1751  5 value 1 1526  
439 0 0 4 712 1634 0 0 69 /**
 * Defines how much force should be used to rotate the wheel.
 */ 2 4 this 3 1751  5 value 1 1526  
440 0 0 4 713 1634 0 0 10 /**
 *
 */ 2 4 this 3 1751  5 value 1 1526  
441 0 0 4 714 1634 0 0 10 /**
 *
 */ 2 4 this 3 1751  5 value 1 1526  
442 0 0 4 715 1634 0 0 10 /**
 *
 */ 2 4 this 3 1751  5 value 1 1526  
443 0 0 4 716 1634 0 0 10 /**
 *
 */ 2 4 this 3 1751  5 value 1 1526  
444 0 0 4 717 1634 0 0 10 /**
 *
 */ 2 4 this 3 1751  5 value 1 1526  
445 0 0 4 718 1634 0 0 70 /**
 * Sets the point where the wheel is connected to the chassis.
 */ 2 4 this 3 1751  3 pos 1 1689  
446 0 0 4 719 1634 0 0 92 /**
 * Sets the wheel's forward vector.  (Most likely orthogonal to the axle
 * vector.)
 */ 2 4 this 3 1751  3 dir 1 1669  
447 0 0 4 720 1634 0 0 51 /**
 * Determines the wheel axle normal vector.
 */ 2 4 this 3 1751  4 axle 1 1669  
448 0 0 4 721 1634 0 0 10 /**
 *
 */ 2 4 this 3 1751  3 mat 1 1754  
449 0 0 4 722 1634 0 0 42 /**
 * Sets if the wheel is steerable.
 */ 2 4 this 3 1751  5 value 1 1534  
450 0 0 4 723 1634 0 0 86 /**
 * Sets the PandaNode which representates the visual appearance of this wheel.
 */ 2 4 this 3 1751  4 node 1 1520  
451 0 0 6 724 1526 0 0 83 /**
 * Returns the length of the suspension when the vehicle is standing still.
 */ 1 4 this 3 1752  
452 0 0 6 725 1526 0 0 51 /**
 * Returns the stiffness of the suspension.
 */ 1 4 this 3 1752  
453 0 0 6 726 1526 0 0 10 /**
 *
 */ 1 4 this 3 1752  
454 0 0 6 727 1526 0 0 46 /**
 * Returns how slippery the tyres are.
 */ 1 4 this 3 1752  
455 0 0 6 728 1526 0 0 72 /**
 * Returns the maximum force (weight) the suspension can handle.
 */ 1 4 this 3 1752  
456 0 0 6 729 1526 0 0 70 /**
 * Returns the  damping applied to the compressing suspension.
 */ 1 4 this 3 1752  
457 0 0 6 730 1526 0 0 66 /**
 * Returns the damping applied to the relaxing suspension.
 */ 1 4 this 3 1752  
458 0 0 6 731 1526 0 0 90 /**
 * Returns the factor by which roll forces are scaled.  See
 * set_roll_influence.
 */ 1 4 this 3 1752  
459 0 0 6 732 1526 0 0 36 /**
 * Returns the wheel radius.
 */ 1 4 this 3 1752  
460 0 0 6 733 1526 0 0 49 /**
 * Returns the steering angle in degrees.
 */ 1 4 this 3 1752  
461 0 0 6 734 1526 0 0 10 /**
 *
 */ 1 4 this 3 1752  
462 0 0 6 735 1526 0 0 10 /**
 *
 */ 1 4 this 3 1752  
463 0 0 6 736 1526 0 0 71 /**
 * Returns the amount of accelleration force currently applied.
 */ 1 4 this 3 1752  
464 0 0 6 737 1526 0 0 65 /**
 * Returns the amount of braking force currently applied.
 */ 1 4 this 3 1752  
465 0 0 6 738 1526 0 0 10 /**
 *
 */ 1 4 this 3 1752  
466 0 0 6 739 1526 0 0 10 /**
 *
 */ 1 4 this 3 1752  
467 0 0 6 740 1526 0 0 10 /**
 *
 */ 1 4 this 3 1752  
468 0 0 6 741 1526 0 0 10 /**
 *
 */ 1 4 this 3 1752  
469 0 0 7 742 1628 0 0 73 /**
 * Returns the point where the wheel is connected to the chassis.
 */ 1 4 this 3 1752  
470 0 0 7 743 1629 0 0 70 /**
 * Returns the wheel's forward vector relative to the chassis.
 */ 1 4 this 3 1752  
471 0 0 7 744 1629 0 0 55 /**
 * Returns the normal vector of the wheel axle.
 */ 1 4 this 3 1752  
472 0 0 7 745 1645 0 0 10 /**
 *
 */ 1 4 this 3 1752  
473 0 0 6 746 1534 0 0 46 /**
 * Determines if a wheel is steerable.
 */ 1 4 this 3 1752  
474 0 0 7 747 1520 0 0 142 /**
 * Returns the PandaNode which representates the visual appearance of this
 * wheel, if such a representation has been set previously.
 */ 1 4 this 3 1752  
475 0 0 7 748 1756 1242 0 10 /**
 *
 */ 1 4 this 3 1752  
476 0 0 7 768 1756 1242 0 0 1 6 param0 0 1757  
477 0 0 6 752 1534 0 0 10 /**
 *
 */ 1 4 this 3 1757  
478 0 0 6 753 1526 0 0 10 /**
 *
 */ 1 4 this 3 1757  
479 0 0 7 754 1629 0 0 10 /**
 *
 */ 1 4 this 3 1757  
480 0 0 7 755 1629 0 0 10 /**
 *
 */ 1 4 this 3 1757  
481 0 0 7 756 1629 0 0 10 /**
 *
 */ 1 4 this 3 1757  
482 0 0 7 757 1628 0 0 10 /**
 *
 */ 1 4 this 3 1757  
483 0 0 7 758 1628 0 0 10 /**
 *
 */ 1 4 this 3 1757  
484 0 0 7 759 1520 0 0 10 /**
 *
 */ 1 4 this 3 1757  
485 0 0 7 798 1748 0 0 10 /**
 *
 */ 0 
486 0 0 4 799 1634 0 0 10 /**
 *
 */ 2 4 this 3 1748  7 gravity 1 1669  
487 0 0 4 799 1634 0 0 10 /**
 *
 */ 4 4 this 3 1748  2 gx 1 1526  2 gy 1 1526  2 gz 1 1526  
488 0 0 7 800 1669 0 0 10 /**
 *
 */ 1 4 this 3 1759  
489 0 0 6 801 1528 0 0 10 /**
 *
 */ 4 4 this 3 1748  2 dt 1 1526  12 max_substeps 1 1528  8 stepsize 1 1526  
490 0 0 7 802 1718 1141 0 10 /**
 *
 */ 1 4 this 3 1748  
491 0 0 4 803 1634 0 0 10 /**
 *
 */ 2 4 this 3 1748  4 node 1 1586  
492 0 0 4 804 1634 0 0 75 /**
 * Removes a debug node that has been assigned to this BulletWorld.
 */ 1 4 this 3 1748  
493 0 0 7 805 1586 0 0 10 /**
 *
 */ 1 4 this 3 1759  
494 0 0 6 806 1534 0 0 10 /**
 *
 */ 1 4 this 3 1759  
495 0 0 4 807 1634 0 0 15 // AttachRemove 2 4 this 3 1748  6 object 1 1761  
496 0 0 4 808 1634 0 0 10 /**
 *
 */ 2 4 this 3 1748  6 object 1 1761  
497 0 0 4 809 1634 0 0 156 /**
 * Attaches a single constraint to a world.  Collision checks between the
 * linked objects will be disabled if the second parameter is set to TRUE.
 */ 3 4 this 3 1748  10 constraint 1 1591  16 linked_collision 1 1534  
498 0 0 6 810 1528 0 0 15 // Ghost object 1 4 this 3 1759  
499 0 0 7 811 1587 0 0 10 /**
 *
 */ 2 4 this 3 1759  3 idx 1 1528  
500 0 0 6 813 1528 0 0 13 // Rigid body 1 4 this 3 1759  
501 0 0 7 814 1558 0 0 10 /**
 *
 */ 2 4 this 3 1759  3 idx 1 1528  
502 0 0 6 816 1528 0 0 12 // Soft body 1 4 this 3 1759  
503 0 0 7 817 1588 0 0 10 /**
 *
 */ 2 4 this 3 1759  3 idx 1 1528  
504 0 0 6 819 1528 0 0 23 // Character controller 1 4 this 3 1759  
505 0 0 7 820 1589 788 0 10 /**
 *
 */ 2 4 this 3 1759  3 idx 1 1528  
506 0 0 6 822 1528 0 0 10 /**
 *
 */ 1 4 this 3 1759  
507 0 0 7 823 1590 0 0 10 /**
 *
 */ 2 4 this 3 1759  3 idx 1 1528  
508 0 0 6 825 1528 0 0 13 // Constraint 1 4 this 3 1759  
509 0 0 7 826 1591 0 0 10 /**
 *
 */ 2 4 this 3 1759  3 idx 1 1528  
510 0 0 7 828 1675 877 0 28 // Raycast and other queries 4 4 this 3 1759  8 from_pos 1 1689  6 to_pos 1 1689  4 mask 1 1763  
511 0 0 7 829 1630 774 0 10 /**
 *
 */ 4 4 this 3 1759  8 from_pos 1 1689  6 to_pos 1 1689  4 mask 1 1763  
512 0 0 7 830 1679 889 0 203 /**
 * Performs a sweep test against all other shapes that match the given group
 * mask.  The provided shape must be a convex shape; it is an error to invoke
 * this method using a non-convex shape.
 */ 6 4 this 3 1759  5 shape 1 1541  7 from_ts 1 1640  5 to_ts 1 1640  4 mask 1 1763  11 penetration 1 1526  
513 0 0 7 831 1708 1016 0 386 /**
 * Performas a test for all bodies which are currently in contact with the
 * given body.  The test returns a BulletContactResult object which may
 * contain zero, one or more contacts.
 *
 * If the optional parameter use_filter is set to TRUE this test will consider
 * filter settings.  Otherwise all objects in contact are reported, no matter
 * if they would collide or not.
 */ 3 4 this 3 1759  4 node 1 1520  10 use_filter 1 1534  
514 0 0 7 832 1708 1016 0 181 /**
 * Performas a test if the two bodies given as parameters are in contact or
 * not.  The test returns a BulletContactResult object which may contain zero
 * or one contacts.
 */ 3 4 this 3 1759  5 node0 1 1520  5 node1 1 1520  
515 0 0 6 833 1534 0 0 105 /**
 * Performs a test if two bodies should collide or not, based on the collision
 * filter setting.
 */ 3 4 this 3 1759  5 node0 1 1520  5 node1 1 1520  
516 0 0 6 834 1528 0 0 12 // Manifolds 1 4 this 3 1759  
517 0 0 6 835 1592 0 0 10 /**
 *
 */ 2 4 this 3 1759  3 idx 1 1528  
518 0 0 4 837 1634 0 0 22 // Collision filtering 4 4 this 3 1748  6 group1 1 1765  6 group2 1 1765  6 enable 1 1534  
519 0 0 6 838 1534 0 0 10 /**
 *
 */ 3 4 this 3 1759  6 group1 1 1765  6 group2 1 1765  
520 0 0 4 839 1634 0 0 10 /**
 *
 */ 2 4 this 3 1748  5 force 1 1534  
521 0 0 6 840 1534 0 0 10 /**
 *
 */ 1 4 this 3 1759  
522 0 0 4 841 1634 0 0 12 // Callbacks 2 4 this 3 1748  3 obj 1 1766  
523 0 0 4 842 1634 0 0 10 /**
 *
 */ 1 4 this 3 1748  
524 0 0 4 843 1634 0 0 10 /**
 *
 */ 3 4 this 3 1748  3 obj 1 1766  10 is_pretick 1 1534  
525 0 0 4 844 1634 0 0 10 /**
 *
 */ 1 4 this 3 1748  
526 0 0 4 845 1634 0 0 10 /**
 *
 */ 2 4 this 3 1748  3 obj 1 1766  
527 0 0 4 846 1634 0 0 10 /**
 *
 */ 1 4 this 3 1748  
528 0 0 4 892 1634 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1748  4 node 1 1587  
529 0 0 4 893 1634 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1748  4 node 1 1587  
530 0 0 4 894 1634 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1748  4 node 1 1558  
531 0 0 4 895 1634 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1748  4 node 1 1558  
532 0 0 4 896 1634 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1748  4 node 1 1588  
533 0 0 4 897 1634 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1748  4 node 1 1588  
534 0 0 4 898 1634 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1748  4 node 1 1589  
535 0 0 4 899 1634 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1748  4 node 1 1589  
536 0 0 4 900 1634 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1748  7 vehicle 1 1590  
537 0 0 4 901 1634 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1748  7 vehicle 1 1590  
538 0 0 4 902 1634 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1748  10 constraint 1 1591  
539 0 0 7 903 1638 0 0 0 0 
540 0 0 7 889 1592 1303 0 0 1 6 param0 0 1768  
541 0 0 7 874 1520 0 0 10 /**
 *
 */ 1 4 this 3 1592  
542 0 0 7 875 1520 0 0 10 /**
 *
 */ 1 4 this 3 1592  
543 0 0 6 876 1528 0 0 10 /**
 *
 */ 1 4 this 3 1768  
544 0 0 6 877 1594 0 0 10 /**
 *
 */ 2 4 this 3 1768  3 idx 1 1528  
545 0 0 6 879 1526 0 0 10 /**
 *
 */ 1 4 this 3 1768  
546 0 0 6 880 1526 0 0 10 /**
 *
 */ 1 4 this 3 1768  
547 0 0 4 881 1634 0 0 10 /**
 *
 */ 1 4 this 3 1592  
548 0 0 7 905 1770 0 0 10 /**
 *
 */ 0 
549 0 0 7 905 1770 0 0 10 /**
 *
 */ 1 4 copy 1 1771  
550 0 0 4 906 1634 0 0 10 /**
 *
 */ 2 4 this 3 1770  1 p 1 1689  
551 0 0 4 907 1634 0 0 10 /**
 *
 */ 2 4 this 3 1770  6 points 1 1773  
552 0 0 4 908 1634 0 0 10 /**
 *
 */ 3 4 this 3 1770  4 geom 1 1730  2 ts 1 1640  
553 0 0 7 909 1638 0 0 0 0 
554 0 0 7 911 1777 0 0 10 /**
 *
 */ 1 4 copy 1 1775  
555 0 0 7 911 1777 0 0 10 /**
 *
 */ 2 4 geom 1 1730  5 scale 1 1655  
556 0 0 7 911 1777 0 0 10 /**
 *
 */ 2 6 points 1 1773  5 scale 1 1655  
557 0 0 6 912 1528 0 0 10 /**
 *
 */ 1 4 this 3 1775  
558 0 0 7 914 1638 0 0 0 0 
559 0 0 7 916 1780 0 0 10 /**
 *
 */ 1 4 copy 1 1778  
560 0 0 7 916 1780 0 0 10 /**
 *
 */ 2 12 half_extents 1 1669  2 up 1 1518  
561 0 0 7 916 1780 0 0 10 /**
 *
 */ 3 6 radius 1 1526  6 height 1 1526  2 up 1 1518  
562 0 0 6 917 1526 0 0 10 /**
 *
 */ 1 4 this 3 1778  
563 0 0 7 918 1655 0 0 10 /**
 *
 */ 1 4 this 3 1778  
564 0 0 7 919 1655 0 0 10 /**
 *
 */ 1 4 this 3 1778  
565 0 0 7 923 1638 0 0 0 0 
566 0 0 7 925 1781 1345 0 10 /**
 *
 */ 2 5 node0 1 1520  5 node1 1 1520  
567 0 0 7 926 1520 0 0 10 /**
 *
 */ 1 4 this 3 1782  
568 0 0 7 927 1520 0 0 10 /**
 *
 */ 1 4 this 3 1782  
569 0 0 4 928 1634 0 0 10 /**
 *
 */ 2 4 this 3 1781  7 collide 1 1534  
570 0 0 6 929 1534 0 0 10 /**
 *
 */ 1 4 this 3 1782  
571 0 0 7 933 1638 0 0 0 0 
572 0 0 7 936 1786 1347 0 10 /**
 *
 */ 1 4 copy 1 1784  
573 0 0 4 938 1634 0 0 10 /**
 *
 */ 2 4 this 3 1786  6 enable 1 1534  
574 0 0 4 939 1634 0 0 10 /**
 *
 */ 2 4 this 3 1786  5 limit 1 1526  
575 0 0 4 940 1634 0 0 10 /**
 *
 */ 2 4 this 3 1786  5 limit 1 1526  
576 0 0 4 941 1634 0 0 10 /**
 *
 */ 2 4 this 3 1786  8 velocity 1 1526  
577 0 0 4 942 1634 0 0 10 /**
 *
 */ 2 4 this 3 1786  5 force 1 1526  
578 0 0 4 943 1634 0 0 10 /**
 *
 */ 2 4 this 3 1786  5 force 1 1526  
579 0 0 4 944 1634 0 0 10 /**
 *
 */ 2 4 this 3 1786  7 damping 1 1526  
580 0 0 4 945 1634 0 0 10 /**
 *
 */ 2 4 this 3 1786  8 softness 1 1526  
581 0 0 4 946 1634 0 0 10 /**
 *
 */ 2 4 this 3 1786  6 bounce 1 1526  
582 0 0 4 947 1634 0 0 10 /**
 *
 */ 2 4 this 3 1786  3 cfm 1 1526  
583 0 0 4 948 1634 0 0 10 /**
 *
 */ 2 4 this 3 1786  3 cfm 1 1526  
584 0 0 4 949 1634 0 0 10 /**
 *
 */ 2 4 this 3 1786  3 erp 1 1526  
585 0 0 6 950 1534 0 0 10 /**
 *
 */ 1 4 this 3 1784  
586 0 0 6 951 1534 0 0 10 /**
 *
 */ 1 4 this 3 1784  
587 0 0 6 952 1528 0 0 98 /**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */ 1 4 this 3 1784  
588 0 0 6 953 1526 0 0 10 /**
 *
 */ 1 4 this 3 1784  
589 0 0 6 954 1526 0 0 10 /**
 *
 */ 1 4 this 3 1784  
590 0 0 6 955 1526 0 0 10 /**
 *
 */ 1 4 this 3 1784  
591 0 0 7 963 1789 1367 0 10 /**
 *
 */ 1 4 copy 1 1787  
592 0 0 4 965 1634 0 0 10 /**
 *
 */ 3 4 this 3 1789  4 axis 1 1528  6 enable 1 1534  
593 0 0 4 966 1634 0 0 10 /**
 *
 */ 2 4 this 3 1789  5 limit 1 1653  
594 0 0 4 967 1634 0 0 10 /**
 *
 */ 2 4 this 3 1789  5 limit 1 1653  
595 0 0 4 968 1634 0 0 10 /**
 *
 */ 2 4 this 3 1789  8 velocity 1 1653  
596 0 0 4 969 1634 0 0 10 /**
 *
 */ 2 4 this 3 1789  5 force 1 1653  
597 0 0 4 970 1634 0 0 10 /**
 *
 */ 2 4 this 3 1789  7 damping 1 1526  
598 0 0 4 971 1634 0 0 10 /**
 *
 */ 2 4 this 3 1789  8 softness 1 1526  
599 0 0 4 972 1634 0 0 10 /**
 *
 */ 2 4 this 3 1789  11 restitution 1 1526  
600 0 0 4 973 1634 0 0 10 /**
 *
 */ 2 4 this 3 1789  3 cfm 1 1653  
601 0 0 4 974 1634 0 0 10 /**
 *
 */ 2 4 this 3 1789  3 erp 1 1653  
602 0 0 4 975 1634 0 0 10 /**
 *
 */ 2 4 this 3 1789  3 cfm 1 1653  
603 0 0 6 976 1534 0 0 10 /**
 *
 */ 2 4 this 3 1787  4 axis 1 1528  
604 0 0 6 977 1534 0 0 10 /**
 *
 */ 2 4 this 3 1787  4 axis 1 1528  
605 0 0 6 978 1528 0 0 98 /**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */ 2 4 this 3 1787  4 axis 1 1528  
606 0 0 7 979 1629 0 0 10 /**
 *
 */ 1 4 this 3 1787  
607 0 0 7 980 1628 0 0 10 /**
 *
 */ 1 4 this 3 1787  
608 0 0 7 981 1629 0 0 10 /**
 *
 */ 1 4 this 3 1787  
609 0 0 7 986 1790 0 0 10 /**
 *
 */ 5 6 node_a 1 1686  6 node_b 1 1686  7 frame_a 1 1640  7 frame_b 1 1640  11 use_frame_a 1 1534  
610 0 0 7 986 1790 0 0 10 /**
 *
 */ 3 6 node_a 1 1686  7 frame_a 1 1640  11 use_frame_a 1 1534  
611 0 0 7 987 1629 0 0 11 // Geometry 2 4 this 3 1791  4 axis 1 1528  
612 0 0 6 988 1526 0 0 10 /**
 *
 */ 2 4 this 3 1791  4 axis 1 1528  
613 0 0 6 989 1526 0 0 10 /**
 *
 */ 2 4 this 3 1791  4 axis 1 1528  
614 0 0 4 990 1634 0 0 10 /**
 *
 */ 4 4 this 3 1790  4 axis 1 1528  3 low 1 1526  4 high 1 1526  
615 0 0 4 991 1634 0 0 10 /**
 *
 */ 4 4 this 3 1790  4 axis 1 1528  3 low 1 1526  4 high 1 1526  
616 0 0 7 992 1786 1347 0 9 // Motors 2 4 this 3 1790  4 axis 1 1528  
617 0 0 7 993 1789 1367 0 10 /**
 *
 */ 1 4 this 3 1790  
618 0 0 4 994 1634 0 0 9 // Frames 3 4 this 3 1790  4 ts_a 1 1640  4 ts_b 1 1640  
619 0 0 7 995 1640 0 0 10 /**
 *
 */ 1 4 this 3 1791  
620 0 0 7 996 1640 0 0 10 /**
 *
 */ 1 4 this 3 1791  
621 0 0 7 1000 1638 0 0 0 0 
622 0 0 7 1002 1795 0 0 10 /**
 *
 */ 1 4 copy 1 1793  
623 0 0 7 1002 1795 0 0 215 /**
 * @brief Creates a collision shape suited for terrains from a rectangular image.
 * @details Stores the image's brightness values in a vector Bullet can use, 
 *   while rotating it 90 degrees to the right.
 */ 3 5 image 1 1796  10 max_height 1 1526  2 up 1 1518  
624 0 0 7 1002 1795 0 0 311 /**
 * @brief Creates a collision shape suited for terrains from a rectangular texture.
 * @details Alternative constructor intended for use with ShaderTerrainMesh. This will
 *   do bilinear sampling at the corners of all texels. Also works with textures 
 *   that are non-power-of-two and/or rectangular.
 */ 3 3 tex 1 1799  10 max_height 1 1526  2 up 1 1518  
625 0 0 4 1003 1634 0 0 10 /**
 *
 */ 2 4 this 3 1795  4 flag 1 1534  
626 0 0 7 1004 1638 0 0 0 0 
627 0 0 7 1017 1801 1409 0 0 0 
628 0 0 7 1017 1801 1409 0 0 1 6 param0 0 1802  
629 0 0 7 1006 1807 0 0 19 // Collision shapes 2 2 np 1 1805  5 clear 1 1534  
630 0 0 7 1007 1809 0 0 17 // Internal names 0 
631 0 0 7 1008 1809 0 0 10 /**
 *
 */ 0 
632 0 0 7 1009 1812 0 0 19 // Geom vertex data 1 6 format 1 1812  
633 0 0 7 1010 1812 0 0 10 /**
 *
 */ 1 6 format 1 1812  
634 0 0 7 1011 1723 0 0 13 // Geom utils 3 4 node 1 1588  6 format 1 1812  9 two_sided 1 1534  
635 0 0 7 1012 1723 0 0 10 /**
 *
 */ 2 4 node 1 1588  6 format 1 1812  
636 0 0 4 1013 1634 0 0 10 /**
 *
 */ 3 4 geom 1 1723  4 resx 1 1528  4 resy 1 1528  
637 0 0 7 1020 1813 0 0 342 /**
 * Creates a hinge connecting node_a to node_b.  The pivot point is the point
 * at which the body is fixed to the constraint.  In other words: It specifies
 * where on each body the rotation axis should be.  This axis is specified
 * using axis_a and axis_b.  Remember, everything is specified in the bodies
 * own coordinate system!
 */ 7 6 node_a 1 1686  6 node_b 1 1686  7 pivot_a 1 1689  7 pivot_b 1 1689  6 axis_a 1 1669  6 axis_b 1 1669  11 use_frame_a 1 1534  
638 0 0 7 1020 1813 0 0 73 /**
 * Constructs a hinge constraint which connects two rigid bodies.
 */ 5 6 node_a 1 1686  6 node_b 1 1686  4 ts_a 1 1640  4 ts_b 1 1640  11 use_frame_a 1 1534  
639 0 0 7 1020 1813 0 0 182 /**
 * Creates a hinge constraint in the same way as the other constructor, but
 * uses the world as second body so that node_a is fixed to some point in mid-
 * air for example.
 */ 4 6 node_a 1 1686  7 pivot_a 1 1689  6 axis_a 1 1669  11 use_frame_a 1 1534  
640 0 0 7 1020 1813 0 0 106 /**
 * Creates a hinge constraint which connects one rigid body with some fixe
 * dpoint in the world.
 */ 3 6 node_a 1 1686  4 ts_a 1 1640  11 use_frame_a 1 1534  
641 0 0 6 1021 1526 0 0 66 /**
 * Returns the angle between node_a and node_b in degrees.
 */ 1 4 this 3 1813  
642 0 0 6 1022 1526 0 0 54 /**
 * Returns the lower angular limit in degrees.
 */ 1 4 this 3 1814  
643 0 0 6 1023 1526 0 0 54 /**
 * Returns the upper angular limit in degrees.
 */ 1 4 this 3 1814  
644 0 0 6 1024 1534 0 0 10 /**
 *
 */ 1 4 this 3 1814  
645 0 0 4 1025 1634 0 0 10 /**
 *
 */ 2 4 this 3 1813  5 value 1 1534  
646 0 0 4 1026 1634 0 0 65 /**
 * Sets the lower and upper rotational limits in degrees.
 */ 6 4 this 3 1813  3 low 1 1526  4 high 1 1526  8 softness 1 1526  4 bias 1 1526  10 relaxation 1 1526  
647 0 0 4 1027 1634 0 0 63 /**
 * Sets the hinge's rotation axis in world coordinates.
 */ 2 4 this 3 1813  4 axis 1 1669  
648 0 0 4 1028 1634 0 0 261 /**
 * Applies an impulse to the constraint so that the angle changes at
 * target_velocity where max_impulse is the maximum impulse that is used for
 * achieving the specified velocity.
 *
 * Note that the target_velocity is in radians/second, not degrees.
 */ 4 4 this 3 1813  6 enable 1 1534  15 target_velocity 1 1526  11 max_impulse 1 1526  
649 0 0 4 1029 1634 0 0 10 /**
 *
 */ 2 4 this 3 1813  6 enable 1 1534  
650 0 0 4 1030 1634 0 0 96 /**
 * Sets the maximum impulse used to achieve the velocity set in
 * enable_angular_motor.
 */ 2 4 this 3 1813  11 max_impulse 1 1526  
651 0 0 4 1031 1634 0 0 10 /**
 *
 */ 3 4 this 3 1813  4 quat 1 1694  2 dt 1 1526  
652 0 0 4 1031 1634 0 0 10 /**
 *
 */ 3 4 this 3 1813  12 target_angle 1 1526  2 dt 1 1526  
653 0 0 4 1032 1634 0 0 10 /**
 *
 */ 3 4 this 3 1813  4 ts_a 1 1640  4 ts_b 1 1640  
654 0 0 7 1033 1640 0 0 10 /**
 *
 */ 1 4 this 3 1814  
655 0 0 7 1034 1640 0 0 10 /**
 *
 */ 1 4 this 3 1814  
656 0 0 7 1041 1638 0 0 0 0 
657 0 0 7 1043 1818 0 0 10 /**
 *
 */ 1 4 copy 1 1816  
658 0 0 7 1043 1818 0 0 10 /**
 *
 */ 2 7 shape_a 1 1607  7 shape_b 1 1607  
659 0 0 4 1044 1634 0 0 10 /**
 *
 */ 2 4 this 3 1818  2 ts 1 1640  
660 0 0 4 1045 1634 0 0 10 /**
 *
 */ 2 4 this 3 1818  2 ts 1 1640  
661 0 0 7 1046 1640 0 0 10 /**
 *
 */ 1 4 this 3 1816  
662 0 0 7 1047 1640 0 0 10 /**
 *
 */ 1 4 this 3 1816  
663 0 0 7 1048 1607 0 0 10 /**
 *
 */ 1 4 this 3 1816  
664 0 0 7 1049 1607 0 0 10 /**
 *
 */ 1 4 this 3 1816  
665 0 0 7 1056 1638 0 0 0 0 
666 0 0 7 1058 1821 0 0 10 /**
 *
 */ 1 4 copy 1 1819  
667 0 0 7 1058 1821 0 0 10 /**
 *
 */ 2 6 points 1 1773  5 radii 1 1822  
668 0 0 7 1059 1821 0 0 0 2 4 this 3 1821  4 copy 1 1819  
669 0 0 6 1060 1528 0 0 10 /**
 *
 */ 1 4 this 3 1819  
670 0 0 7 1061 1628 0 0 10 /**
 *
 */ 2 4 this 3 1819  5 index 1 1528  
671 0 0 6 1062 1526 0 0 10 /**
 *
 */ 2 4 this 3 1819  5 index 1 1528  
672 0 0 7 1068 1638 0 0 0 0 
673 0 0 7 1070 1829 0 0 10 /**
 *
 */ 1 4 copy 1 1827  
674 0 0 7 1070 1829 0 0 57 /**
 * Creates a plane shape from a plane definition.
 */ 1 5 plane 1 1830  
675 0 0 7 1070 1829 0 0 10 /**
 *
 */ 2 6 normal 1 1669  8 constant 1 1526  
676 0 0 7 1071 1830 0 0 10 /**
 *
 */ 1 4 this 3 1827  
677 0 0 7 1072 1629 0 0 10 /**
 *
 */ 1 4 this 3 1827  
678 0 0 6 1073 1526 0 0 10 /**
 *
 */ 1 4 this 3 1827  
679 0 0 7 1074 1829 0 0 10 /**
 *
 */ 1 5 solid 1 1831  
680 0 0 7 1080 1638 0 0 0 0 
681 0 0 7 1082 1834 0 0 10 /**
 *
 */ 5 6 node_a 1 1686  6 node_b 1 1686  7 frame_a 1 1640  7 frame_b 1 1640  11 use_frame_a 1 1534  
682 0 0 7 1082 1834 0 0 10 /**
 *
 */ 3 6 node_a 1 1686  7 frame_a 1 1640  10 useFrame_a 1 1534  
683 0 0 6 1083 1526 0 0 10 /**
 *
 */ 1 4 this 3 1835  
684 0 0 6 1084 1526 0 0 10 /**
 *
 */ 1 4 this 3 1835  
685 0 0 6 1085 1526 0 0 9 // Limits 1 4 this 3 1835  
686 0 0 6 1086 1526 0 0 10 /**
 *
 */ 1 4 this 3 1835  
687 0 0 6 1087 1526 0 0 10 /**
 *
 */ 1 4 this 3 1835  
688 0 0 6 1088 1526 0 0 10 /**
 *
 */ 1 4 this 3 1835  
689 0 0 4 1089 1634 0 0 10 /**
 *
 */ 2 4 this 3 1834  5 value 1 1526  
690 0 0 4 1090 1634 0 0 10 /**
 *
 */ 2 4 this 3 1834  5 value 1 1526  
691 0 0 4 1091 1634 0 0 10 /**
 *
 */ 2 4 this 3 1834  5 value 1 1526  
692 0 0 4 1092 1634 0 0 10 /**
 *
 */ 2 4 this 3 1834  5 value 1 1526  
693 0 0 4 1093 1634 0 0 15 // Linear motor 2 4 this 3 1834  2 on 1 1534  
694 0 0 4 1094 1634 0 0 10 /**
 *
 */ 2 4 this 3 1834  15 target_velocity 1 1526  
695 0 0 4 1095 1634 0 0 10 /**
 *
 */ 2 4 this 3 1834  9 max_force 1 1526  
696 0 0 6 1096 1534 0 0 10 /**
 *
 */ 1 4 this 3 1835  
697 0 0 6 1097 1526 0 0 10 /**
 *
 */ 1 4 this 3 1835  
698 0 0 6 1098 1526 0 0 10 /**
 *
 */ 1 4 this 3 1835  
699 0 0 4 1099 1634 0 0 16 // Angular motor 2 4 this 3 1834  2 on 1 1534  
700 0 0 4 1100 1634 0 0 10 /**
 *
 */ 2 4 this 3 1834  15 target_velocity 1 1526  
701 0 0 4 1101 1634 0 0 10 /**
 *
 */ 2 4 this 3 1834  9 max_force 1 1526  
702 0 0 6 1102 1534 0 0 10 /**
 *
 */ 1 4 this 3 1835  
703 0 0 6 1103 1526 0 0 10 /**
 *
 */ 1 4 this 3 1835  
704 0 0 6 1104 1526 0 0 10 /**
 *
 */ 1 4 this 3 1835  
705 0 0 4 1105 1634 0 0 9 // Frames 3 4 this 3 1834  4 ts_a 1 1640  4 ts_b 1 1640  
706 0 0 7 1106 1640 0 0 10 /**
 *
 */ 1 4 this 3 1835  
707 0 0 7 1107 1640 0 0 10 /**
 *
 */ 1 4 this 3 1835  
708 0 0 7 1122 1638 0 0 0 0 
709 0 0 7 1129 1729 1478 0 10 /**
 *
 */ 0 
710 0 0 7 1129 1729 1478 0 0 1 6 param0 0 1837  
711 0 0 4 1131 1634 0 0 10 /**
 *
 */ 2 4 this 3 1729  4 goal 1 1526  
712 0 0 4 1132 1634 0 0 10 /**
 *
 */ 2 4 this 3 1729  9 maxtorque 1 1526  
713 0 0 4 1133 1634 0 0 10 /**
 *
 */ 2 4 this 3 1729  5 angle 1 1526  
714 0 0 4 1134 1634 0 0 10 /**
 *
 */ 2 4 this 3 1729  4 sign 1 1526  
715 0 0 6 1127 1839 0 0 0 1 4 this 3 1729  
716 0 0 7 1136 1588 0 0 10 /**
 *
 */ 1 4 this 3 1840  
717 0 0 7 1138 1638 0 0 0 0 
718 0 0 7 1140 1844 0 0 10 /**
 *
 */ 1 4 copy 1 1842  
719 0 0 7 1140 1844 0 0 10 /**
 *
 */ 1 6 radius 1 1526  
720 0 0 6 1141 1526 0 0 69 /**
 * Returns the radius that was used to construct this sphere.
 */ 1 4 this 3 1842  
721 0 0 7 1142 1844 0 0 10 /**
 *
 */ 1 5 solid 1 1845  
722 0 0 7 1144 1638 0 0 0 0 
723 0 0 7 1146 1848 0 0 10 /**
 *
 */ 4 6 node_a 1 1686  6 node_b 1 1686  7 pivot_a 1 1689  7 pivot_b 1 1689  
724 0 0 7 1146 1848 0 0 10 /**
 *
 */ 2 6 node_a 1 1686  7 pivot_a 1 1689  
725 0 0 4 1147 1634 0 0 9 // Pivots 2 4 this 3 1848  7 pivot_a 1 1689  
726 0 0 4 1148 1634 0 0 10 /**
 *
 */ 2 4 this 3 1848  7 pivot_b 1 1689  
727 0 0 7 1149 1628 0 0 10 /**
 *
 */ 1 4 this 3 1849  
728 0 0 7 1150 1628 0 0 10 /**
 *
 */ 1 4 this 3 1849  
729 0 0 7 1153 1638 0 0 0 0 
730 0 0 7 1155 1853 1498 0 10 /**
 *
 */ 1 8 timestep 1 1851  
731 0 0 6 1156 1526 0 0 10 /**
 *
 */ 1 4 this 3 1854  
732 0 0 7 1158 1638 0 0 0 0 
733 0 0 7 1161 1856 0 0 10 /**
 *
 */ 0 
734 0 0 4 1162 1634 0 0 347 /**
 * Adds a triangle with the indicated coordinates.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */ 5 4 this 3 1856  2 p0 1 1689  2 p1 1 1689  2 p2 1 1689  25 remove_duplicate_vertices 1 1534  
735 0 0 4 1163 1634 0 0 452 /**
 * Adds triangle information from an array of points and indices referring to
 * these points.  This is more efficient than adding triangles one at a time.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */ 4 4 this 3 1856  6 points 1 1773  7 indices 1 1857  25 remove_duplicate_vertices 1 1534  
736 0 0 4 1164 1634 0 0 461 /**
 * Adds the geometry from the indicated Geom from the triangle mesh.  This is
 * a one-time copy operation, and future updates to the Geom will not be
 * reflected.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */ 4 4 this 3 1856  4 geom 1 1730  25 remove_duplicate_vertices 1 1534  2 ts 1 1640  
737 0 0 4 1165 1634 0 0 254 /**
 * Sets the square of the distance at which vertices will be merged
 * together when adding geometry with remove_duplicate_vertices set to true.
 *
 * The default is 0, meaning vertices will only be merged if they have the
 * exact same position.
 */ 2 4 this 3 1856  8 distance 1 1526  
738 0 0 4 1166 1634 0 0 239 /**
 * Used to reserve memory in anticipation of the given amount of vertices and
 * indices being added to the triangle mesh.  This is useful if you are about
 * to call add_triangle() many times, to prevent unnecessary reallocations.
 */ 3 4 this 3 1856  9 num_verts 1 1528  11 num_indices 1 1528  
739 0 0 6 1167 1861 0 0 65 /**
 * Returns the number of triangles in this triangle mesh.
 */ 1 4 this 3 1859  
740 0 0 6 1168 1526 0 0 110 /**
 * Returns the value previously set with set_welding_distance(), or the
 * value of 0 if none was set.
 */ 1 4 this 3 1859  
741 0 0 4 1169 1634 0 0 10 /**
 *
 */ 2 4 this 3 1859  3 out 1 1863  
742 0 0 4 1170 1634 0 0 10 /**
 *
 */ 3 4 this 3 1859  3 out 1 1863  12 indent_level 1 1528  
743 0 0 7 1178 1638 0 0 0 0 
744 0 0 6 1172 1861 0 0 64 /**
 * Returns the number of vertices in this triangle mesh.
 */ 1 4 this 3 1859  
745 0 0 7 1180 1865 0 0 155 /**
 * The parameters 'compress' and 'bvh' are only used if 'dynamic' is set to
 * FALSE.
 * Assumes the lock(bullet global lock) is held by the caller
 */ 4 4 mesh 1 1856  7 dynamic 1 1534  8 compress 1 1534  3 bvh 1 1534  
746 0 0 7 1180 1865 0 0 10 /**
 *
 */ 1 4 copy 1 1866  
747 0 0 4 1181 1634 0 0 10 /**
 *
 */ 3 4 this 3 1865  8 aabb_min 1 1689  8 aabb_max 1 1689  
748 0 0 6 1182 1534 0 0 10 /**
 *
 */ 1 4 this 3 1866  
749 0 0 6 1183 1534 0 0 10 /**
 *
 */ 1 4 this 3 1866  
750 0 0 7 1186 1638 0 0 0 0 
751 0 0 6 2 1518 0 0 10 /**
 *
 */ 0 
752 0 0 6 3 1528 0 0 60 /**
 * Returns the version of the linked Bullet library.
 */ 0 
350
1518 12 BulletUpAxis 0 532481 12 BulletUpAxis 12 BulletUpAxis 0 0 0 0 0 0 0 0 0 0 3 4 X_up 4 X_up 0
0 4 Y_up 4 Y_up 0
1 4 Z_up 4 Z_up 0
2 0 0

1519 12 BulletRayHit 0 140289 12 BulletRayHit 12 BulletRayHit 0 0 0 1 762 763 6 1868 1869 1870 1871 1872 1873 7 755 756 757 758 759 760 761 0 0 0 0 0 10
/**
 *
 */

1520 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 1521 0 0 0 0 0 0 0 0 0 0

1521 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

1522 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1523 0 0 0 0 0 0 0 0 0 0

1523 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1524 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 1525 0 0 0 0 0 0 0 0 0 0

1525 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1526 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1527 0 0 0 0 0 0 0 0 0 0

1527 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1528 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1529 22 BulletAllHitsRayResult 0 140289 22 BulletAllHitsRayResult 22 BulletAllHitsRayResult 0 0 0 0 774 4 1874 1875 1876 1877 7 766 767 768 769 770 771 772 1 2167 0 1 3 1530 764 765 0 0 10
/**
 *
 */

1530 24 AllHitsRayResultCallback 0 263168 42 btCollisionWorld::AllHitsRayResultCallback 42 btCollisionWorld::AllHitsRayResultCallback 1531 0 0 0 0 0 0 0 0 0 0 0 0

1531 16 btCollisionWorld 0 2048 16 btCollisionWorld 16 btCollisionWorld 0 0 0 0 0 0 0 0 0 0 0 0 0

1532 11 BulletShape 0 75777 11 BulletShape 11 BulletShape 0 0 0 0 0 10 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 12 775 776 777 778 779 780 781 782 783 784 785 786 0 0 1 0 1533 0 0 0 0 10
/**
 *
 */

1533 27 TypedWritableReferenceCount 0 2048 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1534 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1535 12 char const * 0 8576 12 char const * 12 char const * 0 0 1536 0 0 0 0 0 0 0 0 0 0

1536 10 char const 0 8832 10 char const 10 char const 0 0 1537 0 0 0 0 0 0 0 0 0 0

1537 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1538 14 BoundingSphere 0 2048 14 BoundingSphere 14 BoundingSphere 0 0 0 0 0 0 0 0 0 0 0 0 147
/**
 * This defines a bounding sphere, consisting of a center and a radius.  It is
 * always a sphere, and never an ellipsoid or other quadric.
 */

1539 33 BulletBaseCharacterControllerNode 0 141313 33 BulletBaseCharacterControllerNode 33 BulletBaseCharacterControllerNode 0 0 0 0 788 0 1 787 0 0 1 0 1521 0 0 0 0 10
/**
 *
 */

1540 14 BulletBodyNode 0 75777 14 BulletBodyNode 14 BulletBodyNode 0 0 0 0 0 20 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 44 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 836 1 2168 0 1 0 1521 0 0 0 0 10
/**
 *
 */

1541 13 BulletShape * 0 8576 13 BulletShape * 13 BulletShape * 0 0 1532 0 0 0 0 0 0 0 0 0 0

1542 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1543 0 0 0 0 0 0 0 0 0 0

1543 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1544 32 ConstPointerTo< TransformState > 0 2048 32 ConstPointerTo< TransformState > 32 ConstPointerTo< TransformState > 0 0 0 0 0 0 0 0 0 0 0 0 0

1545 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 1546 0 0 0 0 0 0 0 0 0 0

1546 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1547 14 BulletBoxShape 0 75777 14 BulletBoxShape 14 BulletBoxShape 0 0 0 1 837 0 2 1908 1909 4 838 839 840 841 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1548 18 BulletCapsuleShape 0 75777 18 BulletCapsuleShape 18 BulletCapsuleShape 0 0 0 1 842 0 2 1910 1911 4 843 844 845 847 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1549 29 BulletCharacterControllerNode 0 75777 29 BulletCharacterControllerNode 29 BulletCharacterControllerNode 0 0 0 1 848 788 4 1912 1913 1914 1915 15 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 0 0 1 0 1539 0 0 0 0 10
/**
 *
 */

1550 25 BulletClosestHitRayResult 0 140289 25 BulletClosestHitRayResult 25 BulletClosestHitRayResult 0 0 0 1 876 877 8 1916 1917 1918 1919 1920 1921 1922 1923 10 866 867 868 869 870 871 872 873 874 875 0 0 1 3 1551 864 865 0 0 10
/**
 *
 */

1551 24 ClosestRayResultCallback 0 263168 42 btCollisionWorld::ClosestRayResultCallback 42 btCollisionWorld::ClosestRayResultCallback 1531 0 0 0 0 0 0 0 0 0 0 0 0

1552 27 BulletClosestHitSweepResult 0 140289 27 BulletClosestHitSweepResult 27 BulletClosestHitSweepResult 0 0 0 1 888 889 6 1924 1925 1926 1927 1928 1929 8 880 881 882 883 884 885 886 887 0 0 1 3 1553 878 879 0 0 10
/**
 *
 */

1553 27 ClosestConvexResultCallback 0 263168 45 btCollisionWorld::ClosestConvexResultCallback 45 btCollisionWorld::ClosestConvexResultCallback 1531 0 0 0 0 0 0 0 0 0 0 0 0

1554 15 BulletConeShape 0 75777 15 BulletConeShape 15 BulletConeShape 0 0 0 1 890 0 2 1930 1931 3 891 892 893 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1555 16 BulletConstraint 0 75777 16 BulletConstraint 16 BulletConstraint 0 0 0 0 0 6 1932 1949 1950 1951 1952 1953 13 894 895 896 897 898 899 900 901 902 903 904 905 943 0 0 1 0 1556 0 0 0 1 1557 10
/**
 *
 */

1556 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1557 15 ConstraintParam 0 794624 33 BulletConstraint::ConstraintParam 33 BulletConstraint::ConstraintParam 1555 0 0 0 0 0 0 0 0 0 4 6 CP_erp 24 BulletConstraint::CP_erp 0
1 11 CP_stop_erp 29 BulletConstraint::CP_stop_erp 0
2 6 CP_cfm 24 BulletConstraint::CP_cfm 0
3 11 CP_stop_cfm 29 BulletConstraint::CP_stop_cfm 0
4 0 0

1558 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 1559 0 0 0 0 0 0 0 0 0 0

1559 19 BulletRigidBodyNode 0 75777 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 1 906 0 16 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 36 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 0 0 1 0 1540 0 0 0 0 10
/**
 *
 */

1560 8 LMatrix3 0 2105344 8 LMatrix3 8 LMatrix3 0 0 1561 0 0 0 0 0 0 0 0 0 0

1561 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1562 25 BulletConeTwistConstraint 0 75777 25 BulletConeTwistConstraint 25 BulletConeTwistConstraint 0 0 0 1 944 0 3 1954 1955 1956 13 945 946 947 948 949 950 951 952 953 954 955 956 957 0 0 1 0 1555 0 0 0 0 10
/**
 *
 */

1563 19 BulletManifoldPoint 0 26625 19 BulletManifoldPoint 19 BulletManifoldPoint 0 0 0 0 958 23 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 35 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 0 0 0 0 0 10
/**
 *
 */

1564 25 BulletContactCallbackData 0 10241 25 BulletContactCallbackData 25 BulletContactCallbackData 0 0 0 1 994 0 7 1980 1981 1982 1983 1984 1985 1986 8 995 996 997 998 999 1000 1001 1002 0 0 1 0 1565 0 0 0 0 10
/**
 *
 */

1565 12 CallbackData 0 2048 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 348
/**
 * This is a generic data block that is passed along to a CallbackObject when
 * a callback is made.  It contains data specific to the particular callback
 * type in question.
 *
 * This is actually an abstract base class and contains no data.
 * Specializations of this class will contain the actual data relevant to each
 * callback type.
 */

1566 13 BulletContact 0 140289 13 BulletContact 13 BulletContact 0 0 0 0 1010 7 1987 1988 1989 1990 1991 1992 1993 7 1003 1004 1005 1006 1007 1008 1009 0 0 0 0 0 10
/**
 *
 */

1567 19 BulletContactResult 0 140289 19 BulletContactResult 19 BulletContactResult 0 0 0 0 1016 1 1994 2 1013 1014 1 2169 0 1 3 1568 1011 1012 0 0 10
/**
 *
 */

1568 21 ContactResultCallback 0 263168 39 btCollisionWorld::ContactResultCallback 39 btCollisionWorld::ContactResultCallback 1531 0 0 0 0 0 0 0 0 0 0 0 0

1569 15 BulletDebugNode 0 75777 15 BulletDebugNode 15 BulletDebugNode 0 0 0 1 1017 0 4 1995 1996 1997 1998 10 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 0 0 1 0 1521 0 0 0 0 10
/**
 *
 */

1570 15 BulletGhostNode 0 75777 15 BulletGhostNode 15 BulletGhostNode 0 0 0 1 1028 0 1 1999 3 1029 1030 1032 1 2170 0 1 0 1540 0 0 0 0 10
/**
 *
 */

1571 25 BulletSoftBodyNodeElement 0 26625 25 BulletSoftBodyNodeElement 25 BulletSoftBodyNodeElement 0 0 0 1 1041 1033 6 2000 2001 2002 2003 2004 2005 7 1034 1035 1036 1037 1038 1039 1040 0 0 0 0 0 10
/**
 *
 */

1572 18 BulletSoftBodyNode 0 75777 18 BulletSoftBodyNode 18 BulletSoftBodyNode 0 0 0 0 0 7 2006 2032 2038 2039 2040 2041 2045 45 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1165 2 2171 2172 0 1 0 1540 0 0 0 0 10
/**
 *
 */

1573 20 BulletSoftBodyConfig 0 26625 20 BulletSoftBodyConfig 20 BulletSoftBodyConfig 0 0 0 1 1140 1086 25 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 53 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 0 0 0 0 2 1574 1575 10
/**
 *
 */

1574 13 CollisionFlag 0 794624 35 BulletSoftBodyConfig::CollisionFlag 35 BulletSoftBodyConfig::CollisionFlag 1573 0 0 0 0 0 0 0 0 0 7 21 CF_rigid_vs_soft_mask 43 BulletSoftBodyConfig::CF_rigid_vs_soft_mask 34
// RVSmask: Rigid versus soft mask
15 17 CF_sdf_rigid_soft 39 BulletSoftBodyConfig::CF_sdf_rigid_soft 35
// SDF_RS:  SDF based rigid vs soft
1 21 CF_cluster_rigid_soft 43 BulletSoftBodyConfig::CF_cluster_rigid_soft 43
// CL_RS:   Cluster vs convex rigid vs soft
2 20 CF_soft_vs_soft_mask 42 BulletSoftBodyConfig::CF_soft_vs_soft_mask 33
// SVSmask: Soft versus soft mask
48 24 CF_vertex_face_soft_soft 46 BulletSoftBodyConfig::CF_vertex_face_soft_soft 48
// VF_SS:   Vertex vs face soft vs soft handling
16 20 CF_cluster_soft_soft 42 BulletSoftBodyConfig::CF_cluster_soft_soft 52
// CL_SS:   Cluster vs cluster soft vs soft handling
32 15 CF_cluster_self 37 BulletSoftBodyConfig::CF_cluster_self 44
// CL_SELF: Cluster soft body self collision
64 0 0

1575 9 AeroModel 0 794624 31 BulletSoftBodyConfig::AeroModel 31 BulletSoftBodyConfig::AeroModel 1573 0 0 0 0 0 0 0 0 0 5 15 AM_vertex_point 37 BulletSoftBodyConfig::AM_vertex_point 58
// V_Point:    Vertex normals are oriented toward velocity
0 19 AM_vertex_two_sided 41 BulletSoftBodyConfig::AM_vertex_two_sided 58
// V_TwoSided: Vertex normals are fliped to match velocity
1 19 AM_vertex_one_sided 41 BulletSoftBodyConfig::AM_vertex_one_sided 48
// V_OneSided: Vertex normals are taken as it is
2 17 AM_face_two_sided 39 BulletSoftBodyConfig::AM_face_two_sided 56
// F_TwoSided: Face normals are fliped to match velocity
3 17 AM_face_one_sided 39 BulletSoftBodyConfig::AM_face_one_sided 46
// F_OneSided: Face normals are taken as it is
4 0 0

1576 23 BulletSoftBodyWorldInfo 0 26625 23 BulletSoftBodyWorldInfo 23 BulletSoftBodyWorldInfo 0 0 0 1 1153 1141 5 2033 2034 2035 2036 2037 11 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 0 0 0 0 0 10
/**
 *
 */

1577 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

1578 22 BulletSoftBodyMaterial 0 26625 22 BulletSoftBodyMaterial 22 BulletSoftBodyMaterial 0 0 0 1 1162 1154 3 2042 2043 2044 7 1155 1156 1157 1158 1159 1160 1161 0 0 0 0 0 10
/**
 *
 */

1579 19 BulletVehicleTuning 0 10241 19 BulletVehicleTuning 19 BulletVehicleTuning 0 0 0 0 0 6 2046 2047 2048 2049 2050 2051 12 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 0 0 0 0 0 10
/**
 *
 */

1580 13 BulletVehicle 0 75777 13 BulletVehicle 13 BulletVehicle 0 0 0 1 1178 0 5 2052 2053 2054 2055 2089 15 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1254 1 2173 0 1 0 1556 0 0 0 0 257
/**
 * Simulates a raycast vehicle which casts a ray per wheel at the ground as a
 * cheap replacement for complex suspension simulation.  The suspension can be
 * tuned in various ways.  It is possible to add a (probably) arbitrary number
 * of wheels.
 */

1581 11 BulletWheel 0 26625 11 BulletWheel 11 BulletWheel 0 0 0 1 1252 1193 25 2056 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 48 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 0 0 0 0 0 145
/**
 * One wheel of a BulletVehicle.  Instances should not be created directly but
 * using the factory method BulletVehicle::create_wheel().
 */

1582 22 BulletWheelRaycastInfo 0 26625 22 BulletWheelRaycastInfo 22 BulletWheelRaycastInfo 0 0 0 1 1251 1242 8 2057 2058 2059 2060 2061 2062 2063 2064 8 1243 1244 1245 1246 1247 1248 1249 1250 0 0 0 0 0 10
/**
 *
 */

1583 11 BulletWorld 0 75777 11 BulletWorld 11 BulletWorld 0 0 0 1 1255 0 11 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2105 53 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 7 2174 2175 2176 2177 2178 2179 2180 0 1 0 1556 0 0 0 2 1584 1585 10
/**
 *
 */

1584 19 BroadphaseAlgorithm 0 794624 32 BulletWorld::BroadphaseAlgorithm 32 BulletWorld::BroadphaseAlgorithm 1583 0 0 0 0 0 0 0 0 0 2 18 BA_sweep_and_prune 31 BulletWorld::BA_sweep_and_prune 0
0 20 BA_dynamic_aabb_tree 33 BulletWorld::BA_dynamic_aabb_tree 0
1 0 16
// Configuration

1585 15 FilterAlgorithm 0 794624 28 BulletWorld::FilterAlgorithm 28 BulletWorld::FilterAlgorithm 1583 0 0 0 0 0 0 0 0 0 3 7 FA_mask 20 BulletWorld::FA_mask 0
0 14 FA_groups_mask 27 BulletWorld::FA_groups_mask 0
1 11 FA_callback 24 BulletWorld::FA_callback 0
2 0 0

1586 17 BulletDebugNode * 0 8576 17 BulletDebugNode * 17 BulletDebugNode * 0 0 1569 0 0 0 0 0 0 0 0 0 0

1587 17 BulletGhostNode * 0 8576 17 BulletGhostNode * 17 BulletGhostNode * 0 0 1570 0 0 0 0 0 0 0 0 0 0

1588 20 BulletSoftBodyNode * 0 8576 20 BulletSoftBodyNode * 20 BulletSoftBodyNode * 0 0 1572 0 0 0 0 0 0 0 0 0 0

1589 35 BulletBaseCharacterControllerNode * 0 8576 35 BulletBaseCharacterControllerNode * 35 BulletBaseCharacterControllerNode * 0 0 1539 0 0 0 0 0 0 0 0 0 0

1590 15 BulletVehicle * 0 8576 15 BulletVehicle * 15 BulletVehicle * 0 0 1580 0 0 0 0 0 0 0 0 0 0

1591 18 BulletConstraint * 0 8576 18 BulletConstraint * 18 BulletConstraint * 0 0 1555 0 0 0 0 0 0 0 0 0 0

1592 26 BulletPersistentManifold * 0 8576 26 BulletPersistentManifold * 26 BulletPersistentManifold * 0 0 1593 0 0 0 0 0 0 0 0 0 0

1593 24 BulletPersistentManifold 0 26625 24 BulletPersistentManifold 24 BulletPersistentManifold 0 0 0 1 1312 1303 5 2100 2101 2102 2103 2104 7 1304 1305 1306 1307 1308 1309 1310 1 2181 0 0 0 0 10
/**
 *
 */

1594 21 BulletManifoldPoint * 0 8576 21 BulletManifoldPoint * 21 BulletManifoldPoint * 0 0 1563 0 0 0 0 0 0 0 0 0 0

1595 21 BulletConvexHullShape 0 75777 21 BulletConvexHullShape 21 BulletConvexHullShape 0 0 0 1 1326 0 0 4 1327 1328 1329 1330 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1596 27 BulletConvexPointCloudShape 0 75777 27 BulletConvexPointCloudShape 27 BulletConvexPointCloudShape 0 0 0 1 1331 0 1 2106 2 1332 1333 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1597 19 BulletCylinderShape 0 75777 19 BulletCylinderShape 19 BulletCylinderShape 0 0 0 1 1334 0 3 2107 2108 2109 4 1335 1336 1337 1338 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1598 24 BulletFilterCallbackData 0 141313 24 BulletFilterCallbackData 24 BulletFilterCallbackData 0 0 0 1 1339 1345 3 2110 2111 2112 5 1340 1341 1342 1343 1344 0 0 1 0 1565 0 0 0 0 10
/**
 *
 */

1599 26 BulletRotationalLimitMotor 0 26625 26 BulletRotationalLimitMotor 26 BulletRotationalLimitMotor 0 0 0 1 1346 1347 6 2113 2114 2115 2116 2117 2118 18 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 0 0 0 0 0 55
/**
 * Rotation Limit structure for generic joints.
 */

1600 29 BulletTranslationalLimitMotor 0 26625 29 BulletTranslationalLimitMotor 29 BulletTranslationalLimitMotor 0 0 0 1 1366 1367 3 2119 2120 2121 17 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 0 0 0 0 0 55
/**
 * Rotation Limit structure for generic joints.
 */

1601 23 BulletGenericConstraint 0 75777 23 BulletGenericConstraint 23 BulletGenericConstraint 0 0 0 1 1385 0 3 2122 2123 2124 11 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 0 0 1 0 1555 0 0 0 0 10
/**
 *
 */

1602 22 BulletHeightfieldShape 0 75777 22 BulletHeightfieldShape 22 BulletHeightfieldShape 0 0 0 1 1397 0 0 2 1398 1399 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1603 12 BulletHelper 0 141313 12 BulletHelper 12 BulletHelper 0 0 0 1 1408 1409 2 2125 2126 8 1400 1401 1402 1403 1404 1405 1406 1407 0 0 0 0 0 10
/**
 *
 */

1604 25 PointerTo< InternalName > 0 2048 25 PointerTo< InternalName > 25 PointerTo< InternalName > 0 0 0 0 0 0 0 0 0 0 0 0 0

1605 21 BulletHingeConstraint 0 75777 21 BulletHingeConstraint 21 BulletHingeConstraint 0 0 0 1 1410 0 6 2127 2128 2129 2130 2131 2132 15 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 0 0 1 0 1555 0 0 0 0 158
/**
 * The hinge constraint lets two bodies rotate around a given axis while
 * adhering to specified limits.  It's motor can apply angular force to them.
 */

1606 23 BulletMinkowskiSumShape 0 75777 23 BulletMinkowskiSumShape 23 BulletMinkowskiSumShape 0 0 0 1 1426 0 4 2133 2134 2135 2136 7 1427 1428 1429 1430 1431 1432 1433 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1607 19 BulletShape const * 0 8576 19 BulletShape const * 19 BulletShape const * 0 0 1608 0 0 0 0 0 0 0 0 0 0

1608 17 BulletShape const 0 8832 17 BulletShape const 17 BulletShape const 0 0 1532 0 0 0 0 0 0 0 0 0 0

1609 22 BulletMultiSphereShape 0 75777 22 BulletMultiSphereShape 22 BulletMultiSphereShape 0 0 0 1 1434 0 3 2137 2138 2139 5 1435 1436 1437 1438 1441 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1610 16 BulletPlaneShape 0 75777 16 BulletPlaneShape 16 BulletPlaneShape 0 0 0 1 1442 0 3 2140 2141 2142 5 1443 1444 1445 1446 1447 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1611 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 1612 0 0 0 0 0 0 0 0 0 0

1612 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1613 22 BulletSliderConstraint 0 75777 22 BulletSliderConstraint 22 BulletSliderConstraint 0 0 0 1 1448 0 14 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 26 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 0 0 1 0 1555 0 0 0 0 10
/**
 *
 */

1614 21 BulletSoftBodyControl 0 26625 21 BulletSoftBodyControl 21 BulletSoftBodyControl 0 0 0 1 1477 1478 0 4 1479 1480 1481 1482 0 0 1 3 1615 1475 1476 0 0 10
/**
 *
 */

1615 8 IControl 0 263168 28 btSoftBody::AJoint::IControl 28 btSoftBody::AJoint::IControl 1616 0 0 0 0 0 0 0 0 0 0 0 0

1616 6 AJoint 0 263168 18 btSoftBody::AJoint 18 btSoftBody::AJoint 1617 0 0 0 0 0 0 0 0 0 0 0 0

1617 10 btSoftBody 0 2048 10 btSoftBody 10 btSoftBody 0 0 0 0 0 0 0 0 0 0 0 0 0

1618 19 BulletSoftBodyShape 0 75777 19 BulletSoftBodyShape 19 BulletSoftBodyShape 0 0 0 0 0 1 2157 2 1483 1484 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1619 17 BulletSphereShape 0 75777 17 BulletSphereShape 17 BulletSphereShape 0 0 0 1 1485 0 1 2158 3 1486 1487 1488 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1620 25 BulletSphericalConstraint 0 75777 25 BulletSphericalConstraint 25 BulletSphericalConstraint 0 0 0 1 1489 0 2 2159 2160 5 1490 1491 1492 1493 1494 0 0 1 0 1555 0 0 0 0 328
/**
 * A constraint between two rigid bodies, each with a pivot point.  The pivot
 * points are described in the body's local space.  The constraint limits
 * movement of the two rigid bodies in such a way that the pivot points match
 * in global space.  The spherical constraint can be seen as a "ball and
 * socket" joint.
 */

1621 22 BulletTickCallbackData 0 141313 22 BulletTickCallbackData 22 BulletTickCallbackData 0 0 0 1 1495 1498 1 2161 2 1496 1497 0 0 1 0 1565 0 0 0 0 10
/**
 *
 */

1622 18 BulletTriangleMesh 0 75777 18 BulletTriangleMesh 18 BulletTriangleMesh 0 0 0 1 1499 0 3 2162 2163 2164 10 1500 1501 1502 1503 1504 1505 1506 1507 1508 1512 0 0 1 0 1533 0 0 0 0 10
/**
 *
 */

1623 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1624 23 BulletTriangleMeshShape 0 75777 23 BulletTriangleMeshShape 23 BulletTriangleMeshShape 0 0 0 1 1513 0 2 2165 2166 4 1514 1515 1516 1517 0 0 1 0 1532 0 0 0 0 10
/**
 *
 */

1625 14 BulletRayHit * 0 8576 14 BulletRayHit * 14 BulletRayHit * 0 0 1519 0 0 0 0 0 0 0 0 0 0

1626 20 BulletRayHit const * 0 8576 20 BulletRayHit const * 20 BulletRayHit const * 0 0 1627 0 0 0 0 0 0 0 0 0 0

1627 18 BulletRayHit const 0 8832 18 BulletRayHit const 18 BulletRayHit const 0 0 1519 0 0 0 0 0 0 0 0 0 0

1628 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1522 0 0 0 0 0 0 0 0 0 0

1629 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 1524 0 0 0 0 0 0 0 0 0 0

1630 24 BulletAllHitsRayResult * 0 8576 24 BulletAllHitsRayResult * 24 BulletAllHitsRayResult * 0 0 1529 0 0 0 0 0 0 0 0 0 0

1631 30 BulletAllHitsRayResult const * 0 8576 30 BulletAllHitsRayResult const * 30 BulletAllHitsRayResult const * 0 0 1632 0 0 0 0 0 0 0 0 0 0

1632 28 BulletAllHitsRayResult const 0 8832 28 BulletAllHitsRayResult const 28 BulletAllHitsRayResult const 0 0 1529 0 0 0 0 0 0 0 0 0 0

1633 26 AllHitsRayResultCallback * 0 8576 44 btCollisionWorld::AllHitsRayResultCallback * 44 btCollisionWorld::AllHitsRayResultCallback * 0 0 1530 0 0 0 0 0 0 0 0 0 0

1634 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1635 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1636 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1538 0 0 0 0 0 0 0 0 0 0

1637 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1638 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1637 0 0 0 0 0 0 0 0 0 0

1639 16 BulletBodyNode * 0 8576 16 BulletBodyNode * 16 BulletBodyNode * 0 0 1540 0 0 0 0 0 0 0 0 0 0

1640 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 1641 0 0 0 0 0 0 0 0 0 0

1641 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 1642 0 0 0 0 0 0 0 0 0 0

1642 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

1643 22 BulletBodyNode const * 0 8576 22 BulletBodyNode const * 22 BulletBodyNode const * 0 0 1644 0 0 0 0 0 0 0 0 0 0

1644 20 BulletBodyNode const 0 8832 20 BulletBodyNode const 20 BulletBodyNode const 0 0 1540 0 0 0 0 0 0 0 0 0 0

1645 10 LMatrix4 * 0 8576 10 LMatrix4 * 10 LMatrix4 * 0 0 1542 0 0 0 0 0 0 0 0 0 0

1646 15 CollisionNode * 0 8576 15 CollisionNode * 15 CollisionNode * 0 0 1647 0 0 0 0 0 0 0 0 0 0

1647 13 CollisionNode 0 2048 13 CollisionNode 13 CollisionNode 0 0 0 0 0 0 0 0 0 0 0 0 261
/**
 * A node in the scene graph that can hold any number of CollisionSolids.
 * This may either represent a bit of static geometry in the scene that things
 * will collide with, or an animated object twirling around in the world and
 * running into things.
 */

1648 13 CollideMask * 0 8576 13 CollideMask * 13 CollideMask * 0 0 1649 0 0 0 0 0 0 0 0 0 0

1649 11 CollideMask 0 2105344 11 CollideMask 11 CollideMask 0 0 1650 0 0 0 0 0 0 0 0 0 0

1650 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 1651 0 0 0 0 0 0 0 0 0 0

1651 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1652 10 bool const 0 8832 10 bool const 10 bool const 0 0 1534 0 0 0 0 0 0 0 0 0 0

1653 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 1654 0 0 0 0 0 0 0 0 0 0

1654 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 1545 0 0 0 0 0 0 0 0 0 0

1655 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 1545 0 0 0 0 0 0 0 0 0 0

1656 22 BulletBoxShape const * 0 8576 22 BulletBoxShape const * 22 BulletBoxShape const * 0 0 1657 0 0 0 0 0 0 0 0 0 0

1657 20 BulletBoxShape const 0 8832 20 BulletBoxShape const 20 BulletBoxShape const 0 0 1547 0 0 0 0 0 0 0 0 0 0

1658 16 BulletBoxShape * 0 8576 16 BulletBoxShape * 16 BulletBoxShape * 0 0 1547 0 0 0 0 0 0 0 0 0 0

1659 20 CollisionBox const * 0 8576 20 CollisionBox const * 20 CollisionBox const * 0 0 1660 0 0 0 0 0 0 0 0 0 0

1660 18 CollisionBox const 0 8832 18 CollisionBox const 18 CollisionBox const 0 0 1661 0 0 0 0 0 0 0 0 0 0

1661 12 CollisionBox 0 2048 12 CollisionBox 12 CollisionBox 0 0 0 0 0 0 0 0 0 0 0 0 47
/**
 * A cuboid collision volume or object.
 */

1662 26 BulletCapsuleShape const * 0 8576 26 BulletCapsuleShape const * 26 BulletCapsuleShape const * 0 0 1663 0 0 0 0 0 0 0 0 0 0

1663 24 BulletCapsuleShape const 0 8832 24 BulletCapsuleShape const 24 BulletCapsuleShape const 0 0 1548 0 0 0 0 0 0 0 0 0 0

1664 20 BulletCapsuleShape * 0 8576 20 BulletCapsuleShape * 20 BulletCapsuleShape * 0 0 1548 0 0 0 0 0 0 0 0 0 0

1665 24 CollisionCapsule const * 0 8576 24 CollisionCapsule const * 24 CollisionCapsule const * 0 0 1666 0 0 0 0 0 0 0 0 0 0

1666 22 CollisionCapsule const 0 8832 22 CollisionCapsule const 22 CollisionCapsule const 0 0 1667 0 0 0 0 0 0 0 0 0 0

1667 16 CollisionCapsule 0 2048 16 CollisionCapsule 16 CollisionCapsule 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * This implements a solid consisting of a cylinder with hemispherical endcaps,
 * also known as a capsule or a spherocylinder.
 *
 * This shape was previously erroneously called CollisionTube.
 */

1668 31 BulletCharacterControllerNode * 0 8576 31 BulletCharacterControllerNode * 31 BulletCharacterControllerNode * 0 0 1549 0 0 0 0 0 0 0 0 0 0

1669 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 1670 0 0 0 0 0 0 0 0 0 0

1670 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 1524 0 0 0 0 0 0 0 0 0 0

1671 37 BulletCharacterControllerNode const * 0 8576 37 BulletCharacterControllerNode const * 37 BulletCharacterControllerNode const * 0 0 1672 0 0 0 0 0 0 0 0 0 0

1672 35 BulletCharacterControllerNode const 0 8832 35 BulletCharacterControllerNode const 35 BulletCharacterControllerNode const 0 0 1549 0 0 0 0 0 0 0 0 0 0

1673 33 BulletClosestHitRayResult const * 0 8576 33 BulletClosestHitRayResult const * 33 BulletClosestHitRayResult const * 0 0 1674 0 0 0 0 0 0 0 0 0 0

1674 31 BulletClosestHitRayResult const 0 8832 31 BulletClosestHitRayResult const 31 BulletClosestHitRayResult const 0 0 1550 0 0 0 0 0 0 0 0 0 0

1675 27 BulletClosestHitRayResult * 0 8576 27 BulletClosestHitRayResult * 27 BulletClosestHitRayResult * 0 0 1550 0 0 0 0 0 0 0 0 0 0

1676 26 ClosestRayResultCallback * 0 8576 44 btCollisionWorld::ClosestRayResultCallback * 44 btCollisionWorld::ClosestRayResultCallback * 0 0 1551 0 0 0 0 0 0 0 0 0 0

1677 35 BulletClosestHitSweepResult const * 0 8576 35 BulletClosestHitSweepResult const * 35 BulletClosestHitSweepResult const * 0 0 1678 0 0 0 0 0 0 0 0 0 0

1678 33 BulletClosestHitSweepResult const 0 8832 33 BulletClosestHitSweepResult const 33 BulletClosestHitSweepResult const 0 0 1552 0 0 0 0 0 0 0 0 0 0

1679 29 BulletClosestHitSweepResult * 0 8576 29 BulletClosestHitSweepResult * 29 BulletClosestHitSweepResult * 0 0 1552 0 0 0 0 0 0 0 0 0 0

1680 29 ClosestConvexResultCallback * 0 8576 47 btCollisionWorld::ClosestConvexResultCallback * 47 btCollisionWorld::ClosestConvexResultCallback * 0 0 1553 0 0 0 0 0 0 0 0 0 0

1681 23 BulletConeShape const * 0 8576 23 BulletConeShape const * 23 BulletConeShape const * 0 0 1682 0 0 0 0 0 0 0 0 0 0

1682 21 BulletConeShape const 0 8832 21 BulletConeShape const 21 BulletConeShape const 0 0 1554 0 0 0 0 0 0 0 0 0 0

1683 17 BulletConeShape * 0 8576 17 BulletConeShape * 17 BulletConeShape * 0 0 1554 0 0 0 0 0 0 0 0 0 0

1684 24 BulletConstraint const * 0 8576 24 BulletConstraint const * 24 BulletConstraint const * 0 0 1685 0 0 0 0 0 0 0 0 0 0

1685 22 BulletConstraint const 0 8832 22 BulletConstraint const 22 BulletConstraint const 0 0 1555 0 0 0 0 0 0 0 0 0 0

1686 27 BulletRigidBodyNode const * 0 8576 27 BulletRigidBodyNode const * 27 BulletRigidBodyNode const * 0 0 1687 0 0 0 0 0 0 0 0 0 0

1687 25 BulletRigidBodyNode const 0 8832 25 BulletRigidBodyNode const 25 BulletRigidBodyNode const 0 0 1559 0 0 0 0 0 0 0 0 0 0

1688 10 LMatrix3 * 0 8576 10 LMatrix3 * 10 LMatrix3 * 0 0 1560 0 0 0 0 0 0 0 0 0 0

1689 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1690 0 0 0 0 0 0 0 0 0 0

1690 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1522 0 0 0 0 0 0 0 0 0 0

1691 27 BulletConeTwistConstraint * 0 8576 27 BulletConeTwistConstraint * 27 BulletConeTwistConstraint * 0 0 1562 0 0 0 0 0 0 0 0 0 0

1692 33 BulletConeTwistConstraint const * 0 8576 33 BulletConeTwistConstraint const * 33 BulletConeTwistConstraint const * 0 0 1693 0 0 0 0 0 0 0 0 0 0

1693 31 BulletConeTwistConstraint const 0 8832 31 BulletConeTwistConstraint const 31 BulletConeTwistConstraint const 0 0 1562 0 0 0 0 0 0 0 0 0 0

1694 19 LQuaternion const * 0 8576 19 LQuaternion const * 19 LQuaternion const * 0 0 1695 0 0 0 0 0 0 0 0 0 0

1695 17 LQuaternion const 0 8832 17 LQuaternion const 17 LQuaternion const 0 0 1696 0 0 0 0 0 0 0 0 0 0

1696 11 LQuaternion 0 2105344 11 LQuaternion 11 LQuaternion 0 0 1697 0 0 0 0 0 0 0 0 0 0

1697 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1698 27 BulletManifoldPoint const * 0 8576 27 BulletManifoldPoint const * 27 BulletManifoldPoint const * 0 0 1699 0 0 0 0 0 0 0 0 0 0

1699 25 BulletManifoldPoint const 0 8832 25 BulletManifoldPoint const 25 BulletManifoldPoint const 0 0 1563 0 0 0 0 0 0 0 0 0 0

1700 27 BulletContactCallbackData * 0 8576 27 BulletContactCallbackData * 27 BulletContactCallbackData * 0 0 1564 0 0 0 0 0 0 0 0 0 0

1701 33 BulletContactCallbackData const * 0 8576 33 BulletContactCallbackData const * 33 BulletContactCallbackData const * 0 0 1702 0 0 0 0 0 0 0 0 0 0

1702 31 BulletContactCallbackData const 0 8832 31 BulletContactCallbackData const 31 BulletContactCallbackData const 0 0 1564 0 0 0 0 0 0 0 0 0 0

1703 15 BulletContact * 0 8576 15 BulletContact * 15 BulletContact * 0 0 1566 0 0 0 0 0 0 0 0 0 0

1704 21 BulletContact const * 0 8576 21 BulletContact const * 21 BulletContact const * 0 0 1705 0 0 0 0 0 0 0 0 0 0

1705 19 BulletContact const 0 8832 19 BulletContact const 19 BulletContact const 0 0 1566 0 0 0 0 0 0 0 0 0 0

1706 27 BulletContactResult const * 0 8576 27 BulletContactResult const * 27 BulletContactResult const * 0 0 1707 0 0 0 0 0 0 0 0 0 0

1707 25 BulletContactResult const 0 8832 25 BulletContactResult const 25 BulletContactResult const 0 0 1567 0 0 0 0 0 0 0 0 0 0

1708 21 BulletContactResult * 0 8576 21 BulletContactResult * 21 BulletContactResult * 0 0 1567 0 0 0 0 0 0 0 0 0 0

1709 23 ContactResultCallback * 0 8576 41 btCollisionWorld::ContactResultCallback * 41 btCollisionWorld::ContactResultCallback * 0 0 1568 0 0 0 0 0 0 0 0 0 0

1710 23 BulletDebugNode const * 0 8576 23 BulletDebugNode const * 23 BulletDebugNode const * 0 0 1711 0 0 0 0 0 0 0 0 0 0

1711 21 BulletDebugNode const 0 8832 21 BulletDebugNode const 21 BulletDebugNode const 0 0 1569 0 0 0 0 0 0 0 0 0 0

1712 23 BulletGhostNode const * 0 8576 23 BulletGhostNode const * 23 BulletGhostNode const * 0 0 1713 0 0 0 0 0 0 0 0 0 0

1713 21 BulletGhostNode const 0 8832 21 BulletGhostNode const 21 BulletGhostNode const 0 0 1570 0 0 0 0 0 0 0 0 0 0

1714 33 BulletSoftBodyNodeElement const * 0 8576 33 BulletSoftBodyNodeElement const * 33 BulletSoftBodyNodeElement const * 0 0 1715 0 0 0 0 0 0 0 0 0 0

1715 31 BulletSoftBodyNodeElement const 0 8832 31 BulletSoftBodyNodeElement const 31 BulletSoftBodyNodeElement const 0 0 1571 0 0 0 0 0 0 0 0 0 0

1716 27 BulletSoftBodyNodeElement * 0 8576 27 BulletSoftBodyNodeElement * 27 BulletSoftBodyNodeElement * 0 0 1571 0 0 0 0 0 0 0 0 0 0

1717 22 BulletSoftBodyConfig * 0 8576 22 BulletSoftBodyConfig * 22 BulletSoftBodyConfig * 0 0 1573 0 0 0 0 0 0 0 0 0 0

1718 25 BulletSoftBodyWorldInfo * 0 8576 25 BulletSoftBodyWorldInfo * 25 BulletSoftBodyWorldInfo * 0 0 1576 0 0 0 0 0 0 0 0 0 0

1719 24 BulletSoftBodyMaterial * 0 8576 24 BulletSoftBodyMaterial * 24 BulletSoftBodyMaterial * 0 0 1578 0 0 0 0 0 0 0 0 0 0

1720 26 BulletSoftBodyNode const * 0 8576 26 BulletSoftBodyNode const * 26 BulletSoftBodyNode const * 0 0 1721 0 0 0 0 0 0 0 0 0 0

1721 24 BulletSoftBodyNode const 0 8832 24 BulletSoftBodyNode const 24 BulletSoftBodyNode const 0 0 1572 0 0 0 0 0 0 0 0 0 0

1722 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1577 0 0 0 0 0 0 0 0 0 0

1723 6 Geom * 0 8576 6 Geom * 6 Geom * 0 0 1724 0 0 0 0 0 0 0 0 0 0

1724 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

1725 21 NurbsCurveEvaluator * 0 8576 21 NurbsCurveEvaluator * 21 NurbsCurveEvaluator * 0 0 1726 0 0 0 0 0 0 0 0 0 0

1726 19 NurbsCurveEvaluator 0 2048 19 NurbsCurveEvaluator 19 NurbsCurveEvaluator 0 0 0 0 0 0 0 0 0 0 0 0 492
/**
 * This class is an abstraction for evaluating NURBS curves.  It accepts an
 * array of vertices, each of which may be in a different coordinate space (as
 * defined by a NodePath), as well as an optional knot vector.
 *
 * This is not related to NurbsCurve, CubicCurveseg or any of the
 * ParametricCurve-derived objects in this module.  It is a completely
 * parallel implementation of NURBS curves, and will probably eventually
 * replace the whole ParametricCurve class hierarchy.
 */

1727 23 NurbsSurfaceEvaluator * 0 8576 23 NurbsSurfaceEvaluator * 23 NurbsSurfaceEvaluator * 0 0 1728 0 0 0 0 0 0 0 0 0 0

1728 21 NurbsSurfaceEvaluator 0 2048 21 NurbsSurfaceEvaluator 21 NurbsSurfaceEvaluator 0 0 0 0 0 0 0 0 0 0 0 0 227
/**
 * This class is an abstraction for evaluating NURBS surfaces.  It accepts an
 * array of vertices, each of which may be in a different coordinate space (as
 * defined by a NodePath), as well as an optional knot vector.
 */

1729 23 BulletSoftBodyControl * 0 8576 23 BulletSoftBodyControl * 23 BulletSoftBodyControl * 0 0 1614 0 0 0 0 0 0 0 0 0 0

1730 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 1731 0 0 0 0 0 0 0 0 0 0

1731 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 1724 0 0 0 0 0 0 0 0 0 0

1732 15 PTA_LVecBase3 * 0 8576 15 PTA_LVecBase3 * 15 PTA_LVecBase3 * 0 0 1733 0 0 0 0 0 0 0 0 0 0

1733 13 PTA_LVecBase3 0 2105344 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1734 0 0 0 0 0 0 0 0 0 0

1734 14 PTA_LVecBase3f 0 2105344 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1735 0 0 0 0 0 0 0 0 0 0

1735 28 PointerToArray< LVecBase3f > 0 2048 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

1736 9 PTA_int * 0 8576 9 PTA_int * 9 PTA_int * 0 0 1737 0 0 0 0 0 0 0 0 0 0

1737 7 PTA_int 0 2105344 7 PTA_int 7 PTA_int 0 0 1738 0 0 0 0 0 0 0 0 0 0

1738 21 PointerToArray< int > 0 2048 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

1739 28 BulletSoftBodyConfig const * 0 8576 28 BulletSoftBodyConfig const * 28 BulletSoftBodyConfig const * 0 0 1740 0 0 0 0 0 0 0 0 0 0

1740 26 BulletSoftBodyConfig const 0 8832 26 BulletSoftBodyConfig const 26 BulletSoftBodyConfig const 0 0 1573 0 0 0 0 0 0 0 0 0 0

1741 31 BulletSoftBodyWorldInfo const * 0 8576 31 BulletSoftBodyWorldInfo const * 31 BulletSoftBodyWorldInfo const * 0 0 1742 0 0 0 0 0 0 0 0 0 0

1742 29 BulletSoftBodyWorldInfo const 0 8832 29 BulletSoftBodyWorldInfo const 29 BulletSoftBodyWorldInfo const 0 0 1576 0 0 0 0 0 0 0 0 0 0

1743 30 BulletSoftBodyMaterial const * 0 8576 30 BulletSoftBodyMaterial const * 30 BulletSoftBodyMaterial const * 0 0 1744 0 0 0 0 0 0 0 0 0 0

1744 28 BulletSoftBodyMaterial const 0 8832 28 BulletSoftBodyMaterial const 28 BulletSoftBodyMaterial const 0 0 1578 0 0 0 0 0 0 0 0 0 0

1745 21 BulletVehicleTuning * 0 8576 21 BulletVehicleTuning * 21 BulletVehicleTuning * 0 0 1579 0 0 0 0 0 0 0 0 0 0

1746 27 BulletVehicleTuning const * 0 8576 27 BulletVehicleTuning const * 27 BulletVehicleTuning const * 0 0 1747 0 0 0 0 0 0 0 0 0 0

1747 25 BulletVehicleTuning const 0 8832 25 BulletVehicleTuning const 25 BulletVehicleTuning const 0 0 1579 0 0 0 0 0 0 0 0 0 0

1748 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 1583 0 0 0 0 0 0 0 0 0 0

1749 21 BulletVehicle const * 0 8576 21 BulletVehicle const * 21 BulletVehicle const * 0 0 1750 0 0 0 0 0 0 0 0 0 0

1750 19 BulletVehicle const 0 8832 19 BulletVehicle const 19 BulletVehicle const 0 0 1580 0 0 0 0 0 0 0 0 0 0

1751 13 BulletWheel * 0 8576 13 BulletWheel * 13 BulletWheel * 0 0 1581 0 0 0 0 0 0 0 0 0 0

1752 19 BulletWheel const * 0 8576 19 BulletWheel const * 19 BulletWheel const * 0 0 1753 0 0 0 0 0 0 0 0 0 0

1753 17 BulletWheel const 0 8832 17 BulletWheel const 17 BulletWheel const 0 0 1581 0 0 0 0 0 0 0 0 0 0

1754 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1755 0 0 0 0 0 0 0 0 0 0

1755 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1542 0 0 0 0 0 0 0 0 0 0

1756 24 BulletWheelRaycastInfo * 0 8576 24 BulletWheelRaycastInfo * 24 BulletWheelRaycastInfo * 0 0 1582 0 0 0 0 0 0 0 0 0 0

1757 30 BulletWheelRaycastInfo const * 0 8576 30 BulletWheelRaycastInfo const * 30 BulletWheelRaycastInfo const * 0 0 1758 0 0 0 0 0 0 0 0 0 0

1758 28 BulletWheelRaycastInfo const 0 8832 28 BulletWheelRaycastInfo const 28 BulletWheelRaycastInfo const 0 0 1582 0 0 0 0 0 0 0 0 0 0

1759 19 BulletWorld const * 0 8576 19 BulletWorld const * 19 BulletWorld const * 0 0 1760 0 0 0 0 0 0 0 0 0 0

1760 17 BulletWorld const 0 8832 17 BulletWorld const 17 BulletWorld const 0 0 1583 0 0 0 0 0 0 0 0 0 0

1761 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 1762 0 0 0 0 0 0 0 0 0 0

1762 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1763 19 CollideMask const * 0 8576 19 CollideMask const * 19 CollideMask const * 0 0 1764 0 0 0 0 0 0 0 0 0 0

1764 17 CollideMask const 0 8832 17 CollideMask const 17 CollideMask const 0 0 1649 0 0 0 0 0 0 0 0 0 0

1765 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1766 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1767 0 0 0 0 0 0 0 0 0 0

1767 14 CallbackObject 0 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 276
/**
 * This is a generic object that can be assigned to a callback at various
 * points in the rendering process.  This is actually a base class for a
 * handful of specialized callback object types.  You can also subclass it
 * yourself to make your own callback handler.
 */

1768 32 BulletPersistentManifold const * 0 8576 32 BulletPersistentManifold const * 32 BulletPersistentManifold const * 0 0 1769 0 0 0 0 0 0 0 0 0 0

1769 30 BulletPersistentManifold const 0 8832 30 BulletPersistentManifold const 30 BulletPersistentManifold const 0 0 1593 0 0 0 0 0 0 0 0 0 0

1770 23 BulletConvexHullShape * 0 8576 23 BulletConvexHullShape * 23 BulletConvexHullShape * 0 0 1595 0 0 0 0 0 0 0 0 0 0

1771 29 BulletConvexHullShape const * 0 8576 29 BulletConvexHullShape const * 29 BulletConvexHullShape const * 0 0 1772 0 0 0 0 0 0 0 0 0 0

1772 27 BulletConvexHullShape const 0 8832 27 BulletConvexHullShape const 27 BulletConvexHullShape const 0 0 1595 0 0 0 0 0 0 0 0 0 0

1773 21 PTA_LVecBase3 const * 0 8576 21 PTA_LVecBase3 const * 21 PTA_LVecBase3 const * 0 0 1774 0 0 0 0 0 0 0 0 0 0

1774 19 PTA_LVecBase3 const 0 8832 19 PTA_LVecBase3 const 19 PTA_LVecBase3 const 0 0 1733 0 0 0 0 0 0 0 0 0 0

1775 35 BulletConvexPointCloudShape const * 0 8576 35 BulletConvexPointCloudShape const * 35 BulletConvexPointCloudShape const * 0 0 1776 0 0 0 0 0 0 0 0 0 0

1776 33 BulletConvexPointCloudShape const 0 8832 33 BulletConvexPointCloudShape const 33 BulletConvexPointCloudShape const 0 0 1596 0 0 0 0 0 0 0 0 0 0

1777 29 BulletConvexPointCloudShape * 0 8576 29 BulletConvexPointCloudShape * 29 BulletConvexPointCloudShape * 0 0 1596 0 0 0 0 0 0 0 0 0 0

1778 27 BulletCylinderShape const * 0 8576 27 BulletCylinderShape const * 27 BulletCylinderShape const * 0 0 1779 0 0 0 0 0 0 0 0 0 0

1779 25 BulletCylinderShape const 0 8832 25 BulletCylinderShape const 25 BulletCylinderShape const 0 0 1597 0 0 0 0 0 0 0 0 0 0

1780 21 BulletCylinderShape * 0 8576 21 BulletCylinderShape * 21 BulletCylinderShape * 0 0 1597 0 0 0 0 0 0 0 0 0 0

1781 26 BulletFilterCallbackData * 0 8576 26 BulletFilterCallbackData * 26 BulletFilterCallbackData * 0 0 1598 0 0 0 0 0 0 0 0 0 0

1782 32 BulletFilterCallbackData const * 0 8576 32 BulletFilterCallbackData const * 32 BulletFilterCallbackData const * 0 0 1783 0 0 0 0 0 0 0 0 0 0

1783 30 BulletFilterCallbackData const 0 8832 30 BulletFilterCallbackData const 30 BulletFilterCallbackData const 0 0 1598 0 0 0 0 0 0 0 0 0 0

1784 34 BulletRotationalLimitMotor const * 0 8576 34 BulletRotationalLimitMotor const * 34 BulletRotationalLimitMotor const * 0 0 1785 0 0 0 0 0 0 0 0 0 0

1785 32 BulletRotationalLimitMotor const 0 8832 32 BulletRotationalLimitMotor const 32 BulletRotationalLimitMotor const 0 0 1599 0 0 0 0 0 0 0 0 0 0

1786 28 BulletRotationalLimitMotor * 0 8576 28 BulletRotationalLimitMotor * 28 BulletRotationalLimitMotor * 0 0 1599 0 0 0 0 0 0 0 0 0 0

1787 37 BulletTranslationalLimitMotor const * 0 8576 37 BulletTranslationalLimitMotor const * 37 BulletTranslationalLimitMotor const * 0 0 1788 0 0 0 0 0 0 0 0 0 0

1788 35 BulletTranslationalLimitMotor const 0 8832 35 BulletTranslationalLimitMotor const 35 BulletTranslationalLimitMotor const 0 0 1600 0 0 0 0 0 0 0 0 0 0

1789 31 BulletTranslationalLimitMotor * 0 8576 31 BulletTranslationalLimitMotor * 31 BulletTranslationalLimitMotor * 0 0 1600 0 0 0 0 0 0 0 0 0 0

1790 25 BulletGenericConstraint * 0 8576 25 BulletGenericConstraint * 25 BulletGenericConstraint * 0 0 1601 0 0 0 0 0 0 0 0 0 0

1791 31 BulletGenericConstraint const * 0 8576 31 BulletGenericConstraint const * 31 BulletGenericConstraint const * 0 0 1792 0 0 0 0 0 0 0 0 0 0

1792 29 BulletGenericConstraint const 0 8832 29 BulletGenericConstraint const 29 BulletGenericConstraint const 0 0 1601 0 0 0 0 0 0 0 0 0 0

1793 30 BulletHeightfieldShape const * 0 8576 30 BulletHeightfieldShape const * 30 BulletHeightfieldShape const * 0 0 1794 0 0 0 0 0 0 0 0 0 0

1794 28 BulletHeightfieldShape const 0 8832 28 BulletHeightfieldShape const 28 BulletHeightfieldShape const 0 0 1602 0 0 0 0 0 0 0 0 0 0

1795 24 BulletHeightfieldShape * 0 8576 24 BulletHeightfieldShape * 24 BulletHeightfieldShape * 0 0 1602 0 0 0 0 0 0 0 0 0 0

1796 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 1797 0 0 0 0 0 0 0 0 0 0

1797 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 1798 0 0 0 0 0 0 0 0 0 0

1798 8 PNMImage 0 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 1516
/**
 * The name of this class derives from the fact that we originally implemented
 * it as a layer on top of the "pnm library", based on netpbm, which was built
 * to implement pbm, pgm, and pbm files, and is the underlying support of a
 * number of public-domain image file converters.  Nowadays we are no longer
 * derived directly from the pnm library, mainly to allow support of C++
 * iostreams instead of the C stdio FILE interface.
 *
 * Conceptually, a PNMImage is a two-dimensional array of xels, which are the
 * PNM-defined generic pixel type.  Each xel may have a red, green, and blue
 * component, or (if the image is grayscale) a gray component.  The image may
 * be read in, the individual xels manipulated, and written out again, or a
 * black image may be constructed from scratch.
 *
 * A PNMImage has a color space and a maxval, the combination of which defines
 * how a floating-point linear color value is encoded as an integer value in
 * memory.  The functions ending in _val operate on encoded colors, whereas
 * the regular ones work with linear floating-point values.  All operations
 * are color space correct unless otherwise specified.
 *
 * The image is of size XSize() by YSize() xels, numbered from top to bottom,
 * left to right, beginning at zero.
 *
 * Files can be specified by filename, or by an iostream pointer.  The
 * filename "-" refers to stdin or stdout.
 *
 * This class is not inherently thread-safe; use it from a single thread or
 * protect access using a mutex.
 */

1799 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1800 0 0 0 0 0 0 0 0 0 0

1800 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

1801 14 BulletHelper * 0 8576 14 BulletHelper * 14 BulletHelper * 0 0 1603 0 0 0 0 0 0 0 0 0 0

1802 20 BulletHelper const * 0 8576 20 BulletHelper const * 20 BulletHelper const * 0 0 1803 0 0 0 0 0 0 0 0 0 0

1803 18 BulletHelper const 0 8832 18 BulletHelper const 18 BulletHelper const 0 0 1603 0 0 0 0 0 0 0 0 0 0

1804 18 NodePathCollection 0 2048 18 NodePathCollection 18 NodePathCollection 0 0 0 0 0 0 0 0 0 0 0 0 178
/**
 * This is a set of zero or more NodePaths.  It's handy for returning from
 * functions that need to return multiple NodePaths (for instance,
 * NodePaths::get_children).
 */

1805 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 1806 0 0 0 0 0 0 0 0 0 0

1806 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

1807 20 NodePathCollection * 0 8576 20 NodePathCollection * 20 NodePathCollection * 0 0 1804 0 0 0 0 0 0 0 0 0 0

1808 12 InternalName 0 16779264 12 InternalName 12 InternalName 0 0 0 0 0 0 0 0 0 0 0 0 514
/**
 * Encodes a string name in a hash table, mapping it to a pointer.  This is
 * used to tokenify names so they may be used efficiently in low-level Panda
 * structures, for instance to differentiate the multiple sets of texture
 * coordinates that might be stored on a Geom.
 *
 * InternalNames are hierarchical, with the '.' used by convention as a
 * separator character.  You can construct a single InternalName as a
 * composition of one or more other names, or by giving it a source string
 * directly.
 */

1809 14 InternalName * 0 8576 14 InternalName * 14 InternalName * 0 0 1808 0 0 0 0 0 0 0 0 0 0

1810 22 GeomVertexFormat const 0 8832 22 GeomVertexFormat const 22 GeomVertexFormat const 0 0 1811 0 0 0 0 0 0 0 0 0 0

1811 16 GeomVertexFormat 0 16779264 16 GeomVertexFormat 16 GeomVertexFormat 0 0 0 0 0 0 0 0 0 0 0 0 924
/**
 * This class defines the physical layout of the vertex data stored within a
 * Geom.  The layout consists of a list of named columns, each of which has a
 * numeric type and a size.
 *
 * The columns are typically interleaved within a single array, but they may
 * also be distributed among multiple different arrays; at the extreme, each
 * column may be alone within its own array (which amounts to a parallel-array
 * definition).
 *
 * Thus, a GeomVertexFormat is really a list of GeomVertexArrayFormats, each
 * of which contains a list of columns.  However, a particular column name
 * should not appear more than once in the format, even between different
 * arrays.
 *
 * There are a handful of standard pre-defined GeomVertexFormat objects, or
 * you may define your own as needed.  You may record any combination of
 * standard and/or user-defined columns in your custom GeomVertexFormat
 * constructions.
 */

1812 24 GeomVertexFormat const * 0 8576 24 GeomVertexFormat const * 24 GeomVertexFormat const * 0 0 1810 0 0 0 0 0 0 0 0 0 0

1813 23 BulletHingeConstraint * 0 8576 23 BulletHingeConstraint * 23 BulletHingeConstraint * 0 0 1605 0 0 0 0 0 0 0 0 0 0

1814 29 BulletHingeConstraint const * 0 8576 29 BulletHingeConstraint const * 29 BulletHingeConstraint const * 0 0 1815 0 0 0 0 0 0 0 0 0 0

1815 27 BulletHingeConstraint const 0 8832 27 BulletHingeConstraint const 27 BulletHingeConstraint const 0 0 1605 0 0 0 0 0 0 0 0 0 0

1816 31 BulletMinkowskiSumShape const * 0 8576 31 BulletMinkowskiSumShape const * 31 BulletMinkowskiSumShape const * 0 0 1817 0 0 0 0 0 0 0 0 0 0

1817 29 BulletMinkowskiSumShape const 0 8832 29 BulletMinkowskiSumShape const 29 BulletMinkowskiSumShape const 0 0 1606 0 0 0 0 0 0 0 0 0 0

1818 25 BulletMinkowskiSumShape * 0 8576 25 BulletMinkowskiSumShape * 25 BulletMinkowskiSumShape * 0 0 1606 0 0 0 0 0 0 0 0 0 0

1819 30 BulletMultiSphereShape const * 0 8576 30 BulletMultiSphereShape const * 30 BulletMultiSphereShape const * 0 0 1820 0 0 0 0 0 0 0 0 0 0

1820 28 BulletMultiSphereShape const 0 8832 28 BulletMultiSphereShape const 28 BulletMultiSphereShape const 0 0 1609 0 0 0 0 0 0 0 0 0 0

1821 24 BulletMultiSphereShape * 0 8576 24 BulletMultiSphereShape * 24 BulletMultiSphereShape * 0 0 1609 0 0 0 0 0 0 0 0 0 0

1822 20 PTA_stdfloat const * 0 8576 20 PTA_stdfloat const * 20 PTA_stdfloat const * 0 0 1823 0 0 0 0 0 0 0 0 0 0

1823 18 PTA_stdfloat const 0 8832 18 PTA_stdfloat const 18 PTA_stdfloat const 0 0 1824 0 0 0 0 0 0 0 0 0 0

1824 12 PTA_stdfloat 0 2105344 12 PTA_stdfloat 12 PTA_stdfloat 0 0 1825 0 0 0 0 0 0 0 0 0 0

1825 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 1826 0 0 0 0 0 0 0 0 0 0

1826 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

1827 24 BulletPlaneShape const * 0 8576 24 BulletPlaneShape const * 24 BulletPlaneShape const * 0 0 1828 0 0 0 0 0 0 0 0 0 0

1828 22 BulletPlaneShape const 0 8832 22 BulletPlaneShape const 22 BulletPlaneShape const 0 0 1610 0 0 0 0 0 0 0 0 0 0

1829 18 BulletPlaneShape * 0 8576 18 BulletPlaneShape * 18 BulletPlaneShape * 0 0 1610 0 0 0 0 0 0 0 0 0 0

1830 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 1611 0 0 0 0 0 0 0 0 0 0

1831 22 CollisionPlane const * 0 8576 22 CollisionPlane const * 22 CollisionPlane const * 0 0 1832 0 0 0 0 0 0 0 0 0 0

1832 20 CollisionPlane const 0 8832 20 CollisionPlane const 20 CollisionPlane const 0 0 1833 0 0 0 0 0 0 0 0 0 0

1833 14 CollisionPlane 0 2048 14 CollisionPlane 14 CollisionPlane 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1834 24 BulletSliderConstraint * 0 8576 24 BulletSliderConstraint * 24 BulletSliderConstraint * 0 0 1613 0 0 0 0 0 0 0 0 0 0

1835 30 BulletSliderConstraint const * 0 8576 30 BulletSliderConstraint const * 30 BulletSliderConstraint const * 0 0 1836 0 0 0 0 0 0 0 0 0 0

1836 28 BulletSliderConstraint const 0 8832 28 BulletSliderConstraint const 28 BulletSliderConstraint const 0 0 1613 0 0 0 0 0 0 0 0 0 0

1837 29 BulletSoftBodyControl const * 0 8576 29 BulletSoftBodyControl const * 29 BulletSoftBodyControl const * 0 0 1838 0 0 0 0 0 0 0 0 0 0

1838 27 BulletSoftBodyControl const 0 8832 27 BulletSoftBodyControl const 27 BulletSoftBodyControl const 0 0 1614 0 0 0 0 0 0 0 0 0 0

1839 10 IControl * 0 8576 30 btSoftBody::AJoint::IControl * 30 btSoftBody::AJoint::IControl * 0 0 1615 0 0 0 0 0 0 0 0 0 0

1840 27 BulletSoftBodyShape const * 0 8576 27 BulletSoftBodyShape const * 27 BulletSoftBodyShape const * 0 0 1841 0 0 0 0 0 0 0 0 0 0

1841 25 BulletSoftBodyShape const 0 8832 25 BulletSoftBodyShape const 25 BulletSoftBodyShape const 0 0 1618 0 0 0 0 0 0 0 0 0 0

1842 25 BulletSphereShape const * 0 8576 25 BulletSphereShape const * 25 BulletSphereShape const * 0 0 1843 0 0 0 0 0 0 0 0 0 0

1843 23 BulletSphereShape const 0 8832 23 BulletSphereShape const 23 BulletSphereShape const 0 0 1619 0 0 0 0 0 0 0 0 0 0

1844 19 BulletSphereShape * 0 8576 19 BulletSphereShape * 19 BulletSphereShape * 0 0 1619 0 0 0 0 0 0 0 0 0 0

1845 23 CollisionSphere const * 0 8576 23 CollisionSphere const * 23 CollisionSphere const * 0 0 1846 0 0 0 0 0 0 0 0 0 0

1846 21 CollisionSphere const 0 8832 21 CollisionSphere const 21 CollisionSphere const 0 0 1847 0 0 0 0 0 0 0 0 0 0

1847 15 CollisionSphere 0 2048 15 CollisionSphere 15 CollisionSphere 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * A spherical collision volume or object.
 */

1848 27 BulletSphericalConstraint * 0 8576 27 BulletSphericalConstraint * 27 BulletSphericalConstraint * 0 0 1620 0 0 0 0 0 0 0 0 0 0

1849 33 BulletSphericalConstraint const * 0 8576 33 BulletSphericalConstraint const * 33 BulletSphericalConstraint const * 0 0 1850 0 0 0 0 0 0 0 0 0 0

1850 31 BulletSphericalConstraint const 0 8832 31 BulletSphericalConstraint const 31 BulletSphericalConstraint const 0 0 1620 0 0 0 0 0 0 0 0 0 0

1851 8 btScalar 0 2105344 8 btScalar 8 btScalar 0 0 1852 0 0 0 0 0 0 0 0 0 0

1852 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1853 24 BulletTickCallbackData * 0 8576 24 BulletTickCallbackData * 24 BulletTickCallbackData * 0 0 1621 0 0 0 0 0 0 0 0 0 0

1854 30 BulletTickCallbackData const * 0 8576 30 BulletTickCallbackData const * 30 BulletTickCallbackData const * 0 0 1855 0 0 0 0 0 0 0 0 0 0

1855 28 BulletTickCallbackData const 0 8832 28 BulletTickCallbackData const 28 BulletTickCallbackData const 0 0 1621 0 0 0 0 0 0 0 0 0 0

1856 20 BulletTriangleMesh * 0 8576 20 BulletTriangleMesh * 20 BulletTriangleMesh * 0 0 1622 0 0 0 0 0 0 0 0 0 0

1857 15 PTA_int const * 0 8576 15 PTA_int const * 15 PTA_int const * 0 0 1858 0 0 0 0 0 0 0 0 0 0

1858 13 PTA_int const 0 8832 13 PTA_int const 13 PTA_int const 0 0 1737 0 0 0 0 0 0 0 0 0 0

1859 26 BulletTriangleMesh const * 0 8576 26 BulletTriangleMesh const * 26 BulletTriangleMesh const * 0 0 1860 0 0 0 0 0 0 0 0 0 0

1860 24 BulletTriangleMesh const 0 8832 24 BulletTriangleMesh const 24 BulletTriangleMesh const 0 0 1622 0 0 0 0 0 0 0 0 0 0

1861 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1862 0 0 0 0 0 0 0 0 0 0

1862 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1863 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 1864 0 0 0 0 0 0 0 0 0 0

1864 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1865 25 BulletTriangleMeshShape * 0 8576 25 BulletTriangleMeshShape * 25 BulletTriangleMeshShape * 0 0 1624 0 0 0 0 0 0 0 0 0 0

1866 31 BulletTriangleMeshShape const * 0 8576 31 BulletTriangleMeshShape const * 31 BulletTriangleMeshShape const * 0 0 1867 0 0 0 0 0 0 0 0 0 0

1867 29 BulletTriangleMeshShape const 0 8832 29 BulletTriangleMeshShape const 29 BulletTriangleMeshShape const 0 0 1624 0 0 0 0 0 0 0 0 0 0

0
299
1868 4 node 0 2 1520 756 0 0 0 0 0 0 0 18 BulletRayHit::node 0

1869 7 hit_pos 0 2 1522 757 0 0 0 0 0 0 0 21 BulletRayHit::hit_pos 0

1870 10 hit_normal 0 2 1524 758 0 0 0 0 0 0 0 24 BulletRayHit::hit_normal 0

1871 12 hit_fraction 0 2 1526 759 0 0 0 0 0 0 0 26 BulletRayHit::hit_fraction 0

1872 10 shape_part 0 2 1528 760 0 0 0 0 0 0 0 24 BulletRayHit::shape_part 0

1873 14 triangle_index 0 2 1528 761 0 0 0 0 0 0 0 28 BulletRayHit::triangle_index 0

1874 8 from_pos 0 2 1522 767 0 0 0 0 0 0 0 32 BulletAllHitsRayResult::from_pos 0

1875 6 to_pos 0 2 1522 768 0 0 0 0 0 0 0 30 BulletAllHitsRayResult::to_pos 0

1876 20 closest_hit_fraction 0 2 1526 770 0 0 0 0 0 0 0 44 BulletAllHitsRayResult::closest_hit_fraction 0

1877 4 hits 0 66 1519 773 0 0 0 0 771 0 0 28 BulletAllHitsRayResult::hits 0

1878 10 polyhedral 0 2 1534 775 0 0 0 0 0 0 0 23 BulletShape::polyhedral 0

1879 6 convex 0 2 1534 776 0 0 0 0 0 0 0 19 BulletShape::convex 0

1880 9 convex_2d 0 2 1534 777 0 0 0 0 0 0 0 22 BulletShape::convex_2d 0

1881 7 concave 0 2 1534 778 0 0 0 0 0 0 0 20 BulletShape::concave 0

1882 8 infinite 0 2 1534 779 0 0 0 0 0 0 0 21 BulletShape::infinite 0

1883 10 non_moving 0 2 1534 780 0 0 0 0 0 0 0 23 BulletShape::non_moving 0

1884 9 soft_body 0 2 1534 781 0 0 0 0 0 0 0 22 BulletShape::soft_body 0

1885 6 margin 0 6 1526 784 782 0 0 0 0 0 0 19 BulletShape::margin 0

1886 4 name 0 2 1535 783 0 0 0 0 0 0 0 17 BulletShape::name 0

1887 12 shape_bounds 0 2 1538 785 0 0 0 0 0 0 0 25 BulletShape::shape_bounds 0

1888 6 shapes 0 66 1541 832 0 0 0 0 791 0 0 22 BulletBodyNode::shapes 0

1889 9 shape_pos 0 66 1522 833 0 0 0 0 791 0 0 25 BulletBodyNode::shape_pos 0

1890 9 shape_mat 0 66 1542 834 0 0 0 0 791 0 0 25 BulletBodyNode::shape_mat 0

1891 15 shape_transform 0 66 1544 835 0 0 0 0 791 0 0 31 BulletBodyNode::shape_transform 0

1892 12 shape_bounds 0 2 1538 796 0 0 0 0 0 0 0 28 BulletBodyNode::shape_bounds 0

1893 6 static 0 6 1534 798 800 0 0 0 0 0 0 22 BulletBodyNode::static 23
// Static and kinematic

1894 9 kinematic 0 6 1534 799 801 0 0 0 0 0 0 25 BulletBodyNode::kinematic 0

1895 22 collision_notification 0 6 1534 804 803 0 0 0 0 0 0 38 BulletBodyNode::collision_notification 0

1896 18 collision_response 0 6 1534 806 805 0 0 0 0 0 0 34 BulletBodyNode::collision_response 0

1897 16 contact_response 0 2 1534 808 0 0 0 0 0 0 0 32 BulletBodyNode::contact_response 0

1898 28 contact_processing_threshold 0 6 1526 809 810 0 0 0 0 0 0 44 BulletBodyNode::contact_processing_threshold 0

1899 6 active 0 6 1534 811 813 0 0 0 0 0 0 22 BulletBodyNode::active 15
// Deactivation

1900 17 deactivation_time 0 6 1526 815 814 0 0 0 0 0 0 33 BulletBodyNode::deactivation_time 0

1901 20 deactivation_enabled 0 6 1534 817 816 0 0 0 0 0 0 36 BulletBodyNode::deactivation_enabled 0

1902 13 debug_enabled 0 6 1534 819 818 0 0 0 0 0 0 29 BulletBodyNode::debug_enabled 0

1903 11 restitution 0 6 1526 820 821 0 0 0 0 0 0 27 BulletBodyNode::restitution 27
// Friction and Restitution

1904 8 friction 0 6 1526 822 823 0 0 0 0 0 0 24 BulletBodyNode::friction 0

1905 20 anisotropic_friction 0 6 1545 826 825 0 0 0 0 0 0 36 BulletBodyNode::anisotropic_friction 0

1906 23 ccd_swept_sphere_radius 0 6 1526 827 829 0 0 0 0 0 0 39 BulletBodyNode::ccd_swept_sphere_radius 6
// CCD

1907 20 ccd_motion_threshold 0 6 1526 828 830 0 0 0 0 0 0 36 BulletBodyNode::ccd_motion_threshold 0

1908 24 half_extents_with_margin 0 2 1545 839 0 0 0 0 0 0 0 40 BulletBoxShape::half_extents_with_margin 0

1909 27 half_extents_without_margin 0 2 1545 838 0 0 0 0 0 0 0 43 BulletBoxShape::half_extents_without_margin 0

1910 6 radius 0 2 1526 844 0 0 0 0 0 0 0 26 BulletCapsuleShape::radius 0

1911 6 height 0 2 1526 846 0 0 0 0 0 0 0 26 BulletCapsuleShape::height 0

1912 5 shape 0 2 1541 851 0 0 0 0 0 0 0 36 BulletCharacterControllerNode::shape 0

1913 7 gravity 0 6 1526 853 852 0 0 0 0 0 0 38 BulletCharacterControllerNode::gravity 0

1914 9 max_slope 0 6 1526 858 857 0 0 0 0 0 0 40 BulletCharacterControllerNode::max_slope 0

1915 9 on_ground 0 2 1534 860 0 0 0 0 0 0 0 40 BulletCharacterControllerNode::on_ground 0

1916 8 from_pos 0 2 1522 867 0 0 0 0 0 0 0 35 BulletClosestHitRayResult::from_pos 0

1917 6 to_pos 0 2 1522 868 0 0 0 0 0 0 0 33 BulletClosestHitRayResult::to_pos 0

1918 4 node 0 2 1520 870 0 0 0 0 0 0 0 31 BulletClosestHitRayResult::node 0

1919 7 hit_pos 0 2 1522 871 0 0 0 0 0 0 0 34 BulletClosestHitRayResult::hit_pos 0

1920 10 hit_normal 0 2 1524 872 0 0 0 0 0 0 0 37 BulletClosestHitRayResult::hit_normal 0

1921 12 hit_fraction 0 2 1526 873 0 0 0 0 0 0 0 39 BulletClosestHitRayResult::hit_fraction 0

1922 10 shape_part 0 2 1528 874 0 0 0 0 0 0 0 37 BulletClosestHitRayResult::shape_part 0

1923 14 triangle_index 0 2 1528 875 0 0 0 0 0 0 0 41 BulletClosestHitRayResult::triangle_index 0

1924 8 from_pos 0 2 1522 881 0 0 0 0 0 0 0 37 BulletClosestHitSweepResult::from_pos 0

1925 6 to_pos 0 2 1522 882 0 0 0 0 0 0 0 35 BulletClosestHitSweepResult::to_pos 0

1926 4 node 0 2 1520 884 0 0 0 0 0 0 0 33 BulletClosestHitSweepResult::node 0

1927 7 hit_pos 0 2 1522 885 0 0 0 0 0 0 0 36 BulletClosestHitSweepResult::hit_pos 0

1928 10 hit_normal 0 2 1524 886 0 0 0 0 0 0 0 39 BulletClosestHitSweepResult::hit_normal 0

1929 12 hit_fraction 0 2 1526 887 0 0 0 0 0 0 0 41 BulletClosestHitSweepResult::hit_fraction 0

1930 6 radius 0 2 1526 891 0 0 0 0 0 0 0 23 BulletConeShape::radius 0

1931 6 height 0 2 1526 892 0 0 0 0 0 0 0 23 BulletConeShape::height 0

1932 12 rigid_body_a 0 2 1558 894 0 0 0 0 0 0 0 30 BulletConstraint::rigid_body_a 0

1933 4 mass 0 6 1526 908 907 0 0 0 0 0 0 25 BulletRigidBodyNode::mass 0

1934 8 inv_mass 0 2 1526 909 0 0 0 0 0 0 0 29 BulletRigidBodyNode::inv_mass 0

1935 7 inertia 0 6 1524 911 910 0 0 0 0 0 0 28 BulletRigidBodyNode::inertia 0

1936 22 inv_inertia_diag_local 0 2 1524 912 0 0 0 0 0 0 0 43 BulletRigidBodyNode::inv_inertia_diag_local 0

1937 24 inv_inertia_tensor_world 0 2 1560 913 0 0 0 0 0 0 0 45 BulletRigidBodyNode::inv_inertia_tensor_world 0

1938 15 linear_velocity 0 6 1524 914 916 0 0 0 0 0 0 36 BulletRigidBodyNode::linear_velocity 11
// Velocity

1939 16 angular_velocity 0 6 1524 915 917 0 0 0 0 0 0 37 BulletRigidBodyNode::angular_velocity 0

1940 14 linear_damping 0 6 1526 918 920 0 0 0 0 0 0 35 BulletRigidBodyNode::linear_damping 10
// Damping

1941 15 angular_damping 0 6 1526 919 921 0 0 0 0 0 0 36 BulletRigidBodyNode::angular_damping 0

1942 11 total_force 0 2 1524 929 0 0 0 0 0 0 0 32 BulletRigidBodyNode::total_force 0

1943 12 total_torque 0 2 1524 930 0 0 0 0 0 0 0 33 BulletRigidBodyNode::total_torque 0

1944 22 linear_sleep_threshold 0 6 1526 931 933 0 0 0 0 0 0 43 BulletRigidBodyNode::linear_sleep_threshold 26
// Deactivation thresholds

1945 23 angular_sleep_threshold 0 6 1526 932 934 0 0 0 0 0 0 44 BulletRigidBodyNode::angular_sleep_threshold 0

1946 7 gravity 0 6 1524 936 935 0 0 0 0 0 0 28 BulletRigidBodyNode::gravity 0

1947 13 linear_factor 0 6 1524 937 939 0 0 0 0 0 0 34 BulletRigidBodyNode::linear_factor 20
// Restrict movement

1948 14 angular_factor 0 6 1524 938 940 0 0 0 0 0 0 35 BulletRigidBodyNode::angular_factor 0

1949 12 rigid_body_b 0 2 1558 895 0 0 0 0 0 0 0 30 BulletConstraint::rigid_body_b 0

1950 15 debug_draw_size 0 6 1526 898 897 0 0 0 0 0 0 33 BulletConstraint::debug_draw_size 0

1951 15 applied_impulse 0 2 1526 899 0 0 0 0 0 0 0 33 BulletConstraint::applied_impulse 0

1952 18 breaking_threshold 0 6 1526 901 900 0 0 0 0 0 0 36 BulletConstraint::breaking_threshold 0

1953 7 enabled 0 6 1534 903 902 0 0 0 0 0 0 25 BulletConstraint::enabled 0

1954 13 fix_threshold 0 6 1526 947 948 0 0 0 0 0 0 40 BulletConeTwistConstraint::fix_threshold 0

1955 7 frame_a 0 2 1544 955 0 0 0 0 0 0 0 34 BulletConeTwistConstraint::frame_a 0

1956 7 frame_b 0 2 1544 956 0 0 0 0 0 0 0 34 BulletConeTwistConstraint::frame_b 0

1957 9 life_time 0 2 1528 959 0 0 0 0 0 0 0 30 BulletManifoldPoint::life_time 0

1958 8 distance 0 2 1526 960 0 0 0 0 0 0 0 29 BulletManifoldPoint::distance 0

1959 15 applied_impulse 0 6 1526 961 978 0 0 0 0 0 0 36 BulletManifoldPoint::applied_impulse 0

1960 19 position_world_on_a 0 2 1522 962 0 0 0 0 0 0 0 40 BulletManifoldPoint::position_world_on_a 0

1961 19 position_world_on_b 0 2 1522 963 0 0 0 0 0 0 0 40 BulletManifoldPoint::position_world_on_b 0

1962 17 normal_world_on_b 0 2 1524 964 0 0 0 0 0 0 0 38 BulletManifoldPoint::normal_world_on_b 0

1963 13 local_point_a 0 2 1522 965 0 0 0 0 0 0 0 34 BulletManifoldPoint::local_point_a 0

1964 13 local_point_b 0 2 1522 966 0 0 0 0 0 0 0 34 BulletManifoldPoint::local_point_b 0

1965 8 part_id0 0 2 1528 967 0 0 0 0 0 0 0 29 BulletManifoldPoint::part_id0 0

1966 8 part_id1 0 2 1528 968 0 0 0 0 0 0 0 29 BulletManifoldPoint::part_id1 0

1967 6 index0 0 2 1528 969 0 0 0 0 0 0 0 27 BulletManifoldPoint::index0 0

1968 6 index1 0 2 1528 970 0 0 0 0 0 0 0 27 BulletManifoldPoint::index1 0

1969 28 lateral_friction_initialized 0 6 1534 983 971 0 0 0 0 0 0 49 BulletManifoldPoint::lateral_friction_initialized 0

1970 21 lateral_friction_dir1 0 6 1524 984 972 0 0 0 0 0 0 42 BulletManifoldPoint::lateral_friction_dir1 0

1971 21 lateral_friction_dir2 0 6 1524 985 973 0 0 0 0 0 0 42 BulletManifoldPoint::lateral_friction_dir2 0

1972 15 contact_motion1 0 6 1526 986 974 0 0 0 0 0 0 36 BulletManifoldPoint::contact_motion1 0

1973 15 contact_motion2 0 6 1526 987 975 0 0 0 0 0 0 36 BulletManifoldPoint::contact_motion2 0

1974 17 combined_friction 0 6 1526 988 976 0 0 0 0 0 0 38 BulletManifoldPoint::combined_friction 0

1975 20 combined_restitution 0 6 1526 989 977 0 0 0 0 0 0 41 BulletManifoldPoint::combined_restitution 0

1976 24 applied_impulse_lateral1 0 6 1526 990 979 0 0 0 0 0 0 45 BulletManifoldPoint::applied_impulse_lateral1 0

1977 24 applied_impulse_lateral2 0 6 1526 991 980 0 0 0 0 0 0 45 BulletManifoldPoint::applied_impulse_lateral2 0

1978 12 contact_cfm1 0 6 1526 992 981 0 0 0 0 0 0 33 BulletManifoldPoint::contact_cfm1 0

1979 12 contact_cfm2 0 6 1526 993 982 0 0 0 0 0 0 33 BulletManifoldPoint::contact_cfm2 0

1980 8 manifold 0 2 1563 995 0 0 0 0 0 0 0 35 BulletContactCallbackData::manifold 0

1981 5 node0 0 2 1520 996 0 0 0 0 0 0 0 32 BulletContactCallbackData::node0 0

1982 5 node1 0 2 1520 997 0 0 0 0 0 0 0 32 BulletContactCallbackData::node1 0

1983 8 part_id0 0 2 1528 998 0 0 0 0 0 0 0 35 BulletContactCallbackData::part_id0 0

1984 8 part_id1 0 2 1528 999 0 0 0 0 0 0 0 35 BulletContactCallbackData::part_id1 0

1985 6 index0 0 2 1528 1000 0 0 0 0 0 0 0 33 BulletContactCallbackData::index0 0

1986 6 index1 0 2 1528 1001 0 0 0 0 0 0 0 33 BulletContactCallbackData::index1 0

1987 14 manifold_point 0 2 1563 1003 0 0 0 0 0 0 0 29 BulletContact::manifold_point 0

1988 5 node0 0 2 1520 1004 0 0 0 0 0 0 0 20 BulletContact::node0 0

1989 5 node1 0 2 1520 1005 0 0 0 0 0 0 0 20 BulletContact::node1 0

1990 4 idx0 0 2 1528 1006 0 0 0 0 0 0 0 19 BulletContact::idx0 0

1991 4 idx1 0 2 1528 1007 0 0 0 0 0 0 0 19 BulletContact::idx1 0

1992 8 part_id0 0 2 1528 1008 0 0 0 0 0 0 0 23 BulletContact::part_id0 0

1993 8 part_id1 0 2 1528 1009 0 0 0 0 0 0 0 23 BulletContact::part_id1 0

1994 8 contacts 0 66 1566 1015 0 0 0 0 1013 0 0 29 BulletContactResult::contacts 0

1995 9 wireframe 0 6 1534 1023 1019 0 0 0 0 0 0 26 BulletDebugNode::wireframe 0

1996 11 constraints 0 6 1534 1024 1020 0 0 0 0 0 0 28 BulletDebugNode::constraints 0

1997 14 bounding_boxes 0 6 1534 1025 1021 0 0 0 0 0 0 31 BulletDebugNode::bounding_boxes 0

1998 7 normals 0 6 1534 1026 1022 0 0 0 0 0 0 24 BulletDebugNode::normals 0

1999 17 overlapping_nodes 0 66 1520 1031 0 0 0 0 1029 0 0 34 BulletGhostNode::overlapping_nodes 0

2000 3 pos 0 2 1522 1035 0 0 0 0 0 0 0 30 BulletSoftBodyNodeElement::pos 0

2001 8 velocity 0 2 1524 1036 0 0 0 0 0 0 0 35 BulletSoftBodyNodeElement::velocity 0

2002 6 normal 0 2 1524 1037 0 0 0 0 0 0 0 33 BulletSoftBodyNodeElement::normal 0

2003 8 inv_mass 0 2 1526 1038 0 0 0 0 0 0 0 35 BulletSoftBodyNodeElement::inv_mass 0

2004 4 area 0 2 1526 1039 0 0 0 0 0 0 0 31 BulletSoftBodyNodeElement::area 0

2005 8 attached 0 2 1528 1040 0 0 0 0 0 0 0 35 BulletSoftBodyNodeElement::attached 0

2006 3 cfg 0 2 1573 1042 0 0 0 0 0 0 0 23 BulletSoftBodyNode::cfg 0

2007 10 aero_model 0 6 1575 1091 1090 0 0 0 0 0 0 32 BulletSoftBodyConfig::aero_model 0

2008 28 velocities_correction_factor 0 6 1526 1116 1092 0 0 0 0 0 0 50 BulletSoftBodyConfig::velocities_correction_factor 0

2009 19 damping_coefficient 0 6 1526 1117 1093 0 0 0 0 0 0 41 BulletSoftBodyConfig::damping_coefficient 0

2010 16 drag_coefficient 0 6 1526 1118 1094 0 0 0 0 0 0 38 BulletSoftBodyConfig::drag_coefficient 0

2011 16 lift_coefficient 0 6 1526 1119 1095 0 0 0 0 0 0 38 BulletSoftBodyConfig::lift_coefficient 0

2012 20 pressure_coefficient 0 6 1526 1120 1096 0 0 0 0 0 0 42 BulletSoftBodyConfig::pressure_coefficient 0

2013 31 volume_conservation_coefficient 0 6 1526 1121 1097 0 0 0 0 0 0 53 BulletSoftBodyConfig::volume_conservation_coefficient 0

2014 28 dynamic_friction_coefficient 0 6 1526 1122 1098 0 0 0 0 0 0 50 BulletSoftBodyConfig::dynamic_friction_coefficient 0

2015 25 pose_matching_coefficient 0 6 1526 1123 1099 0 0 0 0 0 0 47 BulletSoftBodyConfig::pose_matching_coefficient 0

2016 23 rigid_contacts_hardness 0 6 1526 1124 1100 0 0 0 0 0 0 45 BulletSoftBodyConfig::rigid_contacts_hardness 0

2017 25 kinetic_contacts_hardness 0 6 1526 1125 1101 0 0 0 0 0 0 47 BulletSoftBodyConfig::kinetic_contacts_hardness 0

2018 22 soft_contacts_hardness 0 6 1526 1126 1102 0 0 0 0 0 0 44 BulletSoftBodyConfig::soft_contacts_hardness 0

2019 16 anchors_hardness 0 6 1526 1127 1103 0 0 0 0 0 0 38 BulletSoftBodyConfig::anchors_hardness 0

2020 22 soft_vs_rigid_hardness 0 6 1526 1128 1104 0 0 0 0 0 0 44 BulletSoftBodyConfig::soft_vs_rigid_hardness 0

2021 24 soft_vs_kinetic_hardness 0 6 1526 1129 1105 0 0 0 0 0 0 46 BulletSoftBodyConfig::soft_vs_kinetic_hardness 0

2022 21 soft_vs_soft_hardness 0 6 1526 1130 1106 0 0 0 0 0 0 43 BulletSoftBodyConfig::soft_vs_soft_hardness 0

2023 27 soft_vs_rigid_impulse_split 0 6 1526 1131 1107 0 0 0 0 0 0 49 BulletSoftBodyConfig::soft_vs_rigid_impulse_split 0

2024 29 soft_vs_kinetic_impulse_split 0 6 1526 1132 1108 0 0 0 0 0 0 51 BulletSoftBodyConfig::soft_vs_kinetic_impulse_split 0

2025 26 soft_vs_soft_impulse_split 0 6 1526 1133 1109 0 0 0 0 0 0 48 BulletSoftBodyConfig::soft_vs_soft_impulse_split 0

2026 9 maxvolume 0 6 1526 1134 1110 0 0 0 0 0 0 31 BulletSoftBodyConfig::maxvolume 0

2027 9 timescale 0 6 1526 1135 1111 0 0 0 0 0 0 31 BulletSoftBodyConfig::timescale 0

2028 27 positions_solver_iterations 0 6 1528 1136 1112 0 0 0 0 0 0 49 BulletSoftBodyConfig::positions_solver_iterations 0

2029 28 velocities_solver_iterations 0 6 1528 1137 1113 0 0 0 0 0 0 50 BulletSoftBodyConfig::velocities_solver_iterations 0

2030 23 drift_solver_iterations 0 6 1528 1138 1114 0 0 0 0 0 0 45 BulletSoftBodyConfig::drift_solver_iterations 0

2031 25 cluster_solver_iterations 0 6 1528 1139 1115 0 0 0 0 0 0 47 BulletSoftBodyConfig::cluster_solver_iterations 0

2032 10 world_info 0 2 1576 1043 0 0 0 0 0 0 0 30 BulletSoftBodyNode::world_info 0

2033 11 air_density 0 6 1526 1147 1142 0 0 0 0 0 0 36 BulletSoftBodyWorldInfo::air_density 0

2034 13 water_density 0 6 1526 1148 1143 0 0 0 0 0 0 38 BulletSoftBodyWorldInfo::water_density 0

2035 12 water_offset 0 6 1526 1149 1144 0 0 0 0 0 0 37 BulletSoftBodyWorldInfo::water_offset 0

2036 12 water_normal 0 6 1524 1150 1145 0 0 0 0 0 0 37 BulletSoftBodyWorldInfo::water_normal 0

2037 7 gravity 0 6 1524 1151 1146 0 0 0 0 0 0 32 BulletSoftBodyWorldInfo::gravity 0

2038 13 wind_velocity 0 6 1524 1058 1057 0 0 0 0 0 0 33 BulletSoftBodyNode::wind_velocity 0

2039 4 aabb 0 2 1577 1060 0 0 0 0 0 0 0 24 BulletSoftBodyNode::aabb 0

2040 12 num_clusters 0 2 1528 1064 0 0 0 0 0 0 0 32 BulletSoftBodyNode::num_clusters 0

2041 9 materials 0 66 1578 1163 0 0 0 0 1075 0 0 29 BulletSoftBodyNode::materials 0

2042 16 linear_stiffness 0 6 1526 1156 1157 0 0 0 0 0 0 40 BulletSoftBodyMaterial::linear_stiffness 0

2043 17 angular_stiffness 0 6 1526 1158 1159 0 0 0 0 0 0 41 BulletSoftBodyMaterial::angular_stiffness 0

2044 19 volume_preservation 0 6 1526 1160 1161 0 0 0 0 0 0 43 BulletSoftBodyMaterial::volume_preservation 0

2045 5 nodes 0 66 1571 1164 0 0 0 0 1078 0 0 25 BulletSoftBodyNode::nodes 0

2046 20 suspension_stiffness 0 6 1526 1172 1166 0 0 0 0 0 0 41 BulletVehicleTuning::suspension_stiffness 0

2047 22 suspension_compression 0 6 1526 1173 1167 0 0 0 0 0 0 43 BulletVehicleTuning::suspension_compression 0

2048 18 suspension_damping 0 6 1526 1174 1168 0 0 0 0 0 0 39 BulletVehicleTuning::suspension_damping 0

2049 24 max_suspension_travel_cm 0 6 1526 1175 1169 0 0 0 0 0 0 45 BulletVehicleTuning::max_suspension_travel_cm 0

2050 13 friction_slip 0 6 1526 1176 1170 0 0 0 0 0 0 34 BulletVehicleTuning::friction_slip 0

2051 20 max_suspension_force 0 6 1526 1177 1171 0 0 0 0 0 0 41 BulletVehicleTuning::max_suspension_force 0

2052 7 chassis 0 2 1558 1183 0 0 0 0 0 0 0 22 BulletVehicle::chassis 0

2053 21 current_speed_km_hour 0 2 1526 1184 0 0 0 0 0 0 0 36 BulletVehicle::current_speed_km_hour 0

2054 14 forward_vector 0 2 1524 1186 0 0 0 0 0 0 0 29 BulletVehicle::forward_vector 0

2055 6 wheels 0 66 1581 1253 0 0 0 0 1190 0 0 21 BulletVehicle::wheels 0

2056 12 raycast_info 0 2 1582 1241 0 0 0 0 0 0 0 25 BulletWheel::raycast_info 0

2057 10 in_contact 0 2 1534 1243 0 0 0 0 0 0 0 34 BulletWheelRaycastInfo::in_contact 0

2058 17 suspension_length 0 2 1526 1244 0 0 0 0 0 0 0 41 BulletWheelRaycastInfo::suspension_length 0

2059 17 contact_normal_ws 0 2 1524 1245 0 0 0 0 0 0 0 41 BulletWheelRaycastInfo::contact_normal_ws 0

2060 18 wheel_direction_ws 0 2 1524 1246 0 0 0 0 0 0 0 42 BulletWheelRaycastInfo::wheel_direction_ws 0

2061 13 wheel_axle_ws 0 2 1524 1247 0 0 0 0 0 0 0 37 BulletWheelRaycastInfo::wheel_axle_ws 0

2062 16 contact_point_ws 0 2 1522 1248 0 0 0 0 0 0 0 40 BulletWheelRaycastInfo::contact_point_ws 0

2063 13 hard_point_ws 0 2 1522 1249 0 0 0 0 0 0 0 37 BulletWheelRaycastInfo::hard_point_ws 0

2064 13 ground_object 0 2 1520 1250 0 0 0 0 0 0 0 37 BulletWheelRaycastInfo::ground_object 0

2065 22 suspension_rest_length 0 2 1526 1217 0 0 0 0 0 0 0 35 BulletWheel::suspension_rest_length 0

2066 20 suspension_stiffness 0 6 1526 1218 1194 0 0 0 0 0 0 33 BulletWheel::suspension_stiffness 0

2067 24 max_suspension_travel_cm 0 6 1526 1219 1195 0 0 0 0 0 0 37 BulletWheel::max_suspension_travel_cm 0

2068 13 friction_slip 0 6 1526 1220 1196 0 0 0 0 0 0 26 BulletWheel::friction_slip 0

2069 20 max_suspension_force 0 6 1526 1221 1197 0 0 0 0 0 0 33 BulletWheel::max_suspension_force 0

2070 26 wheels_damping_compression 0 6 1526 1222 1198 0 0 0 0 0 0 39 BulletWheel::wheels_damping_compression 0

2071 25 wheels_damping_relaxation 0 6 1526 1223 1199 0 0 0 0 0 0 38 BulletWheel::wheels_damping_relaxation 0

2072 14 roll_influence 0 6 1526 1224 1200 0 0 0 0 0 0 27 BulletWheel::roll_influence 0

2073 12 wheel_radius 0 6 1526 1225 1201 0 0 0 0 0 0 25 BulletWheel::wheel_radius 0

2074 8 steering 0 6 1526 1226 1202 0 0 0 0 0 0 21 BulletWheel::steering 0

2075 8 rotation 0 6 1526 1227 1203 0 0 0 0 0 0 21 BulletWheel::rotation 0

2076 14 delta_rotation 0 6 1526 1228 1204 0 0 0 0 0 0 27 BulletWheel::delta_rotation 0

2077 12 engine_force 0 6 1526 1229 1205 0 0 0 0 0 0 25 BulletWheel::engine_force 0

2078 5 brake 0 6 1526 1230 1206 0 0 0 0 0 0 18 BulletWheel::brake 0

2079 9 skid_info 0 6 1526 1231 1207 0 0 0 0 0 0 22 BulletWheel::skid_info 0

2080 23 wheels_suspension_force 0 6 1526 1232 1208 0 0 0 0 0 0 36 BulletWheel::wheels_suspension_force 0

2081 28 suspension_relative_velocity 0 6 1526 1233 1209 0 0 0 0 0 0 41 BulletWheel::suspension_relative_velocity 0

2082 31 clipped_inv_connection_point_cs 0 6 1526 1234 1210 0 0 0 0 0 0 44 BulletWheel::clipped_inv_connection_point_cs 0

2083 27 chassis_connection_point_cs 0 6 1522 1235 1211 0 0 0 0 0 0 40 BulletWheel::chassis_connection_point_cs 0

2084 18 wheel_direction_cs 0 6 1524 1236 1212 0 0 0 0 0 0 31 BulletWheel::wheel_direction_cs 0

2085 13 wheel_axle_cs 0 6 1524 1237 1213 0 0 0 0 0 0 26 BulletWheel::wheel_axle_cs 0

2086 15 world_transform 0 6 1542 1238 1214 0 0 0 0 0 0 28 BulletWheel::world_transform 0

2087 11 front_wheel 0 6 1534 1239 1215 0 0 0 0 0 0 24 BulletWheel::front_wheel 0

2088 4 node 0 6 1520 1240 1216 0 0 0 0 0 0 17 BulletWheel::node 0

2089 6 tuning 0 2 1579 1192 0 0 0 0 0 0 0 21 BulletVehicle::tuning 9
// Tuning

2090 7 gravity 0 6 1524 1257 1256 0 0 0 0 0 0 20 BulletWorld::gravity 0

2091 10 world_info 0 2 1576 1259 0 0 0 0 0 0 0 23 BulletWorld::world_info 0

2092 10 debug_node 0 30 1586 1262 1260 1263 1261 0 0 0 0 23 BulletWorld::debug_node 0

2093 6 ghosts 0 66 1587 1297 0 0 0 0 1267 0 0 19 BulletWorld::ghosts 0

2094 12 rigid_bodies 0 66 1558 1298 0 0 0 0 1269 0 0 25 BulletWorld::rigid_bodies 0

2095 11 soft_bodies 0 66 1588 1299 0 0 0 0 1271 0 0 24 BulletWorld::soft_bodies 0

2096 10 characters 0 66 1589 1300 0 0 0 0 1273 0 0 23 BulletWorld::characters 0

2097 8 vehicles 0 66 1590 1301 0 0 0 0 1275 0 0 21 BulletWorld::vehicles 0

2098 11 constraints 0 66 1591 1302 0 0 0 0 1277 0 0 24 BulletWorld::constraints 0

2099 9 manifolds 0 66 1592 1313 0 0 0 0 1285 0 0 22 BulletWorld::manifolds 0

2100 5 node0 0 2 1520 1304 0 0 0 0 0 0 0 31 BulletPersistentManifold::node0 0

2101 5 node1 0 2 1520 1305 0 0 0 0 0 0 0 31 BulletPersistentManifold::node1 0

2102 15 manifold_points 0 66 1594 1311 0 0 0 0 1306 0 0 41 BulletPersistentManifold::manifold_points 0

2103 26 contact_breaking_threshold 0 2 1526 1308 0 0 0 0 0 0 0 52 BulletPersistentManifold::contact_breaking_threshold 0

2104 28 contact_processing_threshold 0 2 1526 1309 0 0 0 0 0 0 0 54 BulletPersistentManifold::contact_processing_threshold 0

2105 22 force_update_all_aabbs 0 6 1534 1290 1289 0 0 0 0 0 0 35 BulletWorld::force_update_all_aabbs 0

2106 10 num_points 0 2 1528 1332 0 0 0 0 0 0 0 39 BulletConvexPointCloudShape::num_points 0

2107 6 radius 0 2 1526 1335 0 0 0 0 0 0 0 27 BulletCylinderShape::radius 0

2108 27 half_extents_without_margin 0 2 1545 1336 0 0 0 0 0 0 0 48 BulletCylinderShape::half_extents_without_margin 0

2109 24 half_extents_with_margin 0 2 1545 1337 0 0 0 0 0 0 0 45 BulletCylinderShape::half_extents_with_margin 0

2110 6 node_0 0 2 1520 1340 0 0 0 0 0 0 0 32 BulletFilterCallbackData::node_0 0

2111 6 node_1 0 2 1520 1341 0 0 0 0 0 0 0 32 BulletFilterCallbackData::node_1 0

2112 7 collide 0 6 1534 1343 1342 0 0 0 0 0 0 33 BulletFilterCallbackData::collide 0

2113 7 limited 0 2 1534 1360 0 0 0 0 0 0 0 35 BulletRotationalLimitMotor::limited 0

2114 13 motor_enabled 0 6 1534 1361 1348 0 0 0 0 0 0 41 BulletRotationalLimitMotor::motor_enabled 0

2115 13 current_limit 0 2 1528 1362 0 0 0 0 0 0 0 41 BulletRotationalLimitMotor::current_limit 0

2116 13 current_error 0 2 1526 1363 0 0 0 0 0 0 0 41 BulletRotationalLimitMotor::current_error 0

2117 16 current_position 0 2 1526 1364 0 0 0 0 0 0 0 44 BulletRotationalLimitMotor::current_position 0

2118 19 accumulated_impulse 0 2 1526 1365 0 0 0 0 0 0 0 47 BulletRotationalLimitMotor::accumulated_impulse 0

2119 13 current_error 0 2 1524 1382 0 0 0 0 0 0 0 44 BulletTranslationalLimitMotor::current_error 0

2120 12 current_diff 0 2 1522 1383 0 0 0 0 0 0 0 43 BulletTranslationalLimitMotor::current_diff 0

2121 19 accumulated_impulse 0 2 1524 1384 0 0 0 0 0 0 0 50 BulletTranslationalLimitMotor::accumulated_impulse 0

2122 25 translational_limit_motor 0 2 1600 1392 0 0 0 0 0 0 0 50 BulletGenericConstraint::translational_limit_motor 0

2123 7 frame_a 0 2 1544 1394 0 0 0 0 0 0 0 32 BulletGenericConstraint::frame_a 0

2124 7 frame_b 0 2 1544 1395 0 0 0 0 0 0 0 32 BulletGenericConstraint::frame_b 0

2125 8 sb_index 0 2 1604 1401 0 0 0 0 0 0 0 22 BulletHelper::sb_index 17
// Internal names

2126 7 sb_flip 0 2 1604 1402 0 0 0 0 0 0 0 21 BulletHelper::sb_flip 0

2127 11 hinge_angle 0 2 1526 1411 0 0 0 0 0 0 0 34 BulletHingeConstraint::hinge_angle 0

2128 11 lower_limit 0 2 1526 1412 0 0 0 0 0 0 0 34 BulletHingeConstraint::lower_limit 0

2129 11 upper_limit 0 2 1526 1413 0 0 0 0 0 0 0 34 BulletHingeConstraint::upper_limit 0

2130 12 angular_only 0 6 1534 1414 1415 0 0 0 0 0 0 35 BulletHingeConstraint::angular_only 0

2131 7 frame_a 0 2 1544 1423 0 0 0 0 0 0 0 30 BulletHingeConstraint::frame_a 0

2132 7 frame_b 0 2 1544 1424 0 0 0 0 0 0 0 30 BulletHingeConstraint::frame_b 0

2133 11 transform_a 0 6 1544 1429 1427 0 0 0 0 0 0 36 BulletMinkowskiSumShape::transform_a 0

2134 11 transform_b 0 6 1544 1430 1428 0 0 0 0 0 0 36 BulletMinkowskiSumShape::transform_b 0

2135 7 shape_a 0 2 1607 1431 0 0 0 0 0 0 0 32 BulletMinkowskiSumShape::shape_a 0

2136 7 shape_b 0 2 1607 1432 0 0 0 0 0 0 0 32 BulletMinkowskiSumShape::shape_b 0

2137 12 sphere_count 0 2 1528 1436 0 0 0 0 0 0 0 36 BulletMultiSphereShape::sphere_count 0

2138 10 sphere_pos 0 66 1522 1439 0 0 0 0 1436 0 0 34 BulletMultiSphereShape::sphere_pos 0

2139 13 sphere_radius 0 66 1526 1440 0 0 0 0 1436 0 0 37 BulletMultiSphereShape::sphere_radius 0

2140 5 plane 0 2 1611 1443 0 0 0 0 0 0 0 23 BulletPlaneShape::plane 0

2141 12 plane_normal 0 2 1524 1444 0 0 0 0 0 0 0 30 BulletPlaneShape::plane_normal 0

2142 14 plane_constant 0 2 1526 1445 0 0 0 0 0 0 0 32 BulletPlaneShape::plane_constant 0

2143 10 linear_pos 0 2 1526 1449 0 0 0 0 0 0 0 34 BulletSliderConstraint::linear_pos 0

2144 11 angular_pos 0 2 1526 1450 0 0 0 0 0 0 0 35 BulletSliderConstraint::angular_pos 0

2145 18 lower_linear_limit 0 6 1526 1451 1455 0 0 0 0 0 0 42 BulletSliderConstraint::lower_linear_limit 9
// Limits

2146 18 upper_linear_limit 0 6 1526 1452 1456 0 0 0 0 0 0 42 BulletSliderConstraint::upper_linear_limit 0

2147 19 lower_angular_limit 0 6 1526 1453 1457 0 0 0 0 0 0 43 BulletSliderConstraint::lower_angular_limit 0

2148 19 upper_angular_limit 0 6 1526 1454 1458 0 0 0 0 0 0 43 BulletSliderConstraint::upper_angular_limit 0

2149 20 powered_linear_motor 0 6 1534 1462 1459 0 0 0 0 0 0 44 BulletSliderConstraint::powered_linear_motor 0

2150 28 target_linear_motor_velocity 0 6 1526 1463 1460 0 0 0 0 0 0 52 BulletSliderConstraint::target_linear_motor_velocity 0

2151 22 max_linear_motor_force 0 6 1526 1464 1461 0 0 0 0 0 0 46 BulletSliderConstraint::max_linear_motor_force 0

2152 21 powered_angular_motor 0 6 1534 1468 1465 0 0 0 0 0 0 45 BulletSliderConstraint::powered_angular_motor 0

2153 29 target_angular_motor_velocity 0 6 1526 1469 1466 0 0 0 0 0 0 53 BulletSliderConstraint::target_angular_motor_velocity 0

2154 23 max_angular_motor_force 0 6 1526 1470 1467 0 0 0 0 0 0 47 BulletSliderConstraint::max_angular_motor_force 0

2155 7 frame_a 0 2 1544 1472 0 0 0 0 0 0 0 31 BulletSliderConstraint::frame_a 0

2156 7 frame_b 0 2 1544 1473 0 0 0 0 0 0 0 31 BulletSliderConstraint::frame_b 0

2157 4 body 0 2 1588 1483 0 0 0 0 0 0 0 25 BulletSoftBodyShape::body 0

2158 6 radius 0 2 1526 1486 0 0 0 0 0 0 0 25 BulletSphereShape::radius 0

2159 7 pivot_a 0 6 1522 1492 1490 0 0 0 0 0 0 34 BulletSphericalConstraint::pivot_a 0

2160 7 pivot_b 0 6 1522 1493 1491 0 0 0 0 0 0 34 BulletSphericalConstraint::pivot_b 0

2161 8 timestep 0 2 1526 1496 0 0 0 0 0 0 0 32 BulletTickCallbackData::timestep 0

2162 16 welding_distance 0 6 1526 1506 1503 0 0 0 0 0 0 36 BulletTriangleMesh::welding_distance 0

2163 8 vertices 0 66 1522 1510 0 0 0 0 1509 0 0 28 BulletTriangleMesh::vertices 0

2164 9 triangles 0 66 1623 1511 0 0 0 0 1505 0 0 29 BulletTriangleMesh::triangles 0

2165 6 static 0 2 1534 1515 0 0 0 0 0 0 0 31 BulletTriangleMeshShape::static 0

2166 7 dynamic 0 2 1534 1516 0 0 0 0 0 0 0 32 BulletTriangleMeshShape::dynamic 0

15
2167 8 get_hits 0 771 772 32 BulletAllHitsRayResult::get_hits 0

2168 10 get_shapes 0 791 792 26 BulletBodyNode::get_shapes 0

2169 12 get_contacts 0 1013 1014 33 BulletContactResult::get_contacts 0

2170 21 get_overlapping_nodes 0 1029 1030 38 BulletGhostNode::get_overlapping_nodes 0

2171 13 get_materials 0 1075 1076 33 BulletSoftBodyNode::get_materials 0

2172 9 get_nodes 0 1078 1079 29 BulletSoftBodyNode::get_nodes 0

2173 10 get_wheels 0 1190 1191 25 BulletVehicle::get_wheels 0

2174 10 get_ghosts 0 1267 1268 23 BulletWorld::get_ghosts 0

2175 16 get_rigid_bodies 0 1269 1270 29 BulletWorld::get_rigid_bodies 0

2176 15 get_soft_bodies 0 1271 1272 28 BulletWorld::get_soft_bodies 0

2177 14 get_characters 0 1273 1274 27 BulletWorld::get_characters 0

2178 12 get_vehicles 0 1275 1276 25 BulletWorld::get_vehicles 0

2179 15 get_constraints 0 1277 1278 28 BulletWorld::get_constraints 0

2180 13 get_manifolds 0 1285 1286 26 BulletWorld::get_manifolds 0

2181 19 get_manifold_points 0 1306 1307 45 BulletPersistentManifold::get_manifold_points 0

